--  API2Cart OpenAPI
--  API2Cart
--
--  The version of the OpenAPI document: 1.1
--  Contact: contact@api2cart.com
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.11.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

package body .Models is
   pragma Style_Checks ("-bmrIu");

   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.A2CDateTime_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Value.Is_Null then
         Into.Write_Entity ("value", Value.Value);
      end if;
      if not Value.Format.Is_Null then
         Into.Write_Entity ("format", Value.Format);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in A2CDateTime_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.A2CDateTime_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "format", Value.Format);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out A2CDateTime_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.A2CDateTime_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AccountCartAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Store_Key.Is_Null then
         Into.Write_Entity ("store_key", Value.Store_Key);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AccountCartAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AccountCartAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "store_key", Value.Store_Key);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AccountCartAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AccountCartAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AccountCartAddHybrisWebsitesInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("uid", Value.Uid);
      Into.Write_Entity ("url", Value.Url);
      Serialize (Into, "storeIds", Value.Store_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AccountCartAddHybrisWebsitesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AccountCartAddHybrisWebsitesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "uid", Value.Uid);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "storeIds", Value.Store_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AccountCartAddHybrisWebsitesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AccountCartAddHybrisWebsitesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AccountCartList200ResponseResultCartsInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      if not Value.Store_Key.Is_Null then
         Into.Write_Entity ("store_key", Value.Store_Key);
      end if;
      if not Value.Cart_Id.Is_Null then
         Into.Write_Entity ("cart_id", Value.Cart_Id);
      end if;
      if not Value.Total_Calls.Is_Null then
         Into.Write_Entity ("total_calls", Value.Total_Calls);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AccountCartList200ResponseResultCartsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AccountCartList200ResponseResultCartsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "store_key", Value.Store_Key);
      Swagger.Streams.Deserialize (Object, "cart_id", Value.Cart_Id);
      Swagger.Streams.Deserialize (Object, "total_calls", Value.Total_Calls);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AccountCartList200ResponseResultCartsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AccountCartList200ResponseResultCartsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AccountConfigUpdate200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Updated_Items.Is_Null then
         Into.Write_Entity ("updated_items", Value.Updated_Items);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AccountConfigUpdate200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AccountConfigUpdate200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "updated_items", Value.Updated_Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AccountConfigUpdate200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AccountConfigUpdate200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AccountSupportedPlatforms200ResponseResultSupportedPlatformsInnerParamsRequiredInnerInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AccountSupportedPlatforms200ResponseResultSupportedPlatformsInnerParamsRequiredInnerInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AccountSupportedPlatforms200ResponseResultSupportedPlatformsInnerParamsRequiredInnerInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AccountSupportedPlatforms200ResponseResultSupportedPlatformsInnerParamsRequiredInnerInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AccountSupportedPlatforms200ResponseResultSupportedPlatformsInnerParamsRequiredInnerInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AttributeAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AttributeAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AttributeAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AttributeAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AttributeAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AttributeAssignGroup200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Assigned.Is_Null then
         Into.Write_Entity ("assigned", Value.Assigned);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AttributeAssignGroup200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AttributeAssignGroup200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "assigned", Value.Assigned);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AttributeAssignGroup200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AttributeAssignGroup200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AttributeCount200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Attributes_Count.Is_Null then
         Into.Write_Entity ("attributes_count", Value.Attributes_Count);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AttributeCount200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AttributeCount200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "attributes_count", Value.Attributes_Count);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AttributeCount200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AttributeCount200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AttributeDelete200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Deleted.Is_Null then
         Into.Write_Entity ("deleted", Value.Deleted);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AttributeDelete200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AttributeDelete200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "deleted", Value.Deleted);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AttributeDelete200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AttributeDelete200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AttributeTypeList200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "attribute_type", Value.Attribute_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AttributeTypeList200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AttributeTypeList200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "attribute_type", Value.Attribute_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AttributeTypeList200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AttributeTypeList200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AttributeUnassignGroup200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Unassigned.Is_Null then
         Into.Write_Entity ("unassigned", Value.Unassigned);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AttributeUnassignGroup200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AttributeUnassignGroup200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "unassigned", Value.Unassigned);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AttributeUnassignGroup200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AttributeUnassignGroup200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AttributeUpdate200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Updated.Is_Null then
         Into.Write_Entity ("updated", Value.Updated);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AttributeUpdate200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AttributeUpdate200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "updated", Value.Updated);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AttributeUpdate200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AttributeUpdate200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AttributeValueDelete200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Deleted.Is_Null then
         Into.Write_Entity ("deleted", Value.Deleted);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AttributeValueDelete200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AttributeValueDelete200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "deleted", Value.Deleted);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AttributeValueDelete200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AttributeValueDelete200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BaseCustomer_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Email.Is_Null then
         Into.Write_Entity ("email", Value.Email);
      end if;
      if not Value.First_Name.Is_Null then
         Into.Write_Entity ("first_name", Value.First_Name);
      end if;
      if not Value.Last_Name.Is_Null then
         Into.Write_Entity ("last_name", Value.Last_Name);
      end if;
      if not Value.Phone.Is_Null then
         Into.Write_Entity ("phone", Value.Phone);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BaseCustomer_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BaseCustomer_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "email", Value.Email);
      Swagger.Streams.Deserialize (Object, "first_name", Value.First_Name);
      Swagger.Streams.Deserialize (Object, "last_name", Value.Last_Name);
      Swagger.Streams.Deserialize (Object, "phone", Value.Phone);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BaseCustomer_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BaseCustomer_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BasketItemAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Added.Is_Null then
         Into.Write_Entity ("added", Value.Added);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasketItemAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BasketItemAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "added", Value.Added);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BasketItemAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BasketItemAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BasketItemOption_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Value_Id.Is_Null then
         Into.Write_Entity ("value_id", Value.Value_Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Value.Is_Null then
         Into.Write_Entity ("value", Value.Value);
      end if;
      if not Value.Used_In_Combination.Is_Null then
         Into.Write_Entity ("used_in_combination", Value.Used_In_Combination);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasketItemOption_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BasketItemOption_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "value_id", Value.Value_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "used_in_combination", Value.Used_In_Combination);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BasketItemOption_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BasketItemOption_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BasketLiveShippingServiceCreate200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasketLiveShippingServiceCreate200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BasketLiveShippingServiceCreate200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BasketLiveShippingServiceCreate200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BasketLiveShippingServiceCreate200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BasketLiveShippingServiceDelete200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasketLiveShippingServiceDelete200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BasketLiveShippingServiceDelete200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BasketLiveShippingServiceDelete200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BasketLiveShippingServiceDelete200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BasketLiveShippingService_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Callback.Is_Null then
         Into.Write_Entity ("callback", Value.Callback);
      end if;
      if not Value.Callback_Err_Cnt.Is_Null then
         Into.Write_Entity ("callback_err_cnt", Value.Callback_Err_Cnt);
      end if;
      if not Value.Enabled_On_Store.Is_Null then
         Into.Write_Entity ("enabled_on_store", Value.Enabled_On_Store);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasketLiveShippingService_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BasketLiveShippingService_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "callback", Value.Callback);
      Swagger.Streams.Deserialize (Object, "callback_err_cnt", Value.Callback_Err_Cnt);
      Swagger.Streams.Deserialize (Object, "enabled_on_store", Value.Enabled_On_Store);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BasketLiveShippingService_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BasketLiveShippingService_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BatchJobResultItem_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      if not Value.Entity_Id.Is_Null then
         Into.Write_Entity ("entity_id", Value.Entity_Id);
      end if;
      Serialize (Into, "errors", Value.Errors);
      Serialize (Into, "warnings", Value.Warnings);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BatchJobResultItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BatchJobResultItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "entity_id", Value.Entity_Id);
      Swagger.Streams.Deserialize (Object, "errors", Value.Errors);
      Swagger.Streams.Deserialize (Object, "warnings", Value.Warnings);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BatchJobResultItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BatchJobResultItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartBridge200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Store_Key.Is_Null then
         Into.Write_Entity ("store_key", Value.Store_Key);
      end if;
      if not Value.Bridge.Is_Null then
         Into.Write_Entity ("bridge", Value.Bridge);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartBridge200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartBridge200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "store_key", Value.Store_Key);
      Swagger.Streams.Deserialize (Object, "bridge", Value.Bridge);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartBridge200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartBridge200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartCatalogPriceRulesCount200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Catalog_Price_Rules_Count.Is_Null then
         Into.Write_Entity ("catalog_price_rules_count", Value.Catalog_Price_Rules_Count);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartCatalogPriceRulesCount200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartCatalogPriceRulesCount200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_price_rules_count", Value.Catalog_Price_Rules_Count);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartCatalogPriceRulesCount200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartCatalogPriceRulesCount200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartChannel_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Platform.Is_Null then
         Into.Write_Entity ("platform", Value.Platform);
      end if;
      if not Value.Is_Enabled.Is_Null then
         Into.Write_Entity ("is_enabled", Value.Is_Enabled);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartChannel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartChannel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "platform", Value.Platform);
      Swagger.Streams.Deserialize (Object, "is_enabled", Value.Is_Enabled);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartChannel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartChannel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartClearCache200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Cache_Cleared.Is_Null then
         Into.Write_Entity ("cache_cleared", Value.Cache_Cleared);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartClearCache200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartClearCache200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "cache_cleared", Value.Cache_Cleared);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartClearCache200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartClearCache200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartConfig200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Store_Name.Is_Null then
         Into.Write_Entity ("store_name", Value.Store_Name);
      end if;
      if not Value.Store_Url.Is_Null then
         Into.Write_Entity ("store_url", Value.Store_Url);
      end if;
      if not Value.Db_Prefix.Is_Null then
         Into.Write_Entity ("db_prefix", Value.Db_Prefix);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartConfig200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartConfig200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "store_name", Value.Store_Name);
      Swagger.Streams.Deserialize (Object, "store_url", Value.Store_Url);
      Swagger.Streams.Deserialize (Object, "db_prefix", Value.Db_Prefix);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartConfig200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartConfig200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartConfigUpdate200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      if not Swagger.Is_Null (Value.Result) then
         Into.Write_Entity ("result", Value.Result);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartConfigUpdate200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartConfigUpdate200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Swagger.Streams.Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartConfigUpdate200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartConfigUpdate200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartConfigUpdate_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Db_Tables_Prefix.Is_Null then
         Into.Write_Entity ("db_tables_prefix", Value.Db_Tables_Prefix);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.User_Agent.Is_Null then
         Into.Write_Entity ("user_agent", Value.User_Agent);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartConfigUpdate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartConfigUpdate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "db_tables_prefix", Value.Db_Tables_Prefix);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "user_agent", Value.User_Agent);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartConfigUpdate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartConfigUpdate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartCouponAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Coupon_Id.Is_Null then
         Into.Write_Entity ("coupon_id", Value.Coupon_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartCouponAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartCouponAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "coupon_id", Value.Coupon_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartCouponAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartCouponAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartCouponAdd_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("code", Value.Code);
      Into.Write_Entity ("action_type", Value.Action_Type);
      Into.Write_Entity ("action_apply_to", Value.Action_Apply_To);
      Into.Write_Entity ("action_scope", Value.Action_Scope);
      Serialize (Into, "action_amount", Value.Action_Amount);
      Serialize (Into, "codes", Value.Codes);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Date_Start.Is_Null then
         Into.Write_Entity ("date_start", Value.Date_Start);
      end if;
      if not Value.Date_End.Is_Null then
         Into.Write_Entity ("date_end", Value.Date_End);
      end if;
      if not Value.Usage_Limit.Is_Null then
         Into.Write_Entity ("usage_limit", Value.Usage_Limit);
      end if;
      if not Value.Usage_Limit_Per_Customer.Is_Null then
         Into.Write_Entity ("usage_limit_per_customer", Value.Usage_Limit_Per_Customer);
      end if;
      if not Value.Action_Condition_Entity.Is_Null then
         Into.Write_Entity ("action_condition_entity", Value.Action_Condition_Entity);
      end if;
      if not Value.Action_Condition_Key.Is_Null then
         Into.Write_Entity ("action_condition_key", Value.Action_Condition_Key);
      end if;
      if not Value.Action_Condition_Operator.Is_Null then
         Into.Write_Entity ("action_condition_operator", Value.Action_Condition_Operator);
      end if;
      if not Value.Action_Condition_Value.Is_Null then
         Into.Write_Entity ("action_condition_value", Value.Action_Condition_Value);
      end if;
      if not Value.Include_Tax.Is_Null then
         Into.Write_Entity ("include_tax", Value.Include_Tax);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartCouponAdd_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartCouponAdd_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "action_type", Value.Action_Type);
      Swagger.Streams.Deserialize (Object, "action_apply_to", Value.Action_Apply_To);
      Swagger.Streams.Deserialize (Object, "action_scope", Value.Action_Scope);
      Swagger.Streams.Deserialize (Object, "action_amount", Value.Action_Amount);
      Swagger.Streams.Deserialize (Object, "codes", Value.Codes);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "date_start", Value.Date_Start);
      Swagger.Streams.Deserialize (Object, "date_end", Value.Date_End);
      Swagger.Streams.Deserialize (Object, "usage_limit", Value.Usage_Limit);
      Swagger.Streams.Deserialize (Object, "usage_limit_per_customer", Value.Usage_Limit_Per_Customer);
      Swagger.Streams.Deserialize (Object, "action_condition_entity", Value.Action_Condition_Entity);
      Swagger.Streams.Deserialize (Object, "action_condition_key", Value.Action_Condition_Key);
      Swagger.Streams.Deserialize (Object, "action_condition_operator", Value.Action_Condition_Operator);
      Swagger.Streams.Deserialize (Object, "action_condition_value", Value.Action_Condition_Value);
      Swagger.Streams.Deserialize (Object, "include_tax", Value.Include_Tax);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartCouponAdd_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartCouponAdd_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartCouponCount200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Coupons_Count.Is_Null then
         Into.Write_Entity ("coupons_count", Value.Coupons_Count);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartCouponCount200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartCouponCount200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "coupons_count", Value.Coupons_Count);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartCouponCount200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartCouponCount200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartDelete200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Store.Is_Null then
         Into.Write_Entity ("store", Value.Store);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartDelete200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartDelete200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "store", Value.Store);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartDelete200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartDelete200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartDisconnect200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Connection.Is_Null then
         Into.Write_Entity ("connection", Value.Connection);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartDisconnect200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartDisconnect200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "connection", Value.Connection);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartDisconnect200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartDisconnect200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartGiftcardAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartGiftcardAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartGiftcardAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartGiftcardAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartGiftcardAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartGiftcardCount200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Gift_Cards_Count.Is_Null then
         Into.Write_Entity ("gift_cards_count", Value.Gift_Cards_Count);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartGiftcardCount200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartGiftcardCount200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "gift_cards_count", Value.Gift_Cards_Count);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartGiftcardCount200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartGiftcardCount200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartList200ResponseResultSupportedCartsInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Cart_Id.Is_Null then
         Into.Write_Entity ("cart_id", Value.Cart_Id);
      end if;
      if not Value.Cart_Name.Is_Null then
         Into.Write_Entity ("cart_name", Value.Cart_Name);
      end if;
      if not Value.Cart_Versions.Is_Null then
         Into.Write_Entity ("cart_versions", Value.Cart_Versions);
      end if;
      Serialize (Into, "params", Value.Params);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartList200ResponseResultSupportedCartsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartList200ResponseResultSupportedCartsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "cart_id", Value.Cart_Id);
      Swagger.Streams.Deserialize (Object, "cart_name", Value.Cart_Name);
      Swagger.Streams.Deserialize (Object, "cart_versions", Value.Cart_Versions);
      Swagger.Streams.Deserialize (Object, "params", Value.Params);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartList200ResponseResultSupportedCartsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartList200ResponseResultSupportedCartsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartMetaData_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Key.Is_Null then
         Into.Write_Entity ("key", Value.Key);
      end if;
      if not Value.Value.Is_Null then
         Into.Write_Entity ("value", Value.Value);
      end if;
      if not Value.Namespace.Is_Null then
         Into.Write_Entity ("namespace", Value.Namespace);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartMetaData_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartMetaData_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "key", Value.Key);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "namespace", Value.Namespace);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartMetaData_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartMetaData_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartMethods200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "method", Value.Method);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartMethods200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartMethods200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "method", Value.Method);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartMethods200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartMethods200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartScriptAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Script_Id.Is_Null then
         Into.Write_Entity ("script_id", Value.Script_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartScriptAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartScriptAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "script_id", Value.Script_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartScriptAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartScriptAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartShippingMethodRate_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Min_Weight.Is_Null then
         Into.Write_Entity ("min_weight", Value.Min_Weight);
      end if;
      if not Value.Max_Weight.Is_Null then
         Into.Write_Entity ("max_weight", Value.Max_Weight);
      end if;
      if not Value.Min_Order_Amount.Is_Null then
         Into.Write_Entity ("min_order_amount", Value.Min_Order_Amount);
      end if;
      if not Value.Max_Order_Amount.Is_Null then
         Into.Write_Entity ("max_order_amount", Value.Max_Order_Amount);
      end if;
      if not Value.Min_Items_Count.Is_Null then
         Into.Write_Entity ("min_items_count", Value.Min_Items_Count);
      end if;
      if not Value.Max_Items_Count.Is_Null then
         Into.Write_Entity ("max_items_count", Value.Max_Items_Count);
      end if;
      if not Value.Price.Is_Null then
         Into.Write_Entity ("price", Value.Price);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartShippingMethodRate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartShippingMethodRate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "min_weight", Value.Min_Weight);
      Swagger.Streams.Deserialize (Object, "max_weight", Value.Max_Weight);
      Swagger.Streams.Deserialize (Object, "min_order_amount", Value.Min_Order_Amount);
      Swagger.Streams.Deserialize (Object, "max_order_amount", Value.Max_Order_Amount);
      Swagger.Streams.Deserialize (Object, "min_items_count", Value.Min_Items_Count);
      Swagger.Streams.Deserialize (Object, "max_items_count", Value.Max_Items_Count);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartShippingMethodRate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartShippingMethodRate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartShippingZone_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Country.Is_Null then
         Into.Write_Entity ("country", Value.Country);
      end if;
      Serialize (Into, "country_iso2_codes", Value.Country_Iso_2_Codes);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartShippingZone_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartShippingZone_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "country", Value.Country);
      Swagger.Streams.Deserialize (Object, "country_iso2_codes", Value.Country_Iso_2_Codes);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartShippingZone_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartShippingZone_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartValidate200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartValidate200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartValidate200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartValidate200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartValidate200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Category_Id.Is_Null then
         Into.Write_Entity ("category_id", Value.Category_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "category_id", Value.Category_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryAddBatch200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Job_Id.Is_Null then
         Into.Write_Entity ("job_id", Value.Job_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryAddBatch200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryAddBatch200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "job_id", Value.Job_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryAddBatch200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryAddBatch200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryAddBatchPayloadInnerImagesInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("url", Value.Url);
      if not Value.Image_Name.Is_Null then
         Into.Write_Entity ("image_name", Value.Image_Name);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Label.Is_Null then
         Into.Write_Entity ("label", Value.Label);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryAddBatchPayloadInnerImagesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryAddBatchPayloadInnerImagesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "image_name", Value.Image_Name);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "label", Value.Label);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryAddBatchPayloadInnerImagesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryAddBatchPayloadInnerImagesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryCount200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Categories_Count.Is_Null then
         Into.Write_Entity ("categories_count", Value.Categories_Count);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryCount200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryCount200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "categories_count", Value.Categories_Count);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryCount200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryCount200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryDelete200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Delete_Items.Is_Null then
         Into.Write_Entity ("delete_items", Value.Delete_Items);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryDelete200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryDelete200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "delete_items", Value.Delete_Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryDelete200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryDelete200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryFind200ResponseResultCategoryInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryFind200ResponseResultCategoryInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryFind200ResponseResultCategoryInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryFind200ResponseResultCategoryInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryFind200ResponseResultCategoryInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryImageAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Image_Path.Is_Null then
         Into.Write_Entity ("image_path", Value.Image_Path);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryImageAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryImageAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "image_path", Value.Image_Path);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryImageAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryImageAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Country_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Code_2.Is_Null then
         Into.Write_Entity ("code2", Value.Code_2);
      end if;
      if not Value.Code_3.Is_Null then
         Into.Write_Entity ("code3", Value.Code_3);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Country_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Country_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "code2", Value.Code_2);
      Swagger.Streams.Deserialize (Object, "code3", Value.Code_3);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Country_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Country_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CouponCode_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      if not Value.Used_Times.Is_Null then
         Into.Write_Entity ("used_times", Value.Used_Times);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CouponCode_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CouponCode_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "used_times", Value.Used_Times);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CouponCode_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CouponCode_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CouponHistory_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Order_Id.Is_Null then
         Into.Write_Entity ("order_id", Value.Order_Id);
      end if;
      Serialize (Into, "amount", Value.Amount);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CouponHistory_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CouponHistory_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "order_id", Value.Order_Id);
      Swagger.Streams.Deserialize (Object, "amount", Value.Amount);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CouponHistory_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CouponHistory_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Currency_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Iso_3.Is_Null then
         Into.Write_Entity ("iso3", Value.Iso_3);
      end if;
      if not Value.Symbol_Left.Is_Null then
         Into.Write_Entity ("symbol_left", Value.Symbol_Left);
      end if;
      if not Value.Symbol_Right.Is_Null then
         Into.Write_Entity ("symbol_right", Value.Symbol_Right);
      end if;
      Serialize (Into, "rate", Value.Rate);
      if not Value.Avail.Is_Null then
         Into.Write_Entity ("avail", Value.Avail);
      end if;
      if not Value.Default.Is_Null then
         Into.Write_Entity ("default", Value.Default);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Currency_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Currency_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "iso3", Value.Iso_3);
      Swagger.Streams.Deserialize (Object, "symbol_left", Value.Symbol_Left);
      Swagger.Streams.Deserialize (Object, "symbol_right", Value.Symbol_Right);
      Swagger.Streams.Deserialize (Object, "rate", Value.Rate);
      Swagger.Streams.Deserialize (Object, "avail", Value.Avail);
      Swagger.Streams.Deserialize (Object, "default", Value.Default);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Currency_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Currency_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Customer_Id.Is_Null then
         Into.Write_Entity ("customer_id", Value.Customer_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "customer_id", Value.Customer_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerAddAddressInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Address_Book_Type.Is_Null then
         Into.Write_Entity ("address_book_type", Value.Address_Book_Type);
      end if;
      if not Value.Address_Book_First_Name.Is_Null then
         Into.Write_Entity ("address_book_first_name", Value.Address_Book_First_Name);
      end if;
      if not Value.Address_Book_Last_Name.Is_Null then
         Into.Write_Entity ("address_book_last_name", Value.Address_Book_Last_Name);
      end if;
      if not Value.Address_Book_Company.Is_Null then
         Into.Write_Entity ("address_book_company", Value.Address_Book_Company);
      end if;
      if not Value.Address_Book_Fax.Is_Null then
         Into.Write_Entity ("address_book_fax", Value.Address_Book_Fax);
      end if;
      if not Value.Address_Book_Phone.Is_Null then
         Into.Write_Entity ("address_book_phone", Value.Address_Book_Phone);
      end if;
      if not Value.Address_Book_Phone_Mobile.Is_Null then
         Into.Write_Entity ("address_book_phone_mobile", Value.Address_Book_Phone_Mobile);
      end if;
      if not Value.Address_Book_Website.Is_Null then
         Into.Write_Entity ("address_book_website", Value.Address_Book_Website);
      end if;
      if not Value.Address_Book_Address_1.Is_Null then
         Into.Write_Entity ("address_book_address1", Value.Address_Book_Address_1);
      end if;
      if not Value.Address_Book_Address_2.Is_Null then
         Into.Write_Entity ("address_book_address2", Value.Address_Book_Address_2);
      end if;
      if not Value.Address_Book_City.Is_Null then
         Into.Write_Entity ("address_book_city", Value.Address_Book_City);
      end if;
      if not Value.Address_Book_Country.Is_Null then
         Into.Write_Entity ("address_book_country", Value.Address_Book_Country);
      end if;
      if not Value.Address_Book_State.Is_Null then
         Into.Write_Entity ("address_book_state", Value.Address_Book_State);
      end if;
      if not Value.Address_Book_Postcode.Is_Null then
         Into.Write_Entity ("address_book_postcode", Value.Address_Book_Postcode);
      end if;
      if not Value.Address_Book_Gender.Is_Null then
         Into.Write_Entity ("address_book_gender", Value.Address_Book_Gender);
      end if;
      if not Value.Address_Book_Region.Is_Null then
         Into.Write_Entity ("address_book_region", Value.Address_Book_Region);
      end if;
      if not Value.Address_Book_Default.Is_Null then
         Into.Write_Entity ("address_book_default", Value.Address_Book_Default);
      end if;
      if not Value.Address_Book_Tax_Id.Is_Null then
         Into.Write_Entity ("address_book_tax_id", Value.Address_Book_Tax_Id);
      end if;
      if not Value.Address_Book_Identification_Number.Is_Null then
         Into.Write_Entity ("address_book_identification_number", Value.Address_Book_Identification_Number);
      end if;
      if not Value.Address_Book_Alias.Is_Null then
         Into.Write_Entity ("address_book_alias", Value.Address_Book_Alias);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerAddAddressInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerAddAddressInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "address_book_type", Value.Address_Book_Type);
      Swagger.Streams.Deserialize (Object, "address_book_first_name", Value.Address_Book_First_Name);
      Swagger.Streams.Deserialize (Object, "address_book_last_name", Value.Address_Book_Last_Name);
      Swagger.Streams.Deserialize (Object, "address_book_company", Value.Address_Book_Company);
      Swagger.Streams.Deserialize (Object, "address_book_fax", Value.Address_Book_Fax);
      Swagger.Streams.Deserialize (Object, "address_book_phone", Value.Address_Book_Phone);
      Swagger.Streams.Deserialize (Object, "address_book_phone_mobile", Value.Address_Book_Phone_Mobile);
      Swagger.Streams.Deserialize (Object, "address_book_website", Value.Address_Book_Website);
      Swagger.Streams.Deserialize (Object, "address_book_address1", Value.Address_Book_Address_1);
      Swagger.Streams.Deserialize (Object, "address_book_address2", Value.Address_Book_Address_2);
      Swagger.Streams.Deserialize (Object, "address_book_city", Value.Address_Book_City);
      Swagger.Streams.Deserialize (Object, "address_book_country", Value.Address_Book_Country);
      Swagger.Streams.Deserialize (Object, "address_book_state", Value.Address_Book_State);
      Swagger.Streams.Deserialize (Object, "address_book_postcode", Value.Address_Book_Postcode);
      Swagger.Streams.Deserialize (Object, "address_book_gender", Value.Address_Book_Gender);
      Swagger.Streams.Deserialize (Object, "address_book_region", Value.Address_Book_Region);
      Swagger.Streams.Deserialize (Object, "address_book_default", Value.Address_Book_Default);
      Swagger.Streams.Deserialize (Object, "address_book_tax_id", Value.Address_Book_Tax_Id);
      Swagger.Streams.Deserialize (Object, "address_book_identification_number", Value.Address_Book_Identification_Number);
      Swagger.Streams.Deserialize (Object, "address_book_alias", Value.Address_Book_Alias);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerAddAddressInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerAddAddressInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerAddConsentsInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("type", Value.P_Type);
      Into.Write_Entity ("status", Value.Status);
      Into.Write_Entity ("opt_in_level", Value.Opt_In_Level);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerAddConsentsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerAddConsentsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "opt_in_level", Value.Opt_In_Level);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerAddConsentsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerAddConsentsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerAddressAdd_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("customer_id", Value.Customer_Id);
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.First_Name.Is_Null then
         Into.Write_Entity ("first_name", Value.First_Name);
      end if;
      if not Value.Last_Name.Is_Null then
         Into.Write_Entity ("last_name", Value.Last_Name);
      end if;
      if not Value.Company.Is_Null then
         Into.Write_Entity ("company", Value.Company);
      end if;
      Into.Write_Entity ("address1", Value.Address_1);
      if not Value.Address_2.Is_Null then
         Into.Write_Entity ("address2", Value.Address_2);
      end if;
      Into.Write_Entity ("city", Value.City);
      Into.Write_Entity ("country", Value.Country);
      if not Value.State.Is_Null then
         Into.Write_Entity ("state", Value.State);
      end if;
      Into.Write_Entity ("postcode", Value.Postcode);
      if not Value.Identification_Number.Is_Null then
         Into.Write_Entity ("identification_number", Value.Identification_Number);
      end if;
      Serialize (Into, "types", Value.Types);
      if not Value.Default.Is_Null then
         Into.Write_Entity ("default", Value.Default);
      end if;
      if not Value.Phone.Is_Null then
         Into.Write_Entity ("phone", Value.Phone);
      end if;
      if not Value.Phone_Mobile.Is_Null then
         Into.Write_Entity ("phone_mobile", Value.Phone_Mobile);
      end if;
      if not Value.Fax.Is_Null then
         Into.Write_Entity ("fax", Value.Fax);
      end if;
      if not Value.Website.Is_Null then
         Into.Write_Entity ("website", Value.Website);
      end if;
      if not Value.Gender.Is_Null then
         Into.Write_Entity ("gender", Value.Gender);
      end if;
      if not Value.Tax_Id.Is_Null then
         Into.Write_Entity ("tax_id", Value.Tax_Id);
      end if;
      if not Value.Alias.Is_Null then
         Into.Write_Entity ("alias", Value.Alias);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerAddressAdd_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerAddressAdd_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "customer_id", Value.Customer_Id);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "first_name", Value.First_Name);
      Swagger.Streams.Deserialize (Object, "last_name", Value.Last_Name);
      Swagger.Streams.Deserialize (Object, "company", Value.Company);
      Swagger.Streams.Deserialize (Object, "address1", Value.Address_1);
      Swagger.Streams.Deserialize (Object, "address2", Value.Address_2);
      Swagger.Streams.Deserialize (Object, "city", Value.City);
      Swagger.Streams.Deserialize (Object, "country", Value.Country);
      Swagger.Streams.Deserialize (Object, "state", Value.State);
      Swagger.Streams.Deserialize (Object, "postcode", Value.Postcode);
      Swagger.Streams.Deserialize (Object, "identification_number", Value.Identification_Number);
      Swagger.Streams.Deserialize (Object, "types", Value.Types);
      Swagger.Streams.Deserialize (Object, "default", Value.Default);
      Swagger.Streams.Deserialize (Object, "phone", Value.Phone);
      Swagger.Streams.Deserialize (Object, "phone_mobile", Value.Phone_Mobile);
      Swagger.Streams.Deserialize (Object, "fax", Value.Fax);
      Swagger.Streams.Deserialize (Object, "website", Value.Website);
      Swagger.Streams.Deserialize (Object, "gender", Value.Gender);
      Swagger.Streams.Deserialize (Object, "tax_id", Value.Tax_Id);
      Swagger.Streams.Deserialize (Object, "alias", Value.Alias);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerAddressAdd_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerAddressAdd_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerAttributeValue_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Value.Is_Null then
         Into.Write_Entity ("value", Value.Value);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerAttributeValue_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerAttributeValue_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerAttributeValue_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerAttributeValue_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerConsent_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      if not Value.Source.Is_Null then
         Into.Write_Entity ("source", Value.Source);
      end if;
      if not Value.Opt_In_Level.Is_Null then
         Into.Write_Entity ("opt_in_level", Value.Opt_In_Level);
      end if;
      if not Value.Modified_Time.Is_Null then
         Into.Write_Entity ("modified_time", Value.Modified_Time);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerConsent_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerConsent_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "source", Value.Source);
      Swagger.Streams.Deserialize (Object, "opt_in_level", Value.Opt_In_Level);
      Swagger.Streams.Deserialize (Object, "modified_time", Value.Modified_Time);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerConsent_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerConsent_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerCount200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Customers_Count.Is_Null then
         Into.Write_Entity ("customers_count", Value.Customers_Count);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerCount200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerCount200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "customers_count", Value.Customers_Count);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerCount200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerCount200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerDelete200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Delete_Items.Is_Null then
         Into.Write_Entity ("delete_items", Value.Delete_Items);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerDelete200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerDelete200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "delete_items", Value.Delete_Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerDelete200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerDelete200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerFind200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Email.Is_Null then
         Into.Write_Entity ("email", Value.Email);
      end if;
      if not Value.First_Name.Is_Null then
         Into.Write_Entity ("first_name", Value.First_Name);
      end if;
      if not Value.Last_Name.Is_Null then
         Into.Write_Entity ("last_name", Value.Last_Name);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerFind200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerFind200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "email", Value.Email);
      Swagger.Streams.Deserialize (Object, "first_name", Value.First_Name);
      Swagger.Streams.Deserialize (Object, "last_name", Value.Last_Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerFind200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerFind200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerGroupAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Group_Id.Is_Null then
         Into.Write_Entity ("group_id", Value.Group_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerGroupAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerGroupAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "group_id", Value.Group_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerGroupAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerGroupAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerGroup_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerGroup_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerGroup_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerGroup_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerGroup_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerUpdateAddressInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Address_Book_Id.Is_Null then
         Into.Write_Entity ("address_book_id", Value.Address_Book_Id);
      end if;
      if not Value.Address_Book_First_Name.Is_Null then
         Into.Write_Entity ("address_book_first_name", Value.Address_Book_First_Name);
      end if;
      if not Value.Address_Book_Last_Name.Is_Null then
         Into.Write_Entity ("address_book_last_name", Value.Address_Book_Last_Name);
      end if;
      if not Value.Address_Book_Company.Is_Null then
         Into.Write_Entity ("address_book_company", Value.Address_Book_Company);
      end if;
      if not Value.Address_Book_Fax.Is_Null then
         Into.Write_Entity ("address_book_fax", Value.Address_Book_Fax);
      end if;
      if not Value.Address_Book_Phone.Is_Null then
         Into.Write_Entity ("address_book_phone", Value.Address_Book_Phone);
      end if;
      if not Value.Address_Book_Phone_Mobile.Is_Null then
         Into.Write_Entity ("address_book_phone_mobile", Value.Address_Book_Phone_Mobile);
      end if;
      if not Value.Address_Book_Address_1.Is_Null then
         Into.Write_Entity ("address_book_address1", Value.Address_Book_Address_1);
      end if;
      if not Value.Address_Book_Address_2.Is_Null then
         Into.Write_Entity ("address_book_address2", Value.Address_Book_Address_2);
      end if;
      if not Value.Address_Book_City.Is_Null then
         Into.Write_Entity ("address_book_city", Value.Address_Book_City);
      end if;
      if not Value.Address_Book_Country.Is_Null then
         Into.Write_Entity ("address_book_country", Value.Address_Book_Country);
      end if;
      if not Value.Address_Book_State.Is_Null then
         Into.Write_Entity ("address_book_state", Value.Address_Book_State);
      end if;
      if not Value.Address_Book_Postcode.Is_Null then
         Into.Write_Entity ("address_book_postcode", Value.Address_Book_Postcode);
      end if;
      if not Value.Address_Book_Tax_Id.Is_Null then
         Into.Write_Entity ("address_book_tax_id", Value.Address_Book_Tax_Id);
      end if;
      if not Value.Address_Book_Identification_Number.Is_Null then
         Into.Write_Entity ("address_book_identification_number", Value.Address_Book_Identification_Number);
      end if;
      if not Value.Address_Book_Gender.Is_Null then
         Into.Write_Entity ("address_book_gender", Value.Address_Book_Gender);
      end if;
      if not Value.Address_Book_Alias.Is_Null then
         Into.Write_Entity ("address_book_alias", Value.Address_Book_Alias);
      end if;
      if not Value.Address_Book_Type.Is_Null then
         Into.Write_Entity ("address_book_type", Value.Address_Book_Type);
      end if;
      if not Value.Address_Book_Default.Is_Null then
         Into.Write_Entity ("address_book_default", Value.Address_Book_Default);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerUpdateAddressInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerUpdateAddressInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "address_book_id", Value.Address_Book_Id);
      Swagger.Streams.Deserialize (Object, "address_book_first_name", Value.Address_Book_First_Name);
      Swagger.Streams.Deserialize (Object, "address_book_last_name", Value.Address_Book_Last_Name);
      Swagger.Streams.Deserialize (Object, "address_book_company", Value.Address_Book_Company);
      Swagger.Streams.Deserialize (Object, "address_book_fax", Value.Address_Book_Fax);
      Swagger.Streams.Deserialize (Object, "address_book_phone", Value.Address_Book_Phone);
      Swagger.Streams.Deserialize (Object, "address_book_phone_mobile", Value.Address_Book_Phone_Mobile);
      Swagger.Streams.Deserialize (Object, "address_book_address1", Value.Address_Book_Address_1);
      Swagger.Streams.Deserialize (Object, "address_book_address2", Value.Address_Book_Address_2);
      Swagger.Streams.Deserialize (Object, "address_book_city", Value.Address_Book_City);
      Swagger.Streams.Deserialize (Object, "address_book_country", Value.Address_Book_Country);
      Swagger.Streams.Deserialize (Object, "address_book_state", Value.Address_Book_State);
      Swagger.Streams.Deserialize (Object, "address_book_postcode", Value.Address_Book_Postcode);
      Swagger.Streams.Deserialize (Object, "address_book_tax_id", Value.Address_Book_Tax_Id);
      Swagger.Streams.Deserialize (Object, "address_book_identification_number", Value.Address_Book_Identification_Number);
      Swagger.Streams.Deserialize (Object, "address_book_gender", Value.Address_Book_Gender);
      Swagger.Streams.Deserialize (Object, "address_book_alias", Value.Address_Book_Alias);
      Swagger.Streams.Deserialize (Object, "address_book_type", Value.Address_Book_Type);
      Swagger.Streams.Deserialize (Object, "address_book_default", Value.Address_Book_Default);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerUpdateAddressInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerUpdateAddressInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Discount_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Modifier_Type.Is_Null then
         Into.Write_Entity ("modifier_type", Value.Modifier_Type);
      end if;
      Serialize (Into, "value", Value.Value);
      if not Value.From_Time.Is_Null then
         Into.Write_Entity ("from_time", Value.From_Time);
      end if;
      if not Value.To_Time.Is_Null then
         Into.Write_Entity ("to_time", Value.To_Time);
      end if;
      if not Value.Customer_Group_Ids.Is_Null then
         Into.Write_Entity ("customer_group_ids", Value.Customer_Group_Ids);
      end if;
      if not Value.Sort_Order.Is_Null then
         Into.Write_Entity ("sort_order", Value.Sort_Order);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Discount_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Discount_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "modifier_type", Value.Modifier_Type);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "from_time", Value.From_Time);
      Swagger.Streams.Deserialize (Object, "to_time", Value.To_Time);
      Swagger.Streams.Deserialize (Object, "customer_group_ids", Value.Customer_Group_Ids);
      Swagger.Streams.Deserialize (Object, "sort_order", Value.Sort_Order);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Discount_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Discount_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Info_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Owner.Is_Null then
         Into.Write_Entity ("owner", Value.Owner);
      end if;
      if not Value.Country.Is_Null then
         Into.Write_Entity ("country", Value.Country);
      end if;
      if not Value.State.Is_Null then
         Into.Write_Entity ("state", Value.State);
      end if;
      if not Value.State_Code.Is_Null then
         Into.Write_Entity ("state_code", Value.State_Code);
      end if;
      if not Value.City.Is_Null then
         Into.Write_Entity ("city", Value.City);
      end if;
      if not Value.Street_Address.Is_Null then
         Into.Write_Entity ("street_address", Value.Street_Address);
      end if;
      if not Value.Street_Address_Line_2.Is_Null then
         Into.Write_Entity ("street_address_line_2", Value.Street_Address_Line_2);
      end if;
      if not Value.Zip_Code.Is_Null then
         Into.Write_Entity ("zip_code", Value.Zip_Code);
      end if;
      if not Value.Email.Is_Null then
         Into.Write_Entity ("email", Value.Email);
      end if;
      if not Value.Phone.Is_Null then
         Into.Write_Entity ("phone", Value.Phone);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Info_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Info_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "owner", Value.Owner);
      Swagger.Streams.Deserialize (Object, "country", Value.Country);
      Swagger.Streams.Deserialize (Object, "state", Value.State);
      Swagger.Streams.Deserialize (Object, "state_code", Value.State_Code);
      Swagger.Streams.Deserialize (Object, "city", Value.City);
      Swagger.Streams.Deserialize (Object, "street_address", Value.Street_Address);
      Swagger.Streams.Deserialize (Object, "street_address_line_2", Value.Street_Address_Line_2);
      Swagger.Streams.Deserialize (Object, "zip_code", Value.Zip_Code);
      Swagger.Streams.Deserialize (Object, "email", Value.Email);
      Swagger.Streams.Deserialize (Object, "phone", Value.Phone);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Info_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Info_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Language_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Iso_Code.Is_Null then
         Into.Write_Entity ("iso_code", Value.Iso_Code);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Language_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Language_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "iso_code", Value.Iso_Code);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Language_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Language_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Media_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Http_Path.Is_Null then
         Into.Write_Entity ("http_path", Value.Http_Path);
      end if;
      if not Value.File_Name.Is_Null then
         Into.Write_Entity ("file_name", Value.File_Name);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Media_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Media_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "http_path", Value.Http_Path);
      Swagger.Streams.Deserialize (Object, "file_name", Value.File_Name);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Media_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Media_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Order_Id.Is_Null then
         Into.Write_Entity ("order_id", Value.Order_Id);
      end if;
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("customer_id", Value.Customer_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "order_id", Value.Order_Id);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "customer_id", Value.Customer_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderAddNoteAttributesInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Value.Is_Null then
         Into.Write_Entity ("value", Value.Value);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderAddNoteAttributesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderAddNoteAttributesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderAddNoteAttributesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderAddNoteAttributesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderAddOrderItemInnerOrderItemOptionInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Order_Item_Option_Name.Is_Null then
         Into.Write_Entity ("order_item_option_name", Value.Order_Item_Option_Name);
      end if;
      if not Value.Order_Item_Option_Value.Is_Null then
         Into.Write_Entity ("order_item_option_value", Value.Order_Item_Option_Value);
      end if;
      Serialize (Into, "order_item_option_price", Value.Order_Item_Option_Price);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderAddOrderItemInnerOrderItemOptionInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderAddOrderItemInnerOrderItemOptionInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "order_item_option_name", Value.Order_Item_Option_Name);
      Swagger.Streams.Deserialize (Object, "order_item_option_value", Value.Order_Item_Option_Value);
      Swagger.Streams.Deserialize (Object, "order_item_option_price", Value.Order_Item_Option_Price);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderAddOrderItemInnerOrderItemOptionInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderAddOrderItemInnerOrderItemOptionInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderAddOrderItemInnerOrderItemPropertyInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Order_Item_Property_Name.Is_Null then
         Into.Write_Entity ("order_item_property_name", Value.Order_Item_Property_Name);
      end if;
      if not Value.Order_Item_Property_Value.Is_Null then
         Into.Write_Entity ("order_item_property_value", Value.Order_Item_Property_Value);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderAddOrderItemInnerOrderItemPropertyInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderAddOrderItemInnerOrderItemPropertyInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "order_item_property_name", Value.Order_Item_Property_Name);
      Swagger.Streams.Deserialize (Object, "order_item_property_value", Value.Order_Item_Property_Value);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderAddOrderItemInnerOrderItemPropertyInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderAddOrderItemInnerOrderItemPropertyInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderCount200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Orders_Count.Is_Null then
         Into.Write_Entity ("orders_count", Value.Orders_Count);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderCount200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderCount200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "orders_count", Value.Orders_Count);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderCount200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderCount200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderFinancialStatusList200ResponseResultOrderFinancialStatusesInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderFinancialStatusList200ResponseResultOrderFinancialStatusesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderFinancialStatusList200ResponseResultOrderFinancialStatusesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderFinancialStatusList200ResponseResultOrderFinancialStatusesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderFinancialStatusList200ResponseResultOrderFinancialStatusesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderItemOption_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Option_Id.Is_Null then
         Into.Write_Entity ("option_id", Value.Option_Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Value.Is_Null then
         Into.Write_Entity ("value", Value.Value);
      end if;
      Serialize (Into, "price", Value.Price);
      Serialize (Into, "weight", Value.Weight);
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Product_Option_Value_Id.Is_Null then
         Into.Write_Entity ("product_option_value_id", Value.Product_Option_Value_Id);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderItemOption_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderItemOption_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "option_id", Value.Option_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "weight", Value.Weight);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "product_option_value_id", Value.Product_Option_Value_Id);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderItemOption_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderItemOption_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderPaymentMethod_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderPaymentMethod_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderPaymentMethod_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderPaymentMethod_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderPaymentMethod_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderPreestimateShippingListOrderItemInnerOrderItemOptionInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Order_Item_Option_Name.Is_Null then
         Into.Write_Entity ("order_item_option_name", Value.Order_Item_Option_Name);
      end if;
      if not Value.Order_Item_Option_Id.Is_Null then
         Into.Write_Entity ("order_item_option_id", Value.Order_Item_Option_Id);
      end if;
      if not Value.Order_Item_Option_Value.Is_Null then
         Into.Write_Entity ("order_item_option_value", Value.Order_Item_Option_Value);
      end if;
      if not Value.Order_Item_Option_Value_Id.Is_Null then
         Into.Write_Entity ("order_item_option_value_id", Value.Order_Item_Option_Value_Id);
      end if;
      if not Value.Order_Item_Option_Used_In_Combinations.Is_Null then
         Into.Write_Entity ("order_item_option_used_in_combinations", Value.Order_Item_Option_Used_In_Combinations);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderPreestimateShippingListOrderItemInnerOrderItemOptionInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderPreestimateShippingListOrderItemInnerOrderItemOptionInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "order_item_option_name", Value.Order_Item_Option_Name);
      Swagger.Streams.Deserialize (Object, "order_item_option_id", Value.Order_Item_Option_Id);
      Swagger.Streams.Deserialize (Object, "order_item_option_value", Value.Order_Item_Option_Value);
      Swagger.Streams.Deserialize (Object, "order_item_option_value_id", Value.Order_Item_Option_Value_Id);
      Swagger.Streams.Deserialize (Object, "order_item_option_used_in_combinations", Value.Order_Item_Option_Used_In_Combinations);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderPreestimateShippingListOrderItemInnerOrderItemOptionInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderPreestimateShippingListOrderItemInnerOrderItemOptionInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderPreestimateShipping_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Method_Code.Is_Null then
         Into.Write_Entity ("method_code", Value.Method_Code);
      end if;
      if not Value.Method_Name.Is_Null then
         Into.Write_Entity ("method_name", Value.Method_Name);
      end if;
      if not Value.Carrier_Code.Is_Null then
         Into.Write_Entity ("carrier_code", Value.Carrier_Code);
      end if;
      if not Value.Carrier_Name.Is_Null then
         Into.Write_Entity ("carrier_name", Value.Carrier_Name);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      Serialize (Into, "price", Value.Price);
      Serialize (Into, "price_inc_tax", Value.Price_Inc_Tax);
      if not Value.Delivery_Time.Is_Null then
         Into.Write_Entity ("delivery_time", Value.Delivery_Time);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderPreestimateShipping_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderPreestimateShipping_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "method_code", Value.Method_Code);
      Swagger.Streams.Deserialize (Object, "method_name", Value.Method_Name);
      Swagger.Streams.Deserialize (Object, "carrier_code", Value.Carrier_Code);
      Swagger.Streams.Deserialize (Object, "carrier_name", Value.Carrier_Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "price_inc_tax", Value.Price_Inc_Tax);
      Swagger.Streams.Deserialize (Object, "delivery_time", Value.Delivery_Time);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderPreestimateShipping_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderPreestimateShipping_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderRefundAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Refund_Id.Is_Null then
         Into.Write_Entity ("refund_id", Value.Refund_Id);
      end if;
      Into.Write_Entity ("additional_refund_ids", Value.Additional_Refund_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderRefundAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderRefundAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "refund_id", Value.Refund_Id);
      Swagger.Streams.Deserialize (Object, "additional_refund_ids", Value.Additional_Refund_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderRefundAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderRefundAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderRefundAddItemsInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Order_Product_Id.Is_Null then
         Into.Write_Entity ("order_product_id", Value.Order_Product_Id);
      end if;
      if not Value.Quantity.Is_Null then
         Into.Write_Entity ("quantity", Value.Quantity);
      end if;
      Serialize (Into, "price", Value.Price);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderRefundAddItemsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderRefundAddItemsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "order_product_id", Value.Order_Product_Id);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderRefundAddItemsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderRefundAddItemsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderReturnAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Id.Is_Null then
         Into.Write_Entity ("return_id", Value.Return_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderReturnAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderReturnAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_id", Value.Return_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderReturnAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderReturnAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderReturnAddOrderProductsInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("order_product_id", Value.Order_Product_Id);
      Into.Write_Entity ("order_product_quantity", Value.Order_Product_Quantity);
      Into.Write_Entity ("order_product_reason_id", Value.Order_Product_Reason_Id);
      Into.Write_Entity ("order_product_action_id", Value.Order_Product_Action_Id);
      if not Value.Order_Product_Customer_Comment.Is_Null then
         Into.Write_Entity ("order_product_customer_comment", Value.Order_Product_Customer_Comment);
      end if;
      if not Value.Order_Product_Handling_Status.Is_Null then
         Into.Write_Entity ("order_product_handling_status", Value.Order_Product_Handling_Status);
      end if;
      if not Value.Order_Product_Condition.Is_Null then
         Into.Write_Entity ("order_product_condition", Value.Order_Product_Condition);
      end if;
      if not Value.Order_Product_Reason.Is_Null then
         Into.Write_Entity ("order_product_reason", Value.Order_Product_Reason);
      end if;
      if not Value.Order_Product_Status.Is_Null then
         Into.Write_Entity ("order_product_status", Value.Order_Product_Status);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderReturnAddOrderProductsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderReturnAddOrderProductsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "order_product_id", Value.Order_Product_Id);
      Swagger.Streams.Deserialize (Object, "order_product_quantity", Value.Order_Product_Quantity);
      Swagger.Streams.Deserialize (Object, "order_product_reason_id", Value.Order_Product_Reason_Id);
      Swagger.Streams.Deserialize (Object, "order_product_action_id", Value.Order_Product_Action_Id);
      Swagger.Streams.Deserialize (Object, "order_product_customer_comment", Value.Order_Product_Customer_Comment);
      Swagger.Streams.Deserialize (Object, "order_product_handling_status", Value.Order_Product_Handling_Status);
      Swagger.Streams.Deserialize (Object, "order_product_condition", Value.Order_Product_Condition);
      Swagger.Streams.Deserialize (Object, "order_product_reason", Value.Order_Product_Reason);
      Swagger.Streams.Deserialize (Object, "order_product_status", Value.Order_Product_Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderReturnAddOrderProductsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderReturnAddOrderProductsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderReturnUpdateOrderProductsInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("order_product_id", Value.Order_Product_Id);
      Into.Write_Entity ("order_product_quantity", Value.Order_Product_Quantity);
      if not Value.Order_Product_Status.Is_Null then
         Into.Write_Entity ("order_product_status", Value.Order_Product_Status);
      end if;
      Into.Write_Entity ("order_product_action_id", Value.Order_Product_Action_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderReturnUpdateOrderProductsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderReturnUpdateOrderProductsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "order_product_id", Value.Order_Product_Id);
      Swagger.Streams.Deserialize (Object, "order_product_quantity", Value.Order_Product_Quantity);
      Swagger.Streams.Deserialize (Object, "order_product_status", Value.Order_Product_Status);
      Swagger.Streams.Deserialize (Object, "order_product_action_id", Value.Order_Product_Action_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderReturnUpdateOrderProductsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderReturnUpdateOrderProductsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderShipmentAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Shipment_Id.Is_Null then
         Into.Write_Entity ("shipment_id", Value.Shipment_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderShipmentAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderShipmentAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "shipment_id", Value.Shipment_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderShipmentAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderShipmentAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderShipmentAddBatchPayloadInnerItemsInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("order_product_id", Value.Order_Product_Id);
      Serialize (Into, "quantity", Value.Quantity);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderShipmentAddBatchPayloadInnerItemsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderShipmentAddBatchPayloadInnerItemsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "order_product_id", Value.Order_Product_Id);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderShipmentAddBatchPayloadInnerItemsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderShipmentAddBatchPayloadInnerItemsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderShipmentAddItemsInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Order_Product_Id.Is_Null then
         Into.Write_Entity ("order_product_id", Value.Order_Product_Id);
      end if;
      Serialize (Into, "quantity", Value.Quantity);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderShipmentAddItemsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderShipmentAddItemsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "order_product_id", Value.Order_Product_Id);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderShipmentAddItemsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderShipmentAddItemsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderShipmentAddTrackingNumbersInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Carrier_Id.Is_Null then
         Into.Write_Entity ("carrier_id", Value.Carrier_Id);
      end if;
      if not Value.Tracking_Number.Is_Null then
         Into.Write_Entity ("tracking_number", Value.Tracking_Number);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderShipmentAddTrackingNumbersInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderShipmentAddTrackingNumbersInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "carrier_id", Value.Carrier_Id);
      Swagger.Streams.Deserialize (Object, "tracking_number", Value.Tracking_Number);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderShipmentAddTrackingNumbersInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderShipmentAddTrackingNumbersInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderShipmentDelete200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Deleted_Items.Is_Null then
         Into.Write_Entity ("deleted_items", Value.Deleted_Items);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderShipmentDelete200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderShipmentDelete200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "deleted_items", Value.Deleted_Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderShipmentDelete200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderShipmentDelete200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderShipmentTrackingAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Shipment_Tracking_Id.Is_Null then
         Into.Write_Entity ("shipment_tracking_id", Value.Shipment_Tracking_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderShipmentTrackingAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderShipmentTrackingAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "shipment_tracking_id", Value.Shipment_Tracking_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderShipmentTrackingAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderShipmentTrackingAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderShipmentTrackingAdd_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Order_Id.Is_Null then
         Into.Write_Entity ("order_id", Value.Order_Id);
      end if;
      Into.Write_Entity ("shipment_id", Value.Shipment_Id);
      if not Value.Carrier_Id.Is_Null then
         Into.Write_Entity ("carrier_id", Value.Carrier_Id);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.Tracking_Provider.Is_Null then
         Into.Write_Entity ("tracking_provider", Value.Tracking_Provider);
      end if;
      Into.Write_Entity ("tracking_number", Value.Tracking_Number);
      if not Value.Tracking_Link.Is_Null then
         Into.Write_Entity ("tracking_link", Value.Tracking_Link);
      end if;
      if not Value.Send_Notifications.Is_Null then
         Into.Write_Entity ("send_notifications", Value.Send_Notifications);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderShipmentTrackingAdd_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderShipmentTrackingAdd_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "order_id", Value.Order_Id);
      Swagger.Streams.Deserialize (Object, "shipment_id", Value.Shipment_Id);
      Swagger.Streams.Deserialize (Object, "carrier_id", Value.Carrier_Id);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "tracking_provider", Value.Tracking_Provider);
      Swagger.Streams.Deserialize (Object, "tracking_number", Value.Tracking_Number);
      Swagger.Streams.Deserialize (Object, "tracking_link", Value.Tracking_Link);
      Swagger.Streams.Deserialize (Object, "send_notifications", Value.Send_Notifications);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderShipmentTrackingAdd_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderShipmentTrackingAdd_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderShippingMethod_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderShippingMethod_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderShippingMethod_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderShippingMethod_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderShippingMethod_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderStatusRefundItem_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Product_Id.Is_Null then
         Into.Write_Entity ("product_id", Value.Product_Id);
      end if;
      if not Value.Variant_Id.Is_Null then
         Into.Write_Entity ("variant_id", Value.Variant_Id);
      end if;
      if not Value.Order_Product_Id.Is_Null then
         Into.Write_Entity ("order_product_id", Value.Order_Product_Id);
      end if;
      Serialize (Into, "qty", Value.Qty);
      Serialize (Into, "refund", Value.Refund);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderStatusRefundItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderStatusRefundItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Swagger.Streams.Deserialize (Object, "variant_id", Value.Variant_Id);
      Swagger.Streams.Deserialize (Object, "order_product_id", Value.Order_Product_Id);
      Swagger.Streams.Deserialize (Object, "qty", Value.Qty);
      Swagger.Streams.Deserialize (Object, "refund", Value.Refund);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderStatusRefundItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderStatusRefundItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderTotal_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "subtotal_ex_tax", Value.Subtotal_Ex_Tax);
      Serialize (Into, "wrapping_ex_tax", Value.Wrapping_Ex_Tax);
      Serialize (Into, "shipping_ex_tax", Value.Shipping_Ex_Tax);
      Serialize (Into, "total_discount", Value.Total_Discount);
      Serialize (Into, "total_tax", Value.Total_Tax);
      Serialize (Into, "total", Value.Total);
      Serialize (Into, "total_paid", Value.Total_Paid);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderTotal_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderTotal_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "subtotal_ex_tax", Value.Subtotal_Ex_Tax);
      Swagger.Streams.Deserialize (Object, "wrapping_ex_tax", Value.Wrapping_Ex_Tax);
      Swagger.Streams.Deserialize (Object, "shipping_ex_tax", Value.Shipping_Ex_Tax);
      Swagger.Streams.Deserialize (Object, "total_discount", Value.Total_Discount);
      Swagger.Streams.Deserialize (Object, "total_tax", Value.Total_Tax);
      Swagger.Streams.Deserialize (Object, "total", Value.Total);
      Swagger.Streams.Deserialize (Object, "total_paid", Value.Total_Paid);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderTotal_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderTotal_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderTotalsNewDiscount_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      Serialize (Into, "value", Value.Value);
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderTotalsNewDiscount_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderTotalsNewDiscount_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderTotalsNewDiscount_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderTotalsNewDiscount_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderTotals_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "total", Value.Total);
      Serialize (Into, "subtotal", Value.Subtotal);
      Serialize (Into, "shipping", Value.Shipping);
      Serialize (Into, "tax", Value.Tax);
      Serialize (Into, "discount", Value.Discount);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderTotals_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderTotals_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "total", Value.Total);
      Swagger.Streams.Deserialize (Object, "subtotal", Value.Subtotal);
      Swagger.Streams.Deserialize (Object, "shipping", Value.Shipping);
      Swagger.Streams.Deserialize (Object, "tax", Value.Tax);
      Swagger.Streams.Deserialize (Object, "discount", Value.Discount);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderTotals_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderTotals_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Pagination_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Previous.Is_Null then
         Into.Write_Entity ("previous", Value.Previous);
      end if;
      if not Value.Next.Is_Null then
         Into.Write_Entity ("next", Value.Next);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Pagination_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Pagination_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "previous", Value.Previous);
      Swagger.Streams.Deserialize (Object, "next", Value.Next);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Pagination_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Pagination_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Plugin_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Active.Is_Null then
         Into.Write_Entity ("active", Value.Active);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Plugin_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Plugin_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "active", Value.Active);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Plugin_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Plugin_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Product_Id.Is_Null then
         Into.Write_Entity ("product_id", Value.Product_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddBatchPayloadInnerAdvancedPricesInner_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "value", Value.Value);
      if not Value.Group_Id.Is_Null then
         Into.Write_Entity ("group_id", Value.Group_Id);
      end if;
      Serialize (Into, "quantity", Value.Quantity);
      if not Value.Start_Time.Is_Null then
         Into.Write_Entity ("start_time", Value.Start_Time);
      end if;
      if not Value.Expire_Time.Is_Null then
         Into.Write_Entity ("expire_time", Value.Expire_Time);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddBatchPayloadInnerAdvancedPricesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddBatchPayloadInnerAdvancedPricesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "group_id", Value.Group_Id);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
      Swagger.Streams.Deserialize (Object, "start_time", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "expire_time", Value.Expire_Time);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddBatchPayloadInnerAdvancedPricesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddBatchPayloadInnerAdvancedPricesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddBatchPayloadInnerImagesInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      Into.Write_Entity ("url", Value.Url);
      if not Value.Label.Is_Null then
         Into.Write_Entity ("label", Value.Label);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Position.Is_Null then
         Into.Write_Entity ("position", Value.Position);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddBatchPayloadInnerImagesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddBatchPayloadInnerImagesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "label", Value.Label);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "position", Value.Position);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddBatchPayloadInnerImagesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddBatchPayloadInnerImagesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddBestOffer_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "minimum_offer_price", Value.Minimum_Offer_Price);
      Serialize (Into, "auto_accept_price", Value.Auto_Accept_Price);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddBestOffer_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddBestOffer_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "minimum_offer_price", Value.Minimum_Offer_Price);
      Swagger.Streams.Deserialize (Object, "auto_accept_price", Value.Auto_Accept_Price);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddBestOffer_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddBestOffer_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddCertificationsInnerFilesInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("url", Value.Url);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddCertificationsInnerFilesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddCertificationsInnerFilesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddCertificationsInnerFilesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddCertificationsInnerFilesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddCertificationsInnerImagesInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("url", Value.Url);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddCertificationsInnerImagesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddCertificationsInnerImagesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddCertificationsInnerImagesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddCertificationsInnerImagesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddFilesInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("url", Value.Url);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddFilesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddFilesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddFilesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddFilesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddGroupPricesInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Group_Id.Is_Null then
         Into.Write_Entity ("group_id", Value.Group_Id);
      end if;
      Serialize (Into, "price", Value.Price);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddGroupPricesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddGroupPricesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "group_id", Value.Group_Id);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddGroupPricesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddGroupPricesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddLogisticInfoInner_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "logistic_id", Value.Logistic_Id);
      if not Value.Is_Free.Is_Null then
         Into.Write_Entity ("is_free", Value.Is_Free);
      end if;
      Serialize (Into, "shipping_fee", Value.Shipping_Fee);
      Serialize (Into, "size_id", Value.Size_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddLogisticInfoInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddLogisticInfoInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "logistic_id", Value.Logistic_Id);
      Swagger.Streams.Deserialize (Object, "is_free", Value.Is_Free);
      Swagger.Streams.Deserialize (Object, "shipping_fee", Value.Shipping_Fee);
      Swagger.Streams.Deserialize (Object, "size_id", Value.Size_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddLogisticInfoInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddLogisticInfoInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddManufacturerInfo_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Address.Is_Null then
         Into.Write_Entity ("address", Value.Address);
      end if;
      if not Value.Phone.Is_Null then
         Into.Write_Entity ("phone", Value.Phone);
      end if;
      if not Value.Email.Is_Null then
         Into.Write_Entity ("email", Value.Email);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddManufacturerInfo_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddManufacturerInfo_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "address", Value.Address);
      Swagger.Streams.Deserialize (Object, "phone", Value.Phone);
      Swagger.Streams.Deserialize (Object, "email", Value.Email);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddManufacturerInfo_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddManufacturerInfo_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddPackageDetails_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Measure_Unit.Is_Null then
         Into.Write_Entity ("measure_unit", Value.Measure_Unit);
      end if;
      if not Value.Weigh_Unit.Is_Null then
         Into.Write_Entity ("weigh_unit", Value.Weigh_Unit);
      end if;
      Serialize (Into, "package_depth", Value.Package_Depth);
      Serialize (Into, "package_length", Value.Package_Length);
      Serialize (Into, "package_width", Value.Package_Width);
      Serialize (Into, "weight_major", Value.Weight_Major);
      Serialize (Into, "weight_minor", Value.Weight_Minor);
      if not Value.Shipping_Package.Is_Null then
         Into.Write_Entity ("shipping_package", Value.Shipping_Package);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddPackageDetails_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddPackageDetails_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "measure_unit", Value.Measure_Unit);
      Swagger.Streams.Deserialize (Object, "weigh_unit", Value.Weigh_Unit);
      Swagger.Streams.Deserialize (Object, "package_depth", Value.Package_Depth);
      Swagger.Streams.Deserialize (Object, "package_length", Value.Package_Length);
      Swagger.Streams.Deserialize (Object, "package_width", Value.Package_Width);
      Swagger.Streams.Deserialize (Object, "weight_major", Value.Weight_Major);
      Swagger.Streams.Deserialize (Object, "weight_minor", Value.Weight_Minor);
      Swagger.Streams.Deserialize (Object, "shipping_package", Value.Shipping_Package);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddPackageDetails_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddPackageDetails_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddPersonalizationDetails_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("is_personalizable", Value.Is_Personalizable);
      if not Value.Personalization_Is_Required.Is_Null then
         Into.Write_Entity ("personalization_is_required", Value.Personalization_Is_Required);
      end if;
      if not Value.Personalization_Char_Count_Max.Is_Null then
         Into.Write_Entity ("personalization_char_count_max", Value.Personalization_Char_Count_Max);
      end if;
      if not Value.Personalization_Instructions.Is_Null then
         Into.Write_Entity ("personalization_instructions", Value.Personalization_Instructions);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddPersonalizationDetails_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddPersonalizationDetails_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "is_personalizable", Value.Is_Personalizable);
      Swagger.Streams.Deserialize (Object, "personalization_is_required", Value.Personalization_Is_Required);
      Swagger.Streams.Deserialize (Object, "personalization_char_count_max", Value.Personalization_Char_Count_Max);
      Swagger.Streams.Deserialize (Object, "personalization_instructions", Value.Personalization_Instructions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddPersonalizationDetails_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddPersonalizationDetails_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddSalesTax_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "tax_percent", Value.Tax_Percent);
      if not Value.Tax_State.Is_Null then
         Into.Write_Entity ("tax_state", Value.Tax_State);
      end if;
      if not Value.Shipping_Inc_In_Tax.Is_Null then
         Into.Write_Entity ("shipping_inc_in_tax", Value.Shipping_Inc_In_Tax);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddSalesTax_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddSalesTax_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "tax_percent", Value.Tax_Percent);
      Swagger.Streams.Deserialize (Object, "tax_state", Value.Tax_State);
      Swagger.Streams.Deserialize (Object, "shipping_inc_in_tax", Value.Shipping_Inc_In_Tax);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddSalesTax_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddSalesTax_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddSellerProfiles_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Shipping_Profile_Id.Is_Null then
         Into.Write_Entity ("shipping_profile_id", Value.Shipping_Profile_Id);
      end if;
      if not Value.Payment_Profile_Id.Is_Null then
         Into.Write_Entity ("payment_profile_id", Value.Payment_Profile_Id);
      end if;
      if not Value.Return_Profile_Id.Is_Null then
         Into.Write_Entity ("return_profile_id", Value.Return_Profile_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddSellerProfiles_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddSellerProfiles_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "shipping_profile_id", Value.Shipping_Profile_Id);
      Swagger.Streams.Deserialize (Object, "payment_profile_id", Value.Payment_Profile_Id);
      Swagger.Streams.Deserialize (Object, "return_profile_id", Value.Return_Profile_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddSellerProfiles_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddSellerProfiles_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddShippingDetailsInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Shipping_Type.Is_Null then
         Into.Write_Entity ("shipping_type", Value.Shipping_Type);
      end if;
      if not Value.Shipping_Service.Is_Null then
         Into.Write_Entity ("shipping_service", Value.Shipping_Service);
      end if;
      Serialize (Into, "shipping_cost", Value.Shipping_Cost);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddShippingDetailsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddShippingDetailsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "shipping_type", Value.Shipping_Type);
      Swagger.Streams.Deserialize (Object, "shipping_service", Value.Shipping_Service);
      Swagger.Streams.Deserialize (Object, "shipping_cost", Value.Shipping_Cost);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddShippingDetailsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddShippingDetailsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddSizeChart_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddSizeChart_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddSizeChart_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddSizeChart_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddSizeChart_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddSpecificsInnerBookingDetailsAvailabilitiesInnerTimesInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("from", Value.From);
      Into.Write_Entity ("to", Value.To);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddSpecificsInnerBookingDetailsAvailabilitiesInnerTimesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddSpecificsInnerBookingDetailsAvailabilitiesInnerTimesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "from", Value.From);
      Swagger.Streams.Deserialize (Object, "to", Value.To);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddSpecificsInnerBookingDetailsAvailabilitiesInnerTimesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddSpecificsInnerBookingDetailsAvailabilitiesInnerTimesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddSpecificsInnerBookingDetailsOverridesInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("day", Value.Day);
      Into.Write_Entity ("date", Value.Date);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddSpecificsInnerBookingDetailsOverridesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddSpecificsInnerBookingDetailsOverridesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "day", Value.Day);
      Swagger.Streams.Deserialize (Object, "date", Value.Date);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddSpecificsInnerBookingDetailsOverridesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddSpecificsInnerBookingDetailsOverridesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddSpecificsInnerFoodDetails_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "calories", Value.Calories);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddSpecificsInnerFoodDetails_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddSpecificsInnerFoodDetails_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "calories", Value.Calories);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddSpecificsInnerFoodDetails_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddSpecificsInnerFoodDetails_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddSpecificsInnerGroupProductsDetailsInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("quantity", Value.Quantity);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddSpecificsInnerGroupProductsDetailsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddSpecificsInnerGroupProductsDetailsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddSpecificsInnerGroupProductsDetailsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddSpecificsInnerGroupProductsDetailsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddTierPricesInner_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "quantity", Value.Quantity);
      Serialize (Into, "price", Value.Price);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddTierPricesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddTierPricesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddTierPricesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddTierPricesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAttributeValueSet200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Product_Id.Is_Null then
         Into.Write_Entity ("product_id", Value.Product_Id);
      end if;
      if not Value.Attribute_Id.Is_Null then
         Into.Write_Entity ("attribute_id", Value.Attribute_Id);
      end if;
      if not Value.Value_Id.Is_Null then
         Into.Write_Entity ("value_id", Value.Value_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAttributeValueSet200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAttributeValueSet200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Swagger.Streams.Deserialize (Object, "attribute_id", Value.Attribute_Id);
      Swagger.Streams.Deserialize (Object, "value_id", Value.Value_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAttributeValueSet200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAttributeValueSet200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAttributeValueUnset200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Success.Is_Null then
         Into.Write_Entity ("success", Value.Success);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAttributeValueUnset200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAttributeValueUnset200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "success", Value.Success);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAttributeValueUnset200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAttributeValueUnset200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAttribute_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Attribute_Id.Is_Null then
         Into.Write_Entity ("attribute_id", Value.Attribute_Id);
      end if;
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Lang_Id.Is_Null then
         Into.Write_Entity ("lang_id", Value.Lang_Id);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.Value.Is_Null then
         Into.Write_Entity ("value", Value.Value);
      end if;
      if not Value.Required.Is_Null then
         Into.Write_Entity ("required", Value.Required);
      end if;
      if not Value.Visible.Is_Null then
         Into.Write_Entity ("visible", Value.Visible);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Position.Is_Null then
         Into.Write_Entity ("position", Value.Position);
      end if;
      if not Value.Attribute_Group_Id.Is_Null then
         Into.Write_Entity ("attribute_group_id", Value.Attribute_Group_Id);
      end if;
      if not Value.Product_Id.Is_Null then
         Into.Write_Entity ("product_id", Value.Product_Id);
      end if;
      if not Value.Variant_Id.Is_Null then
         Into.Write_Entity ("variant_id", Value.Variant_Id);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAttribute_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAttribute_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "attribute_id", Value.Attribute_Id);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "lang_id", Value.Lang_Id);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "required", Value.Required);
      Swagger.Streams.Deserialize (Object, "visible", Value.Visible);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "position", Value.Position);
      Swagger.Streams.Deserialize (Object, "attribute_group_id", Value.Attribute_Group_Id);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Swagger.Streams.Deserialize (Object, "variant_id", Value.Variant_Id);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAttribute_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAttribute_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductChildItemCombination_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Option_Id.Is_Null then
         Into.Write_Entity ("option_id", Value.Option_Id);
      end if;
      if not Value.Option_Value_Id.Is_Null then
         Into.Write_Entity ("option_value_id", Value.Option_Value_Id);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductChildItemCombination_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductChildItemCombination_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "option_id", Value.Option_Id);
      Swagger.Streams.Deserialize (Object, "option_value_id", Value.Option_Value_Id);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductChildItemCombination_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductChildItemCombination_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductCount200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Products_Count.Is_Null then
         Into.Write_Entity ("products_count", Value.Products_Count);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductCount200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductCount200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "products_count", Value.Products_Count);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductCount200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductCount200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductCurrencyAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Currency_Id.Is_Null then
         Into.Write_Entity ("currency_id", Value.Currency_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductCurrencyAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductCurrencyAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "currency_id", Value.Currency_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductCurrencyAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductCurrencyAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductDeleteBatchPayloadInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductDeleteBatchPayloadInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductDeleteBatchPayloadInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductDeleteBatchPayloadInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductDeleteBatchPayloadInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductFind200ResponseResultProductInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      Serialize (Into, "price", Value.Price);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductFind200ResponseResultProductInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductFind200ResponseResultProductInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductFind200ResponseResultProductInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductFind200ResponseResultProductInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductGroupItem_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Child_Item_Id.Is_Null then
         Into.Write_Entity ("child_item_id", Value.Child_Item_Id);
      end if;
      if not Value.Product_Id.Is_Null then
         Into.Write_Entity ("product_id", Value.Product_Id);
      end if;
      if not Value.Default_Qty_In_Pack.Is_Null then
         Into.Write_Entity ("default_qty_in_pack", Value.Default_Qty_In_Pack);
      end if;
      if not Value.Is_Qty_In_Pack_Fixed.Is_Null then
         Into.Write_Entity ("is_qty_in_pack_fixed", Value.Is_Qty_In_Pack_Fixed);
      end if;
      Serialize (Into, "price", Value.Price);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductGroupItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductGroupItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "child_item_id", Value.Child_Item_Id);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Swagger.Streams.Deserialize (Object, "default_qty_in_pack", Value.Default_Qty_In_Pack);
      Swagger.Streams.Deserialize (Object, "is_qty_in_pack_fixed", Value.Is_Qty_In_Pack_Fixed);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductGroupItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductGroupItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductGroupPrice_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Group_Id.Is_Null then
         Into.Write_Entity ("group_id", Value.Group_Id);
      end if;
      Serialize (Into, "price", Value.Price);
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      Serialize (Into, "quantity", Value.Quantity);
      if not Value.Start_Time.Is_Null then
         Into.Write_Entity ("start_time", Value.Start_Time);
      end if;
      if not Value.Expire_Time.Is_Null then
         Into.Write_Entity ("expire_time", Value.Expire_Time);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductGroupPrice_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductGroupPrice_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "group_id", Value.Group_Id);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
      Swagger.Streams.Deserialize (Object, "start_time", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "expire_time", Value.Expire_Time);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductGroupPrice_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductGroupPrice_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductImageAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Image_Path.Is_Null then
         Into.Write_Entity ("image_path", Value.Image_Path);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductImageAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductImageAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "image_path", Value.Image_Path);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductImageAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductImageAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductImageAdd_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("type", Value.P_Type);
      Into.Write_Entity ("image_name", Value.Image_Name);
      if not Value.Product_Id.Is_Null then
         Into.Write_Entity ("product_id", Value.Product_Id);
      end if;
      if not Value.Product_Variant_Id.Is_Null then
         Into.Write_Entity ("product_variant_id", Value.Product_Variant_Id);
      end if;
      if not Value.Variant_Ids.Is_Null then
         Into.Write_Entity ("variant_ids", Value.Variant_Ids);
      end if;
      if not Value.Option_Value_Ids.Is_Null then
         Into.Write_Entity ("option_value_ids", Value.Option_Value_Ids);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.Lang_Id.Is_Null then
         Into.Write_Entity ("lang_id", Value.Lang_Id);
      end if;
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      if not Value.Content.Is_Null then
         Into.Write_Entity ("content", Value.Content);
      end if;
      if not Value.Label.Is_Null then
         Into.Write_Entity ("label", Value.Label);
      end if;
      if not Value.Mime.Is_Null then
         Into.Write_Entity ("mime", Value.Mime);
      end if;
      if not Value.Position.Is_Null then
         Into.Write_Entity ("position", Value.Position);
      end if;
      if not Value.Use_Latest_Api_Version.Is_Null then
         Into.Write_Entity ("use_latest_api_version", Value.Use_Latest_Api_Version);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductImageAdd_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductImageAdd_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "image_name", Value.Image_Name);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Swagger.Streams.Deserialize (Object, "product_variant_id", Value.Product_Variant_Id);
      Swagger.Streams.Deserialize (Object, "variant_ids", Value.Variant_Ids);
      Swagger.Streams.Deserialize (Object, "option_value_ids", Value.Option_Value_Ids);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "lang_id", Value.Lang_Id);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "content", Value.Content);
      Swagger.Streams.Deserialize (Object, "label", Value.Label);
      Swagger.Streams.Deserialize (Object, "mime", Value.Mime);
      Swagger.Streams.Deserialize (Object, "position", Value.Position);
      Swagger.Streams.Deserialize (Object, "use_latest_api_version", Value.Use_Latest_Api_Version);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductImageAdd_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductImageAdd_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductImageUpdate200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Updated.Is_Null then
         Into.Write_Entity ("updated", Value.Updated);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductImageUpdate200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductImageUpdate200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "updated", Value.Updated);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductImageUpdate200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductImageUpdate200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductInventory_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Warehouse_Id.Is_Null then
         Into.Write_Entity ("warehouse_id", Value.Warehouse_Id);
      end if;
      Serialize (Into, "quantity", Value.Quantity);
      if not Value.In_Stock.Is_Null then
         Into.Write_Entity ("in_stock", Value.In_Stock);
      end if;
      if not Value.Priority.Is_Null then
         Into.Write_Entity ("priority", Value.Priority);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductInventory_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductInventory_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "warehouse_id", Value.Warehouse_Id);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
      Swagger.Streams.Deserialize (Object, "in_stock", Value.In_Stock);
      Swagger.Streams.Deserialize (Object, "priority", Value.Priority);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductInventory_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductInventory_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductManufacturerAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Manufacturer_Id.Is_Null then
         Into.Write_Entity ("manufacturer_id", Value.Manufacturer_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductManufacturerAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductManufacturerAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "manufacturer_id", Value.Manufacturer_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductManufacturerAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductManufacturerAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductOptionAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("option_id", Value.Option_Id);
      if not Value.Product_Option_Id.Is_Null then
         Into.Write_Entity ("product_option_id", Value.Product_Option_Id);
      end if;
      Into.Write_Entity ("product_value_ids", Value.Product_Value_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductOptionAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductOptionAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "option_id", Value.Option_Id);
      Swagger.Streams.Deserialize (Object, "product_option_id", Value.Product_Option_Id);
      Swagger.Streams.Deserialize (Object, "product_value_ids", Value.Product_Value_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductOptionAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductOptionAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductOptionAddValuesInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("value", Value.Value);
      if not Value.Display_Value.Is_Null then
         Into.Write_Entity ("display_value", Value.Display_Value);
      end if;
      if not Value.Is_Default.Is_Null then
         Into.Write_Entity ("is_default", Value.Is_Default);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductOptionAddValuesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductOptionAddValuesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "display_value", Value.Display_Value);
      Swagger.Streams.Deserialize (Object, "is_default", Value.Is_Default);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductOptionAddValuesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductOptionAddValuesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductOptionAssign200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Product_Option_Id.Is_Null then
         Into.Write_Entity ("product_option_id", Value.Product_Option_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductOptionAssign200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductOptionAssign200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "product_option_id", Value.Product_Option_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductOptionAssign200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductOptionAssign200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductOptionItem_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Product_Option_Item_Id.Is_Null then
         Into.Write_Entity ("product_option_item_id", Value.Product_Option_Item_Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Sort_Order.Is_Null then
         Into.Write_Entity ("sort_order", Value.Sort_Order);
      end if;
      if not Value.Price.Is_Null then
         Into.Write_Entity ("price", Value.Price);
      end if;
      if not Value.Weight.Is_Null then
         Into.Write_Entity ("weight", Value.Weight);
      end if;
      if not Value.Quantity.Is_Null then
         Into.Write_Entity ("quantity", Value.Quantity);
      end if;
      if not Value.Type_Price.Is_Null then
         Into.Write_Entity ("type_price", Value.Type_Price);
      end if;
      if not Value.Sku.Is_Null then
         Into.Write_Entity ("sku", Value.Sku);
      end if;
      if not Value.Is_Default.Is_Null then
         Into.Write_Entity ("is_default", Value.Is_Default);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductOptionItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductOptionItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "product_option_item_id", Value.Product_Option_Item_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "sort_order", Value.Sort_Order);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "weight", Value.Weight);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
      Swagger.Streams.Deserialize (Object, "type_price", Value.Type_Price);
      Swagger.Streams.Deserialize (Object, "sku", Value.Sku);
      Swagger.Streams.Deserialize (Object, "is_default", Value.Is_Default);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductOptionItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductOptionItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductOptionValueAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Option_Value_Id.Is_Null then
         Into.Write_Entity ("option_value_id", Value.Option_Value_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductOptionValueAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductOptionValueAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "option_value_id", Value.Option_Value_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductOptionValueAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductOptionValueAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductOptionValueAssign200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Product_Option_Value_Id.Is_Null then
         Into.Write_Entity ("product_option_value_id", Value.Product_Option_Value_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductOptionValueAssign200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductOptionValueAssign200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "product_option_value_id", Value.Product_Option_Value_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductOptionValueAssign200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductOptionValueAssign200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductPriceUpdateGroupPricesInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Group_Id.Is_Null then
         Into.Write_Entity ("group_id", Value.Group_Id);
      end if;
      Serialize (Into, "price", Value.Price);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductPriceUpdateGroupPricesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductPriceUpdateGroupPricesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "group_id", Value.Group_Id);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductPriceUpdateGroupPricesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductPriceUpdateGroupPricesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductReviewRating_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Value.Is_Null then
         Into.Write_Entity ("value", Value.Value);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductReviewRating_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductReviewRating_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductReviewRating_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductReviewRating_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductTaxAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Tax_Class_Id.Is_Null then
         Into.Write_Entity ("tax_class_id", Value.Tax_Class_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductTaxAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductTaxAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "tax_class_id", Value.Tax_Class_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductTaxAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductTaxAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductTaxAddTaxRatesInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      Serialize (Into, "value", Value.Value);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductTaxAddTaxRatesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductTaxAddTaxRatesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductTaxAddTaxRatesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductTaxAddTaxRatesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductTierPrice_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "qty", Value.Qty);
      Serialize (Into, "price", Value.Price);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductTierPrice_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductTierPrice_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "qty", Value.Qty);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductTierPrice_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductTierPrice_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductUpdateBatchPayloadInnerAdvancedPricesInner_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "value", Value.Value);
      if not Value.Group_Id.Is_Null then
         Into.Write_Entity ("group_id", Value.Group_Id);
      end if;
      Serialize (Into, "quantity", Value.Quantity);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductUpdateBatchPayloadInnerAdvancedPricesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductUpdateBatchPayloadInnerAdvancedPricesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "group_id", Value.Group_Id);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductUpdateBatchPayloadInnerAdvancedPricesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductUpdateBatchPayloadInnerAdvancedPricesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductUpdateBatchPayloadInnerImagesInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.Write_Entity ("url", Value.Url);
      if not Value.Label.Is_Null then
         Into.Write_Entity ("label", Value.Label);
      end if;
      if not Value.Position.Is_Null then
         Into.Write_Entity ("position", Value.Position);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductUpdateBatchPayloadInnerImagesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductUpdateBatchPayloadInnerImagesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "label", Value.Label);
      Swagger.Streams.Deserialize (Object, "position", Value.Position);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductUpdateBatchPayloadInnerImagesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductUpdateBatchPayloadInnerImagesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductVariantAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Product_Variant_Id.Is_Null then
         Into.Write_Entity ("product_variant_id", Value.Product_Variant_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductVariantAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductVariantAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "product_variant_id", Value.Product_Variant_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductVariantAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductVariantAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductVariantAddAttributesInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Attribute_Name.Is_Null then
         Into.Write_Entity ("attribute_name", Value.Attribute_Name);
      end if;
      if not Value.Attribute_Value.Is_Null then
         Into.Write_Entity ("attribute_value", Value.Attribute_Value);
      end if;
      Serialize (Into, "attribute_price", Value.Attribute_Price);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductVariantAddAttributesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductVariantAddAttributesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "attribute_name", Value.Attribute_Name);
      Swagger.Streams.Deserialize (Object, "attribute_value", Value.Attribute_Value);
      Swagger.Streams.Deserialize (Object, "attribute_price", Value.Attribute_Price);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductVariantAddAttributesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductVariantAddAttributesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductVariantAddBatchPayloadInnerCombinationInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("option_name", Value.Option_Name);
      Into.Write_Entity ("option_value_name", Value.Option_Value_Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductVariantAddBatchPayloadInnerCombinationInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductVariantAddBatchPayloadInnerCombinationInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "option_name", Value.Option_Name);
      Swagger.Streams.Deserialize (Object, "option_value_name", Value.Option_Value_Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductVariantAddBatchPayloadInnerCombinationInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductVariantAddBatchPayloadInnerCombinationInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductVariantCount200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Variants_Count.Is_Null then
         Into.Write_Entity ("variants_count", Value.Variants_Count);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductVariantCount200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductVariantCount200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "variants_count", Value.Variants_Count);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductVariantCount200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductVariantCount200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductVariantDeleteBatchPayloadInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("product_id", Value.Product_Id);
      Into.Write_Entity ("id", Value.Id);
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductVariantDeleteBatchPayloadInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductVariantDeleteBatchPayloadInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductVariantDeleteBatchPayloadInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductVariantDeleteBatchPayloadInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductVariantImageAdd200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("id", Value.Id);
      if not Value.Image_Path.Is_Null then
         Into.Write_Entity ("image_path", Value.Image_Path);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductVariantImageAdd200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductVariantImageAdd200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "image_path", Value.Image_Path);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductVariantImageAdd200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductVariantImageAdd200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductVariantImageAdd_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Product_Id.Is_Null then
         Into.Write_Entity ("product_id", Value.Product_Id);
      end if;
      Into.Write_Entity ("product_variant_id", Value.Product_Variant_Id);
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      Into.Write_Entity ("image_name", Value.Image_Name);
      Into.Write_Entity ("type", Value.P_Type);
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      if not Value.Content.Is_Null then
         Into.Write_Entity ("content", Value.Content);
      end if;
      if not Value.Label.Is_Null then
         Into.Write_Entity ("label", Value.Label);
      end if;
      if not Value.Mime.Is_Null then
         Into.Write_Entity ("mime", Value.Mime);
      end if;
      if not Value.Position.Is_Null then
         Into.Write_Entity ("position", Value.Position);
      end if;
      if not Value.Option_Id.Is_Null then
         Into.Write_Entity ("option_id", Value.Option_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductVariantImageAdd_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductVariantImageAdd_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Swagger.Streams.Deserialize (Object, "product_variant_id", Value.Product_Variant_Id);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "image_name", Value.Image_Name);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "content", Value.Content);
      Swagger.Streams.Deserialize (Object, "label", Value.Label);
      Swagger.Streams.Deserialize (Object, "mime", Value.Mime);
      Swagger.Streams.Deserialize (Object, "position", Value.Position);
      Swagger.Streams.Deserialize (Object, "option_id", Value.Option_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductVariantImageAdd_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductVariantImageAdd_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductVariantUpdateOptionsInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Option_Name.Is_Null then
         Into.Write_Entity ("option_name", Value.Option_Name);
      end if;
      if not Value.Option_Value.Is_Null then
         Into.Write_Entity ("option_value", Value.Option_Value);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductVariantUpdateOptionsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductVariantUpdateOptionsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "option_name", Value.Option_Name);
      Swagger.Streams.Deserialize (Object, "option_value", Value.Option_Value);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductVariantUpdateOptionsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductVariantUpdateOptionsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnAction_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnAction_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnAction_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnAction_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnAction_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnCount200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Returns_Count.Is_Null then
         Into.Write_Entity ("returns_count", Value.Returns_Count);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnCount200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnCount200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "returns_count", Value.Returns_Count);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnCount200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnCount200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnReason_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnReason_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnReason_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnReason_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnReason_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnStatus_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnStatus_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnStatus_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnStatus_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnStatus_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ShipmentItem_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Order_Product_Id.Is_Null then
         Into.Write_Entity ("order_product_id", Value.Order_Product_Id);
      end if;
      if not Value.Product_Id.Is_Null then
         Into.Write_Entity ("product_id", Value.Product_Id);
      end if;
      if not Value.Variant_Id.Is_Null then
         Into.Write_Entity ("variant_id", Value.Variant_Id);
      end if;
      if not Value.Model.Is_Null then
         Into.Write_Entity ("model", Value.Model);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "price", Value.Price);
      Serialize (Into, "quantity", Value.Quantity);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ShipmentItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ShipmentItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "order_product_id", Value.Order_Product_Id);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Swagger.Streams.Deserialize (Object, "variant_id", Value.Variant_Id);
      Swagger.Streams.Deserialize (Object, "model", Value.Model);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ShipmentItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ShipmentItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ShipmentTrackingNumber_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Carrier_Id.Is_Null then
         Into.Write_Entity ("carrier_id", Value.Carrier_Id);
      end if;
      if not Value.Tracking_Number.Is_Null then
         Into.Write_Entity ("tracking_number", Value.Tracking_Number);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ShipmentTrackingNumber_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ShipmentTrackingNumber_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "carrier_id", Value.Carrier_Id);
      Swagger.Streams.Deserialize (Object, "tracking_number", Value.Tracking_Number);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ShipmentTrackingNumber_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ShipmentTrackingNumber_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.State_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in State_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.State_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out State_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.State_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Status_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Status_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Status_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Status_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Status_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.StoreAttributeAttributeSet_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "assigned_attribute_ids", Value.Assigned_Attribute_Ids);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in StoreAttributeAttributeSet_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.StoreAttributeAttributeSet_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "assigned_attribute_ids", Value.Assigned_Attribute_Ids);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out StoreAttributeAttributeSet_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.StoreAttributeAttributeSet_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.StoreAttributeGroup_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Position.Is_Null then
         Into.Write_Entity ("position", Value.Position);
      end if;
      if not Value.Attribute_Set_Id.Is_Null then
         Into.Write_Entity ("attribute_set_id", Value.Attribute_Set_Id);
      end if;
      Serialize (Into, "assigned_attribute_ids", Value.Assigned_Attribute_Ids);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in StoreAttributeGroup_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.StoreAttributeGroup_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "position", Value.Position);
      Swagger.Streams.Deserialize (Object, "attribute_set_id", Value.Attribute_Set_Id);
      Swagger.Streams.Deserialize (Object, "assigned_attribute_ids", Value.Assigned_Attribute_Ids);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out StoreAttributeGroup_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.StoreAttributeGroup_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.StoreAttribute_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "default_values", Value.Default_Values);
      if not Value.Position.Is_Null then
         Into.Write_Entity ("position", Value.Position);
      end if;
      if not Value.Visible.Is_Null then
         Into.Write_Entity ("visible", Value.Visible);
      end if;
      if not Value.Required.Is_Null then
         Into.Write_Entity ("required", Value.Required);
      end if;
      if not Value.System.Is_Null then
         Into.Write_Entity ("system", Value.System);
      end if;
      Serialize (Into, "values", Value.Values);
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.Lang_Id.Is_Null then
         Into.Write_Entity ("lang_id", Value.Lang_Id);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in StoreAttribute_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.StoreAttribute_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "default_values", Value.Default_Values);
      Swagger.Streams.Deserialize (Object, "position", Value.Position);
      Swagger.Streams.Deserialize (Object, "visible", Value.Visible);
      Swagger.Streams.Deserialize (Object, "required", Value.Required);
      Swagger.Streams.Deserialize (Object, "system", Value.System);
      Swagger.Streams.Deserialize (Object, "values", Value.Values);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "lang_id", Value.Lang_Id);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out StoreAttribute_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.StoreAttribute_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Subscriber_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Customer_Id.Is_Null then
         Into.Write_Entity ("customer_id", Value.Customer_Id);
      end if;
      if not Value.Email.Is_Null then
         Into.Write_Entity ("email", Value.Email);
      end if;
      if not Value.Subscribed.Is_Null then
         Into.Write_Entity ("subscribed", Value.Subscribed);
      end if;
      if not Value.First_Name.Is_Null then
         Into.Write_Entity ("first_name", Value.First_Name);
      end if;
      if not Value.Last_Name.Is_Null then
         Into.Write_Entity ("last_name", Value.Last_Name);
      end if;
      Serialize (Into, "stores_ids", Value.Stores_Ids);
      if not Value.Created_Time.Is_Null then
         Into.Write_Entity ("created_time", Value.Created_Time);
      end if;
      if not Value.Modified_Time.Is_Null then
         Into.Write_Entity ("modified_time", Value.Modified_Time);
      end if;
      if not Value.Lang_Id.Is_Null then
         Into.Write_Entity ("lang_id", Value.Lang_Id);
      end if;
      if not Value.Gender.Is_Null then
         Into.Write_Entity ("gender", Value.Gender);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Subscriber_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Subscriber_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "customer_id", Value.Customer_Id);
      Swagger.Streams.Deserialize (Object, "email", Value.Email);
      Swagger.Streams.Deserialize (Object, "subscribed", Value.Subscribed);
      Swagger.Streams.Deserialize (Object, "first_name", Value.First_Name);
      Swagger.Streams.Deserialize (Object, "last_name", Value.Last_Name);
      Swagger.Streams.Deserialize (Object, "stores_ids", Value.Stores_Ids);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
      Swagger.Streams.Deserialize (Object, "modified_time", Value.Modified_Time);
      Swagger.Streams.Deserialize (Object, "lang_id", Value.Lang_Id);
      Swagger.Streams.Deserialize (Object, "gender", Value.Gender);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Subscriber_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Subscriber_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TaxClassZipCodesRange_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.From.Is_Null then
         Into.Write_Entity ("from", Value.From);
      end if;
      if not Value.To.Is_Null then
         Into.Write_Entity ("to", Value.To);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TaxClassZipCodesRange_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TaxClassZipCodesRange_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "from", Value.From);
      Swagger.Streams.Deserialize (Object, "to", Value.To);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TaxClassZipCodesRange_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TaxClassZipCodesRange_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.WebhookCount200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Webhook_Count.Is_Null then
         Into.Write_Entity ("webhook_count", Value.Webhook_Count);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in WebhookCount200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.WebhookCount200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "webhook_count", Value.Webhook_Count);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out WebhookCount200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.WebhookCount200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.WebhookEvents200ResponseResultEventsInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Webhook_Name.Is_Null then
         Into.Write_Entity ("webhook_name", Value.Webhook_Name);
      end if;
      if not Value.Entity.Is_Null then
         Into.Write_Entity ("entity", Value.Entity);
      end if;
      if not Value.Action.Is_Null then
         Into.Write_Entity ("action", Value.Action);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in WebhookEvents200ResponseResultEventsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.WebhookEvents200ResponseResultEventsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "webhook_name", Value.Webhook_Name);
      Swagger.Streams.Deserialize (Object, "entity", Value.Entity);
      Swagger.Streams.Deserialize (Object, "action", Value.Action);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out WebhookEvents200ResponseResultEventsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.WebhookEvents200ResponseResultEventsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Webhook_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Label.Is_Null then
         Into.Write_Entity ("label", Value.Label);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.Lang_Id.Is_Null then
         Into.Write_Entity ("lang_id", Value.Lang_Id);
      end if;
      if not Value.Active.Is_Null then
         Into.Write_Entity ("active", Value.Active);
      end if;
      if not Value.Callback.Is_Null then
         Into.Write_Entity ("callback", Value.Callback);
      end if;
      if not Value.Fields.Is_Null then
         Into.Write_Entity ("fields", Value.Fields);
      end if;
      if not Value.Response_Fields.Is_Null then
         Into.Write_Entity ("response_fields", Value.Response_Fields);
      end if;
      if not Value.Created_At.Is_Null then
         Into.Write_Entity ("created_at", Value.Created_At);
      end if;
      if not Value.Updated_At.Is_Null then
         Into.Write_Entity ("updated_at", Value.Updated_At);
      end if;
      if not Value.Entity.Is_Null then
         Into.Write_Entity ("entity", Value.Entity);
      end if;
      if not Value.Action.Is_Null then
         Into.Write_Entity ("action", Value.Action);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Webhook_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Webhook_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "label", Value.Label);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "lang_id", Value.Lang_Id);
      Swagger.Streams.Deserialize (Object, "active", Value.Active);
      Swagger.Streams.Deserialize (Object, "callback", Value.Callback);
      Swagger.Streams.Deserialize (Object, "fields", Value.Fields);
      Swagger.Streams.Deserialize (Object, "response_fields", Value.Response_Fields);
      Swagger.Streams.Deserialize (Object, "created_at", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "updated_at", Value.Updated_At);
      Swagger.Streams.Deserialize (Object, "entity", Value.Entity);
      Swagger.Streams.Deserialize (Object, "action", Value.Action);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Webhook_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Webhook_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AccountCartAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AccountCartAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AccountCartAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AccountCartAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AccountCartAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AccountCartAdd_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("cart_id", Value.Cart_Id);
      if not Value.Store_Url.Is_Null then
         Into.Write_Entity ("store_url", Value.Store_Url);
      end if;
      if not Value.Bridge_Url.Is_Null then
         Into.Write_Entity ("bridge_url", Value.Bridge_Url);
      end if;
      if not Value.Store_Root.Is_Null then
         Into.Write_Entity ("store_root", Value.Store_Root);
      end if;
      if not Value.Store_Key.Is_Null then
         Into.Write_Entity ("store_key", Value.Store_Key);
      end if;
      if not Value.Validate_Version.Is_Null then
         Into.Write_Entity ("validate_version", Value.Validate_Version);
      end if;
      if not Value.Verify.Is_Null then
         Into.Write_Entity ("verify", Value.Verify);
      end if;
      if not Value.Db_Tables_Prefix.Is_Null then
         Into.Write_Entity ("db_tables_prefix", Value.Db_Tables_Prefix);
      end if;
      if not Value.User_Agent.Is_Null then
         Into.Write_Entity ("user_agent", Value.User_Agent);
      end if;
      if not Value.Ftp_Host.Is_Null then
         Into.Write_Entity ("ftp_host", Value.Ftp_Host);
      end if;
      if not Value.Ftp_User.Is_Null then
         Into.Write_Entity ("ftp_user", Value.Ftp_User);
      end if;
      if not Value.Ftp_Password.Is_Null then
         Into.Write_Entity ("ftp_password", Value.Ftp_Password);
      end if;
      if not Value.Ftp_Port.Is_Null then
         Into.Write_Entity ("ftp_port", Value.Ftp_Port);
      end if;
      if not Value.Ftp_Store_Dir.Is_Null then
         Into.Write_Entity ("ftp_store_dir", Value.Ftp_Store_Dir);
      end if;
      if not Value.P_3dcart_Private_Key.Is_Null then
         Into.Write_Entity ("3dcart_private_key", Value.P_3dcart_Private_Key);
      end if;
      if not Value.P_3dcart_Access_Token.Is_Null then
         Into.Write_Entity ("3dcart_access_token", Value.P_3dcart_Access_Token);
      end if;
      if not Value.P_3dcartapi_Api_Key.Is_Null then
         Into.Write_Entity ("3dcartapi_api_key", Value.P_3dcartapi_Api_Key);
      end if;
      if not Value.Amazon_Sp_Client_Id.Is_Null then
         Into.Write_Entity ("amazon_sp_client_id", Value.Amazon_Sp_Client_Id);
      end if;
      if not Value.Amazon_Sp_Client_Secret.Is_Null then
         Into.Write_Entity ("amazon_sp_client_secret", Value.Amazon_Sp_Client_Secret);
      end if;
      if not Value.Amazon_Sp_Refresh_Token.Is_Null then
         Into.Write_Entity ("amazon_sp_refresh_token", Value.Amazon_Sp_Refresh_Token);
      end if;
      if not Value.Amazon_Sp_Aws_Region.Is_Null then
         Into.Write_Entity ("amazon_sp_aws_region", Value.Amazon_Sp_Aws_Region);
      end if;
      if not Value.Amazon_Sp_Api_Environment.Is_Null then
         Into.Write_Entity ("amazon_sp_api_environment", Value.Amazon_Sp_Api_Environment);
      end if;
      if not Value.Amazon_Seller_Id.Is_Null then
         Into.Write_Entity ("amazon_seller_id", Value.Amazon_Seller_Id);
      end if;
      if not Value.Aspdotnetstorefront_Api_User.Is_Null then
         Into.Write_Entity ("aspdotnetstorefront_api_user", Value.Aspdotnetstorefront_Api_User);
      end if;
      if not Value.Aspdotnetstorefront_Api_Pass.Is_Null then
         Into.Write_Entity ("aspdotnetstorefront_api_pass", Value.Aspdotnetstorefront_Api_Pass);
      end if;
      if not Value.Bigcommerceapi_Admin_Account.Is_Null then
         Into.Write_Entity ("bigcommerceapi_admin_account", Value.Bigcommerceapi_Admin_Account);
      end if;
      if not Value.Bigcommerceapi_Api_Path.Is_Null then
         Into.Write_Entity ("bigcommerceapi_api_path", Value.Bigcommerceapi_Api_Path);
      end if;
      if not Value.Bigcommerceapi_Api_Key.Is_Null then
         Into.Write_Entity ("bigcommerceapi_api_key", Value.Bigcommerceapi_Api_Key);
      end if;
      if not Value.Bigcommerceapi_Client_Id.Is_Null then
         Into.Write_Entity ("bigcommerceapi_client_id", Value.Bigcommerceapi_Client_Id);
      end if;
      if not Value.Bigcommerceapi_Access_Token.Is_Null then
         Into.Write_Entity ("bigcommerceapi_access_token", Value.Bigcommerceapi_Access_Token);
      end if;
      if not Value.Bigcommerceapi_Context.Is_Null then
         Into.Write_Entity ("bigcommerceapi_context", Value.Bigcommerceapi_Context);
      end if;
      if not Value.Bol_Api_Key.Is_Null then
         Into.Write_Entity ("bol_api_key", Value.Bol_Api_Key);
      end if;
      if not Value.Bol_Api_Secret.Is_Null then
         Into.Write_Entity ("bol_api_secret", Value.Bol_Api_Secret);
      end if;
      if not Value.Bol_Retailer_Id.Is_Null then
         Into.Write_Entity ("bol_retailer_id", Value.Bol_Retailer_Id);
      end if;
      Into.Write_Entity ("bigcartel_user_name", Value.Bigcartel_User_Name);
      Into.Write_Entity ("bigcartel_password", Value.Bigcartel_Password);
      if not Value.Demandware_Client_Id.Is_Null then
         Into.Write_Entity ("demandware_client_id", Value.Demandware_Client_Id);
      end if;
      if not Value.Demandware_Api_Password.Is_Null then
         Into.Write_Entity ("demandware_api_password", Value.Demandware_Api_Password);
      end if;
      if not Value.Demandware_User_Name.Is_Null then
         Into.Write_Entity ("demandware_user_name", Value.Demandware_User_Name);
      end if;
      if not Value.Demandware_User_Password.Is_Null then
         Into.Write_Entity ("demandware_user_password", Value.Demandware_User_Password);
      end if;
      if not Value.Ebay_Client_Id.Is_Null then
         Into.Write_Entity ("ebay_client_id", Value.Ebay_Client_Id);
      end if;
      if not Value.Ebay_Client_Secret.Is_Null then
         Into.Write_Entity ("ebay_client_secret", Value.Ebay_Client_Secret);
      end if;
      if not Value.Ebay_Runame.Is_Null then
         Into.Write_Entity ("ebay_runame", Value.Ebay_Runame);
      end if;
      if not Value.Ebay_Access_Token.Is_Null then
         Into.Write_Entity ("ebay_access_token", Value.Ebay_Access_Token);
      end if;
      if not Value.Ebay_Refresh_Token.Is_Null then
         Into.Write_Entity ("ebay_refresh_token", Value.Ebay_Refresh_Token);
      end if;
      if not Value.Ebay_Environment.Is_Null then
         Into.Write_Entity ("ebay_environment", Value.Ebay_Environment);
      end if;
      if not Value.Ebay_Site_Id.Is_Null then
         Into.Write_Entity ("ebay_site_id", Value.Ebay_Site_Id);
      end if;
      if not Value.Walmart_Client_Id.Is_Null then
         Into.Write_Entity ("walmart_client_id", Value.Walmart_Client_Id);
      end if;
      if not Value.Walmart_Client_Secret.Is_Null then
         Into.Write_Entity ("walmart_client_secret", Value.Walmart_Client_Secret);
      end if;
      if not Value.Walmart_Environment.Is_Null then
         Into.Write_Entity ("walmart_environment", Value.Walmart_Environment);
      end if;
      if not Value.Walmart_Channel_Type.Is_Null then
         Into.Write_Entity ("walmart_channel_type", Value.Walmart_Channel_Type);
      end if;
      if not Value.Walmart_Region.Is_Null then
         Into.Write_Entity ("walmart_region", Value.Walmart_Region);
      end if;
      if not Value.Ecwid_Acess_Token.Is_Null then
         Into.Write_Entity ("ecwid_acess_token", Value.Ecwid_Acess_Token);
      end if;
      if not Value.Ecwid_Store_Id.Is_Null then
         Into.Write_Entity ("ecwid_store_id", Value.Ecwid_Store_Id);
      end if;
      if not Value.Lazada_App_Id.Is_Null then
         Into.Write_Entity ("lazada_app_id", Value.Lazada_App_Id);
      end if;
      if not Value.Lazada_App_Secret.Is_Null then
         Into.Write_Entity ("lazada_app_secret", Value.Lazada_App_Secret);
      end if;
      if not Value.Lazada_Refresh_Token.Is_Null then
         Into.Write_Entity ("lazada_refresh_token", Value.Lazada_Refresh_Token);
      end if;
      if not Value.Lazada_Region.Is_Null then
         Into.Write_Entity ("lazada_region", Value.Lazada_Region);
      end if;
      if not Value.Lightspeed_Api_Key.Is_Null then
         Into.Write_Entity ("lightspeed_api_key", Value.Lightspeed_Api_Key);
      end if;
      if not Value.Lightspeed_Api_Secret.Is_Null then
         Into.Write_Entity ("lightspeed_api_secret", Value.Lightspeed_Api_Secret);
      end if;
      if not Value.Etsy_Keystring.Is_Null then
         Into.Write_Entity ("etsy_keystring", Value.Etsy_Keystring);
      end if;
      if not Value.Etsy_Shared_Secret.Is_Null then
         Into.Write_Entity ("etsy_shared_secret", Value.Etsy_Shared_Secret);
      end if;
      if not Value.Etsy_Access_Token.Is_Null then
         Into.Write_Entity ("etsy_access_token", Value.Etsy_Access_Token);
      end if;
      if not Value.Etsy_Token_Secret.Is_Null then
         Into.Write_Entity ("etsy_token_secret", Value.Etsy_Token_Secret);
      end if;
      if not Value.Etsy_Client_Id.Is_Null then
         Into.Write_Entity ("etsy_client_id", Value.Etsy_Client_Id);
      end if;
      if not Value.Etsy_Refresh_Token.Is_Null then
         Into.Write_Entity ("etsy_refresh_token", Value.Etsy_Refresh_Token);
      end if;
      if not Value.Facebook_App_Id.Is_Null then
         Into.Write_Entity ("facebook_app_id", Value.Facebook_App_Id);
      end if;
      if not Value.Facebook_App_Secret.Is_Null then
         Into.Write_Entity ("facebook_app_secret", Value.Facebook_App_Secret);
      end if;
      if not Value.Facebook_Access_Token.Is_Null then
         Into.Write_Entity ("facebook_access_token", Value.Facebook_Access_Token);
      end if;
      if not Value.Facebook_Business_Id.Is_Null then
         Into.Write_Entity ("facebook_business_id", Value.Facebook_Business_Id);
      end if;
      if not Value.Neto_Api_Key.Is_Null then
         Into.Write_Entity ("neto_api_key", Value.Neto_Api_Key);
      end if;
      if not Value.Neto_Api_Username.Is_Null then
         Into.Write_Entity ("neto_api_username", Value.Neto_Api_Username);
      end if;
      if not Value.Shopline_Access_Token.Is_Null then
         Into.Write_Entity ("shopline_access_token", Value.Shopline_Access_Token);
      end if;
      if not Value.Shopline_App_Key.Is_Null then
         Into.Write_Entity ("shopline_app_key", Value.Shopline_App_Key);
      end if;
      if not Value.Shopline_App_Secret.Is_Null then
         Into.Write_Entity ("shopline_app_secret", Value.Shopline_App_Secret);
      end if;
      if not Value.Shopline_Shared_Secret.Is_Null then
         Into.Write_Entity ("shopline_shared_secret", Value.Shopline_Shared_Secret);
      end if;
      if not Value.Shopify_Access_Token.Is_Null then
         Into.Write_Entity ("shopify_access_token", Value.Shopify_Access_Token);
      end if;
      if not Value.Shopify_Api_Key.Is_Null then
         Into.Write_Entity ("shopify_api_key", Value.Shopify_Api_Key);
      end if;
      if not Value.Shopify_Api_Password.Is_Null then
         Into.Write_Entity ("shopify_api_password", Value.Shopify_Api_Password);
      end if;
      if not Value.Shopify_Shared_Secret.Is_Null then
         Into.Write_Entity ("shopify_shared_secret", Value.Shopify_Shared_Secret);
      end if;
      if not Value.Shopee_Partner_Id.Is_Null then
         Into.Write_Entity ("shopee_partner_id", Value.Shopee_Partner_Id);
      end if;
      if not Value.Shopee_Partner_Key.Is_Null then
         Into.Write_Entity ("shopee_partner_key", Value.Shopee_Partner_Key);
      end if;
      if not Value.Shopee_Shop_Id.Is_Null then
         Into.Write_Entity ("shopee_shop_id", Value.Shopee_Shop_Id);
      end if;
      if not Value.Shopee_Refresh_Token.Is_Null then
         Into.Write_Entity ("shopee_refresh_token", Value.Shopee_Refresh_Token);
      end if;
      if not Value.Shopee_Region.Is_Null then
         Into.Write_Entity ("shopee_region", Value.Shopee_Region);
      end if;
      if not Value.Shopee_Environment.Is_Null then
         Into.Write_Entity ("shopee_environment", Value.Shopee_Environment);
      end if;
      if not Value.Shoplazza_Access_Token.Is_Null then
         Into.Write_Entity ("shoplazza_access_token", Value.Shoplazza_Access_Token);
      end if;
      if not Value.Shoplazza_Shared_Secret.Is_Null then
         Into.Write_Entity ("shoplazza_shared_secret", Value.Shoplazza_Shared_Secret);
      end if;
      if not Value.Shopware_Access_Key.Is_Null then
         Into.Write_Entity ("shopware_access_key", Value.Shopware_Access_Key);
      end if;
      if not Value.Shopware_Api_Key.Is_Null then
         Into.Write_Entity ("shopware_api_key", Value.Shopware_Api_Key);
      end if;
      if not Value.Shopware_Api_Secret.Is_Null then
         Into.Write_Entity ("shopware_api_secret", Value.Shopware_Api_Secret);
      end if;
      if not Value.Miva_Access_Token.Is_Null then
         Into.Write_Entity ("miva_access_token", Value.Miva_Access_Token);
      end if;
      if not Value.Miva_Signature.Is_Null then
         Into.Write_Entity ("miva_signature", Value.Miva_Signature);
      end if;
      if not Value.Tiendanube_User_Id.Is_Null then
         Into.Write_Entity ("tiendanube_user_id", Value.Tiendanube_User_Id);
      end if;
      if not Value.Tiendanube_Access_Token.Is_Null then
         Into.Write_Entity ("tiendanube_access_token", Value.Tiendanube_Access_Token);
      end if;
      if not Value.Tiendanube_Client_Secret.Is_Null then
         Into.Write_Entity ("tiendanube_client_secret", Value.Tiendanube_Client_Secret);
      end if;
      if not Value.Volusion_Login.Is_Null then
         Into.Write_Entity ("volusion_login", Value.Volusion_Login);
      end if;
      if not Value.Volusion_Password.Is_Null then
         Into.Write_Entity ("volusion_password", Value.Volusion_Password);
      end if;
      if not Value.Hybris_Client_Id.Is_Null then
         Into.Write_Entity ("hybris_client_id", Value.Hybris_Client_Id);
      end if;
      if not Value.Hybris_Client_Secret.Is_Null then
         Into.Write_Entity ("hybris_client_secret", Value.Hybris_Client_Secret);
      end if;
      if not Value.Hybris_Username.Is_Null then
         Into.Write_Entity ("hybris_username", Value.Hybris_Username);
      end if;
      if not Value.Hybris_Password.Is_Null then
         Into.Write_Entity ("hybris_password", Value.Hybris_Password);
      end if;
      Serialize (Into, "hybris_websites", Value.Hybris_Websites);
      if not Value.Square_Client_Id.Is_Null then
         Into.Write_Entity ("square_client_id", Value.Square_Client_Id);
      end if;
      if not Value.Square_Client_Secret.Is_Null then
         Into.Write_Entity ("square_client_secret", Value.Square_Client_Secret);
      end if;
      if not Value.Square_Refresh_Token.Is_Null then
         Into.Write_Entity ("square_refresh_token", Value.Square_Refresh_Token);
      end if;
      if not Value.Squarespace_Api_Key.Is_Null then
         Into.Write_Entity ("squarespace_api_key", Value.Squarespace_Api_Key);
      end if;
      if not Value.Squarespace_Client_Id.Is_Null then
         Into.Write_Entity ("squarespace_client_id", Value.Squarespace_Client_Id);
      end if;
      if not Value.Squarespace_Client_Secret.Is_Null then
         Into.Write_Entity ("squarespace_client_secret", Value.Squarespace_Client_Secret);
      end if;
      if not Value.Squarespace_Access_Token.Is_Null then
         Into.Write_Entity ("squarespace_access_token", Value.Squarespace_Access_Token);
      end if;
      if not Value.Squarespace_Refresh_Token.Is_Null then
         Into.Write_Entity ("squarespace_refresh_token", Value.Squarespace_Refresh_Token);
      end if;
      if not Value.Commercehq_Api_Key.Is_Null then
         Into.Write_Entity ("commercehq_api_key", Value.Commercehq_Api_Key);
      end if;
      if not Value.Commercehq_Api_Password.Is_Null then
         Into.Write_Entity ("commercehq_api_password", Value.Commercehq_Api_Password);
      end if;
      if not Value.Wc_Consumer_Key.Is_Null then
         Into.Write_Entity ("wc_consumer_key", Value.Wc_Consumer_Key);
      end if;
      if not Value.Wc_Consumer_Secret.Is_Null then
         Into.Write_Entity ("wc_consumer_secret", Value.Wc_Consumer_Secret);
      end if;
      if not Value.Magento_Consumer_Key.Is_Null then
         Into.Write_Entity ("magento_consumer_key", Value.Magento_Consumer_Key);
      end if;
      if not Value.Magento_Consumer_Secret.Is_Null then
         Into.Write_Entity ("magento_consumer_secret", Value.Magento_Consumer_Secret);
      end if;
      if not Value.Magento_Access_Token.Is_Null then
         Into.Write_Entity ("magento_access_token", Value.Magento_Access_Token);
      end if;
      if not Value.Magento_Token_Secret.Is_Null then
         Into.Write_Entity ("magento_token_secret", Value.Magento_Token_Secret);
      end if;
      if not Value.Prestashop_Webservice_Key.Is_Null then
         Into.Write_Entity ("prestashop_webservice_key", Value.Prestashop_Webservice_Key);
      end if;
      Into.Write_Entity ("wix_app_id", Value.Wix_App_Id);
      Into.Write_Entity ("wix_app_secret_key", Value.Wix_App_Secret_Key);
      if not Value.Wix_Instance_Id.Is_Null then
         Into.Write_Entity ("wix_instance_id", Value.Wix_Instance_Id);
      end if;
      if not Value.Wix_Refresh_Token.Is_Null then
         Into.Write_Entity ("wix_refresh_token", Value.Wix_Refresh_Token);
      end if;
      if not Value.Mercado_Libre_App_Id.Is_Null then
         Into.Write_Entity ("mercado_libre_app_id", Value.Mercado_Libre_App_Id);
      end if;
      if not Value.Mercado_Libre_App_Secret_Key.Is_Null then
         Into.Write_Entity ("mercado_libre_app_secret_key", Value.Mercado_Libre_App_Secret_Key);
      end if;
      if not Value.Mercado_Libre_Refresh_Token.Is_Null then
         Into.Write_Entity ("mercado_libre_refresh_token", Value.Mercado_Libre_Refresh_Token);
      end if;
      if not Value.Zid_Client_Id.Is_Null then
         Into.Write_Entity ("zid_client_id", Value.Zid_Client_Id);
      end if;
      if not Value.Zid_Client_Secret.Is_Null then
         Into.Write_Entity ("zid_client_secret", Value.Zid_Client_Secret);
      end if;
      if not Value.Zid_Access_Token.Is_Null then
         Into.Write_Entity ("zid_access_token", Value.Zid_Access_Token);
      end if;
      if not Value.Zid_Authorization.Is_Null then
         Into.Write_Entity ("zid_authorization", Value.Zid_Authorization);
      end if;
      if not Value.Zid_Refresh_Token.Is_Null then
         Into.Write_Entity ("zid_refresh_token", Value.Zid_Refresh_Token);
      end if;
      if not Value.Flipkart_Client_Id.Is_Null then
         Into.Write_Entity ("flipkart_client_id", Value.Flipkart_Client_Id);
      end if;
      if not Value.Flipkart_Client_Secret.Is_Null then
         Into.Write_Entity ("flipkart_client_secret", Value.Flipkart_Client_Secret);
      end if;
      if not Value.Allegro_Client_Id.Is_Null then
         Into.Write_Entity ("allegro_client_id", Value.Allegro_Client_Id);
      end if;
      if not Value.Allegro_Client_Secret.Is_Null then
         Into.Write_Entity ("allegro_client_secret", Value.Allegro_Client_Secret);
      end if;
      if not Value.Allegro_Access_Token.Is_Null then
         Into.Write_Entity ("allegro_access_token", Value.Allegro_Access_Token);
      end if;
      if not Value.Allegro_Refresh_Token.Is_Null then
         Into.Write_Entity ("allegro_refresh_token", Value.Allegro_Refresh_Token);
      end if;
      if not Value.Allegro_Environment.Is_Null then
         Into.Write_Entity ("allegro_environment", Value.Allegro_Environment);
      end if;
      if not Value.Zoho_Client_Id.Is_Null then
         Into.Write_Entity ("zoho_client_id", Value.Zoho_Client_Id);
      end if;
      if not Value.Zoho_Client_Secret.Is_Null then
         Into.Write_Entity ("zoho_client_secret", Value.Zoho_Client_Secret);
      end if;
      if not Value.Zoho_Refresh_Token.Is_Null then
         Into.Write_Entity ("zoho_refresh_token", Value.Zoho_Refresh_Token);
      end if;
      if not Value.Zoho_Region.Is_Null then
         Into.Write_Entity ("zoho_region", Value.Zoho_Region);
      end if;
      if not Value.Otto_Client_Id.Is_Null then
         Into.Write_Entity ("otto_client_id", Value.Otto_Client_Id);
      end if;
      if not Value.Otto_Client_Secret.Is_Null then
         Into.Write_Entity ("otto_client_secret", Value.Otto_Client_Secret);
      end if;
      if not Value.Otto_App_Id.Is_Null then
         Into.Write_Entity ("otto_app_id", Value.Otto_App_Id);
      end if;
      if not Value.Otto_Refresh_Token.Is_Null then
         Into.Write_Entity ("otto_refresh_token", Value.Otto_Refresh_Token);
      end if;
      if not Value.Otto_Environment.Is_Null then
         Into.Write_Entity ("otto_environment", Value.Otto_Environment);
      end if;
      if not Value.Otto_Access_Token.Is_Null then
         Into.Write_Entity ("otto_access_token", Value.Otto_Access_Token);
      end if;
      if not Value.Tiktokshop_App_Key.Is_Null then
         Into.Write_Entity ("tiktokshop_app_key", Value.Tiktokshop_App_Key);
      end if;
      if not Value.Tiktokshop_App_Secret.Is_Null then
         Into.Write_Entity ("tiktokshop_app_secret", Value.Tiktokshop_App_Secret);
      end if;
      if not Value.Tiktokshop_Refresh_Token.Is_Null then
         Into.Write_Entity ("tiktokshop_refresh_token", Value.Tiktokshop_Refresh_Token);
      end if;
      if not Value.Tiktokshop_Access_Token.Is_Null then
         Into.Write_Entity ("tiktokshop_access_token", Value.Tiktokshop_Access_Token);
      end if;
      if not Value.Salla_Client_Id.Is_Null then
         Into.Write_Entity ("salla_client_id", Value.Salla_Client_Id);
      end if;
      if not Value.Salla_Client_Secret.Is_Null then
         Into.Write_Entity ("salla_client_secret", Value.Salla_Client_Secret);
      end if;
      if not Value.Salla_Refresh_Token.Is_Null then
         Into.Write_Entity ("salla_refresh_token", Value.Salla_Refresh_Token);
      end if;
      if not Value.Salla_Access_Token.Is_Null then
         Into.Write_Entity ("salla_access_token", Value.Salla_Access_Token);
      end if;
      if not Value.Temu_App_Key.Is_Null then
         Into.Write_Entity ("temu_app_key", Value.Temu_App_Key);
      end if;
      if not Value.Temu_App_Secret.Is_Null then
         Into.Write_Entity ("temu_app_secret", Value.Temu_App_Secret);
      end if;
      Into.Write_Entity ("temu_access_token", Value.Temu_Access_Token);
      Into.Write_Entity ("temu_region", Value.Temu_Region);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AccountCartAdd_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AccountCartAdd_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "cart_id", Value.Cart_Id);
      Swagger.Streams.Deserialize (Object, "store_url", Value.Store_Url);
      Swagger.Streams.Deserialize (Object, "bridge_url", Value.Bridge_Url);
      Swagger.Streams.Deserialize (Object, "store_root", Value.Store_Root);
      Swagger.Streams.Deserialize (Object, "store_key", Value.Store_Key);
      Swagger.Streams.Deserialize (Object, "validate_version", Value.Validate_Version);
      Swagger.Streams.Deserialize (Object, "verify", Value.Verify);
      Swagger.Streams.Deserialize (Object, "db_tables_prefix", Value.Db_Tables_Prefix);
      Swagger.Streams.Deserialize (Object, "user_agent", Value.User_Agent);
      Swagger.Streams.Deserialize (Object, "ftp_host", Value.Ftp_Host);
      Swagger.Streams.Deserialize (Object, "ftp_user", Value.Ftp_User);
      Swagger.Streams.Deserialize (Object, "ftp_password", Value.Ftp_Password);
      Swagger.Streams.Deserialize (Object, "ftp_port", Value.Ftp_Port);
      Swagger.Streams.Deserialize (Object, "ftp_store_dir", Value.Ftp_Store_Dir);
      Swagger.Streams.Deserialize (Object, "3dcart_private_key", Value.P_3dcart_Private_Key);
      Swagger.Streams.Deserialize (Object, "3dcart_access_token", Value.P_3dcart_Access_Token);
      Swagger.Streams.Deserialize (Object, "3dcartapi_api_key", Value.P_3dcartapi_Api_Key);
      Swagger.Streams.Deserialize (Object, "amazon_sp_client_id", Value.Amazon_Sp_Client_Id);
      Swagger.Streams.Deserialize (Object, "amazon_sp_client_secret", Value.Amazon_Sp_Client_Secret);
      Swagger.Streams.Deserialize (Object, "amazon_sp_refresh_token", Value.Amazon_Sp_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "amazon_sp_aws_region", Value.Amazon_Sp_Aws_Region);
      Swagger.Streams.Deserialize (Object, "amazon_sp_api_environment", Value.Amazon_Sp_Api_Environment);
      Swagger.Streams.Deserialize (Object, "amazon_seller_id", Value.Amazon_Seller_Id);
      Swagger.Streams.Deserialize (Object, "aspdotnetstorefront_api_user", Value.Aspdotnetstorefront_Api_User);
      Swagger.Streams.Deserialize (Object, "aspdotnetstorefront_api_pass", Value.Aspdotnetstorefront_Api_Pass);
      Swagger.Streams.Deserialize (Object, "bigcommerceapi_admin_account", Value.Bigcommerceapi_Admin_Account);
      Swagger.Streams.Deserialize (Object, "bigcommerceapi_api_path", Value.Bigcommerceapi_Api_Path);
      Swagger.Streams.Deserialize (Object, "bigcommerceapi_api_key", Value.Bigcommerceapi_Api_Key);
      Swagger.Streams.Deserialize (Object, "bigcommerceapi_client_id", Value.Bigcommerceapi_Client_Id);
      Swagger.Streams.Deserialize (Object, "bigcommerceapi_access_token", Value.Bigcommerceapi_Access_Token);
      Swagger.Streams.Deserialize (Object, "bigcommerceapi_context", Value.Bigcommerceapi_Context);
      Swagger.Streams.Deserialize (Object, "bol_api_key", Value.Bol_Api_Key);
      Swagger.Streams.Deserialize (Object, "bol_api_secret", Value.Bol_Api_Secret);
      Swagger.Streams.Deserialize (Object, "bol_retailer_id", Value.Bol_Retailer_Id);
      Swagger.Streams.Deserialize (Object, "bigcartel_user_name", Value.Bigcartel_User_Name);
      Swagger.Streams.Deserialize (Object, "bigcartel_password", Value.Bigcartel_Password);
      Swagger.Streams.Deserialize (Object, "demandware_client_id", Value.Demandware_Client_Id);
      Swagger.Streams.Deserialize (Object, "demandware_api_password", Value.Demandware_Api_Password);
      Swagger.Streams.Deserialize (Object, "demandware_user_name", Value.Demandware_User_Name);
      Swagger.Streams.Deserialize (Object, "demandware_user_password", Value.Demandware_User_Password);
      Swagger.Streams.Deserialize (Object, "ebay_client_id", Value.Ebay_Client_Id);
      Swagger.Streams.Deserialize (Object, "ebay_client_secret", Value.Ebay_Client_Secret);
      Swagger.Streams.Deserialize (Object, "ebay_runame", Value.Ebay_Runame);
      Swagger.Streams.Deserialize (Object, "ebay_access_token", Value.Ebay_Access_Token);
      Swagger.Streams.Deserialize (Object, "ebay_refresh_token", Value.Ebay_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "ebay_environment", Value.Ebay_Environment);
      Swagger.Streams.Deserialize (Object, "ebay_site_id", Value.Ebay_Site_Id);
      Swagger.Streams.Deserialize (Object, "walmart_client_id", Value.Walmart_Client_Id);
      Swagger.Streams.Deserialize (Object, "walmart_client_secret", Value.Walmart_Client_Secret);
      Swagger.Streams.Deserialize (Object, "walmart_environment", Value.Walmart_Environment);
      Swagger.Streams.Deserialize (Object, "walmart_channel_type", Value.Walmart_Channel_Type);
      Swagger.Streams.Deserialize (Object, "walmart_region", Value.Walmart_Region);
      Swagger.Streams.Deserialize (Object, "ecwid_acess_token", Value.Ecwid_Acess_Token);
      Swagger.Streams.Deserialize (Object, "ecwid_store_id", Value.Ecwid_Store_Id);
      Swagger.Streams.Deserialize (Object, "lazada_app_id", Value.Lazada_App_Id);
      Swagger.Streams.Deserialize (Object, "lazada_app_secret", Value.Lazada_App_Secret);
      Swagger.Streams.Deserialize (Object, "lazada_refresh_token", Value.Lazada_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "lazada_region", Value.Lazada_Region);
      Swagger.Streams.Deserialize (Object, "lightspeed_api_key", Value.Lightspeed_Api_Key);
      Swagger.Streams.Deserialize (Object, "lightspeed_api_secret", Value.Lightspeed_Api_Secret);
      Swagger.Streams.Deserialize (Object, "etsy_keystring", Value.Etsy_Keystring);
      Swagger.Streams.Deserialize (Object, "etsy_shared_secret", Value.Etsy_Shared_Secret);
      Swagger.Streams.Deserialize (Object, "etsy_access_token", Value.Etsy_Access_Token);
      Swagger.Streams.Deserialize (Object, "etsy_token_secret", Value.Etsy_Token_Secret);
      Swagger.Streams.Deserialize (Object, "etsy_client_id", Value.Etsy_Client_Id);
      Swagger.Streams.Deserialize (Object, "etsy_refresh_token", Value.Etsy_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "facebook_app_id", Value.Facebook_App_Id);
      Swagger.Streams.Deserialize (Object, "facebook_app_secret", Value.Facebook_App_Secret);
      Swagger.Streams.Deserialize (Object, "facebook_access_token", Value.Facebook_Access_Token);
      Swagger.Streams.Deserialize (Object, "facebook_business_id", Value.Facebook_Business_Id);
      Swagger.Streams.Deserialize (Object, "neto_api_key", Value.Neto_Api_Key);
      Swagger.Streams.Deserialize (Object, "neto_api_username", Value.Neto_Api_Username);
      Swagger.Streams.Deserialize (Object, "shopline_access_token", Value.Shopline_Access_Token);
      Swagger.Streams.Deserialize (Object, "shopline_app_key", Value.Shopline_App_Key);
      Swagger.Streams.Deserialize (Object, "shopline_app_secret", Value.Shopline_App_Secret);
      Swagger.Streams.Deserialize (Object, "shopline_shared_secret", Value.Shopline_Shared_Secret);
      Swagger.Streams.Deserialize (Object, "shopify_access_token", Value.Shopify_Access_Token);
      Swagger.Streams.Deserialize (Object, "shopify_api_key", Value.Shopify_Api_Key);
      Swagger.Streams.Deserialize (Object, "shopify_api_password", Value.Shopify_Api_Password);
      Swagger.Streams.Deserialize (Object, "shopify_shared_secret", Value.Shopify_Shared_Secret);
      Swagger.Streams.Deserialize (Object, "shopee_partner_id", Value.Shopee_Partner_Id);
      Swagger.Streams.Deserialize (Object, "shopee_partner_key", Value.Shopee_Partner_Key);
      Swagger.Streams.Deserialize (Object, "shopee_shop_id", Value.Shopee_Shop_Id);
      Swagger.Streams.Deserialize (Object, "shopee_refresh_token", Value.Shopee_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "shopee_region", Value.Shopee_Region);
      Swagger.Streams.Deserialize (Object, "shopee_environment", Value.Shopee_Environment);
      Swagger.Streams.Deserialize (Object, "shoplazza_access_token", Value.Shoplazza_Access_Token);
      Swagger.Streams.Deserialize (Object, "shoplazza_shared_secret", Value.Shoplazza_Shared_Secret);
      Swagger.Streams.Deserialize (Object, "shopware_access_key", Value.Shopware_Access_Key);
      Swagger.Streams.Deserialize (Object, "shopware_api_key", Value.Shopware_Api_Key);
      Swagger.Streams.Deserialize (Object, "shopware_api_secret", Value.Shopware_Api_Secret);
      Swagger.Streams.Deserialize (Object, "miva_access_token", Value.Miva_Access_Token);
      Swagger.Streams.Deserialize (Object, "miva_signature", Value.Miva_Signature);
      Swagger.Streams.Deserialize (Object, "tiendanube_user_id", Value.Tiendanube_User_Id);
      Swagger.Streams.Deserialize (Object, "tiendanube_access_token", Value.Tiendanube_Access_Token);
      Swagger.Streams.Deserialize (Object, "tiendanube_client_secret", Value.Tiendanube_Client_Secret);
      Swagger.Streams.Deserialize (Object, "volusion_login", Value.Volusion_Login);
      Swagger.Streams.Deserialize (Object, "volusion_password", Value.Volusion_Password);
      Swagger.Streams.Deserialize (Object, "hybris_client_id", Value.Hybris_Client_Id);
      Swagger.Streams.Deserialize (Object, "hybris_client_secret", Value.Hybris_Client_Secret);
      Swagger.Streams.Deserialize (Object, "hybris_username", Value.Hybris_Username);
      Swagger.Streams.Deserialize (Object, "hybris_password", Value.Hybris_Password);
      Deserialize (Object, "hybris_websites", Value.Hybris_Websites);
      Swagger.Streams.Deserialize (Object, "square_client_id", Value.Square_Client_Id);
      Swagger.Streams.Deserialize (Object, "square_client_secret", Value.Square_Client_Secret);
      Swagger.Streams.Deserialize (Object, "square_refresh_token", Value.Square_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "squarespace_api_key", Value.Squarespace_Api_Key);
      Swagger.Streams.Deserialize (Object, "squarespace_client_id", Value.Squarespace_Client_Id);
      Swagger.Streams.Deserialize (Object, "squarespace_client_secret", Value.Squarespace_Client_Secret);
      Swagger.Streams.Deserialize (Object, "squarespace_access_token", Value.Squarespace_Access_Token);
      Swagger.Streams.Deserialize (Object, "squarespace_refresh_token", Value.Squarespace_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "commercehq_api_key", Value.Commercehq_Api_Key);
      Swagger.Streams.Deserialize (Object, "commercehq_api_password", Value.Commercehq_Api_Password);
      Swagger.Streams.Deserialize (Object, "wc_consumer_key", Value.Wc_Consumer_Key);
      Swagger.Streams.Deserialize (Object, "wc_consumer_secret", Value.Wc_Consumer_Secret);
      Swagger.Streams.Deserialize (Object, "magento_consumer_key", Value.Magento_Consumer_Key);
      Swagger.Streams.Deserialize (Object, "magento_consumer_secret", Value.Magento_Consumer_Secret);
      Swagger.Streams.Deserialize (Object, "magento_access_token", Value.Magento_Access_Token);
      Swagger.Streams.Deserialize (Object, "magento_token_secret", Value.Magento_Token_Secret);
      Swagger.Streams.Deserialize (Object, "prestashop_webservice_key", Value.Prestashop_Webservice_Key);
      Swagger.Streams.Deserialize (Object, "wix_app_id", Value.Wix_App_Id);
      Swagger.Streams.Deserialize (Object, "wix_app_secret_key", Value.Wix_App_Secret_Key);
      Swagger.Streams.Deserialize (Object, "wix_instance_id", Value.Wix_Instance_Id);
      Swagger.Streams.Deserialize (Object, "wix_refresh_token", Value.Wix_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "mercado_libre_app_id", Value.Mercado_Libre_App_Id);
      Swagger.Streams.Deserialize (Object, "mercado_libre_app_secret_key", Value.Mercado_Libre_App_Secret_Key);
      Swagger.Streams.Deserialize (Object, "mercado_libre_refresh_token", Value.Mercado_Libre_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "zid_client_id", Value.Zid_Client_Id);
      Swagger.Streams.Deserialize (Object, "zid_client_secret", Value.Zid_Client_Secret);
      Swagger.Streams.Deserialize (Object, "zid_access_token", Value.Zid_Access_Token);
      Swagger.Streams.Deserialize (Object, "zid_authorization", Value.Zid_Authorization);
      Swagger.Streams.Deserialize (Object, "zid_refresh_token", Value.Zid_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "flipkart_client_id", Value.Flipkart_Client_Id);
      Swagger.Streams.Deserialize (Object, "flipkart_client_secret", Value.Flipkart_Client_Secret);
      Swagger.Streams.Deserialize (Object, "allegro_client_id", Value.Allegro_Client_Id);
      Swagger.Streams.Deserialize (Object, "allegro_client_secret", Value.Allegro_Client_Secret);
      Swagger.Streams.Deserialize (Object, "allegro_access_token", Value.Allegro_Access_Token);
      Swagger.Streams.Deserialize (Object, "allegro_refresh_token", Value.Allegro_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "allegro_environment", Value.Allegro_Environment);
      Swagger.Streams.Deserialize (Object, "zoho_client_id", Value.Zoho_Client_Id);
      Swagger.Streams.Deserialize (Object, "zoho_client_secret", Value.Zoho_Client_Secret);
      Swagger.Streams.Deserialize (Object, "zoho_refresh_token", Value.Zoho_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "zoho_region", Value.Zoho_Region);
      Swagger.Streams.Deserialize (Object, "otto_client_id", Value.Otto_Client_Id);
      Swagger.Streams.Deserialize (Object, "otto_client_secret", Value.Otto_Client_Secret);
      Swagger.Streams.Deserialize (Object, "otto_app_id", Value.Otto_App_Id);
      Swagger.Streams.Deserialize (Object, "otto_refresh_token", Value.Otto_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "otto_environment", Value.Otto_Environment);
      Swagger.Streams.Deserialize (Object, "otto_access_token", Value.Otto_Access_Token);
      Swagger.Streams.Deserialize (Object, "tiktokshop_app_key", Value.Tiktokshop_App_Key);
      Swagger.Streams.Deserialize (Object, "tiktokshop_app_secret", Value.Tiktokshop_App_Secret);
      Swagger.Streams.Deserialize (Object, "tiktokshop_refresh_token", Value.Tiktokshop_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "tiktokshop_access_token", Value.Tiktokshop_Access_Token);
      Swagger.Streams.Deserialize (Object, "salla_client_id", Value.Salla_Client_Id);
      Swagger.Streams.Deserialize (Object, "salla_client_secret", Value.Salla_Client_Secret);
      Swagger.Streams.Deserialize (Object, "salla_refresh_token", Value.Salla_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "salla_access_token", Value.Salla_Access_Token);
      Swagger.Streams.Deserialize (Object, "temu_app_key", Value.Temu_App_Key);
      Swagger.Streams.Deserialize (Object, "temu_app_secret", Value.Temu_App_Secret);
      Swagger.Streams.Deserialize (Object, "temu_access_token", Value.Temu_Access_Token);
      Swagger.Streams.Deserialize (Object, "temu_region", Value.Temu_Region);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AccountCartAdd_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AccountCartAdd_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AccountCartList200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Carts_Count.Is_Null then
         Into.Write_Entity ("carts_count", Value.Carts_Count);
      end if;
      Serialize (Into, "carts", Value.Carts);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AccountCartList200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AccountCartList200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "carts_count", Value.Carts_Count);
      Deserialize (Object, "carts", Value.Carts);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AccountCartList200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AccountCartList200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AccountCartList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AccountCartList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AccountCartList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AccountCartList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AccountCartList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AccountConfigUpdate200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AccountConfigUpdate200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AccountConfigUpdate200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AccountConfigUpdate200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AccountConfigUpdate200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AccountFailedWebhooks200ResponseResultWebhookInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Webhook_Id.Is_Null then
         Into.Write_Entity ("webhook_id", Value.Webhook_Id);
      end if;
      if not Value.Entity_Id.Is_Null then
         Into.Write_Entity ("entity_id", Value.Entity_Id);
      end if;
      Serialize (Into, "time", Value.Time);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AccountFailedWebhooks200ResponseResultWebhookInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AccountFailedWebhooks200ResponseResultWebhookInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "webhook_id", Value.Webhook_Id);
      Swagger.Streams.Deserialize (Object, "entity_id", Value.Entity_Id);
      Deserialize (Object, "time", Value.Time);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AccountFailedWebhooks200ResponseResultWebhookInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AccountFailedWebhooks200ResponseResultWebhookInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AccountFailedWebhooks200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.All_Failed_Webhook.Is_Null then
         Into.Write_Entity ("all_failed_webhook", Value.All_Failed_Webhook);
      end if;
      Serialize (Into, "webhook", Value.Webhook);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AccountFailedWebhooks200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AccountFailedWebhooks200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "all_failed_webhook", Value.All_Failed_Webhook);
      Deserialize (Object, "webhook", Value.Webhook);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AccountFailedWebhooks200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AccountFailedWebhooks200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AccountFailedWebhooks200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AccountFailedWebhooks200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AccountFailedWebhooks200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AccountFailedWebhooks200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AccountFailedWebhooks200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AccountSupportedPlatforms200ResponseResultSupportedPlatformsInnerParams_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "required", Value.Required);
      Serialize (Into, "additional", Value.Additional);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AccountSupportedPlatforms200ResponseResultSupportedPlatformsInnerParams_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AccountSupportedPlatforms200ResponseResultSupportedPlatformsInnerParams_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "required", Value.Required);
      Deserialize (Object, "additional", Value.Additional);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AccountSupportedPlatforms200ResponseResultSupportedPlatformsInnerParams_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AccountSupportedPlatforms200ResponseResultSupportedPlatformsInnerParams_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AccountSupportedPlatforms200ResponseResultSupportedPlatformsInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Cart_Id.Is_Null then
         Into.Write_Entity ("cart_id", Value.Cart_Id);
      end if;
      if not Value.Cart_Name.Is_Null then
         Into.Write_Entity ("cart_name", Value.Cart_Name);
      end if;
      if not Value.Cart_Versions.Is_Null then
         Into.Write_Entity ("cart_versions", Value.Cart_Versions);
      end if;
      if not Value.Cart_Method.Is_Null then
         Into.Write_Entity ("cart_method", Value.Cart_Method);
      end if;
      Serialize (Into, "params", Value.Params);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AccountSupportedPlatforms200ResponseResultSupportedPlatformsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AccountSupportedPlatforms200ResponseResultSupportedPlatformsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "cart_id", Value.Cart_Id);
      Swagger.Streams.Deserialize (Object, "cart_name", Value.Cart_Name);
      Swagger.Streams.Deserialize (Object, "cart_versions", Value.Cart_Versions);
      Swagger.Streams.Deserialize (Object, "cart_method", Value.Cart_Method);
      Deserialize (Object, "params", Value.Params);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AccountSupportedPlatforms200ResponseResultSupportedPlatformsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AccountSupportedPlatforms200ResponseResultSupportedPlatformsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AccountSupportedPlatforms200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "supported_platforms", Value.Supported_Platforms);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AccountSupportedPlatforms200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AccountSupportedPlatforms200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "supported_platforms", Value.Supported_Platforms);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AccountSupportedPlatforms200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AccountSupportedPlatforms200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AccountSupportedPlatforms200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AccountSupportedPlatforms200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AccountSupportedPlatforms200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AccountSupportedPlatforms200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AccountSupportedPlatforms200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AttributeAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AttributeAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AttributeAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AttributeAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AttributeAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AttributeAssignGroup200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AttributeAssignGroup200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AttributeAssignGroup200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AttributeAssignGroup200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AttributeAssignGroup200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AttributeCount200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AttributeCount200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AttributeCount200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AttributeCount200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AttributeCount200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AttributeDelete200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AttributeDelete200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AttributeDelete200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AttributeDelete200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AttributeDelete200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AttributeInfo200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AttributeInfo200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AttributeInfo200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AttributeInfo200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AttributeInfo200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AttributeTypeList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AttributeTypeList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AttributeTypeList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AttributeTypeList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AttributeTypeList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AttributeUnassignGroup200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AttributeUnassignGroup200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AttributeUnassignGroup200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AttributeUnassignGroup200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AttributeUnassignGroup200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AttributeUpdate200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AttributeUpdate200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AttributeUpdate200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AttributeUpdate200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AttributeUpdate200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AttributeValueDelete200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AttributeValueDelete200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AttributeValueDelete200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AttributeValueDelete200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AttributeValueDelete200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BasketItemAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasketItemAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BasketItemAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BasketItemAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BasketItemAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BasketItem_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Parent_Id.Is_Null then
         Into.Write_Entity ("parent_id", Value.Parent_Id);
      end if;
      if not Value.Product_Id.Is_Null then
         Into.Write_Entity ("product_id", Value.Product_Id);
      end if;
      if not Value.Variant_Id.Is_Null then
         Into.Write_Entity ("variant_id", Value.Variant_Id);
      end if;
      if not Value.Sku.Is_Null then
         Into.Write_Entity ("sku", Value.Sku);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "price", Value.Price);
      Serialize (Into, "tax", Value.Tax);
      Serialize (Into, "quantity", Value.Quantity);
      if not Value.Weight_Unit.Is_Null then
         Into.Write_Entity ("weight_unit", Value.Weight_Unit);
      end if;
      Serialize (Into, "weight", Value.Weight);
      Serialize (Into, "options", Value.Options);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasketItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BasketItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "parent_id", Value.Parent_Id);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Swagger.Streams.Deserialize (Object, "variant_id", Value.Variant_Id);
      Swagger.Streams.Deserialize (Object, "sku", Value.Sku);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "tax", Value.Tax);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
      Swagger.Streams.Deserialize (Object, "weight_unit", Value.Weight_Unit);
      Swagger.Streams.Deserialize (Object, "weight", Value.Weight);
      Deserialize (Object, "options", Value.Options);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BasketItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BasketItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BasketLiveShippingServiceCreate200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasketLiveShippingServiceCreate200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BasketLiveShippingServiceCreate200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BasketLiveShippingServiceCreate200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BasketLiveShippingServiceCreate200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BasketLiveShippingServiceDelete200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasketLiveShippingServiceDelete200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BasketLiveShippingServiceDelete200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BasketLiveShippingServiceDelete200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BasketLiveShippingServiceDelete200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BasketLiveShippingServiceList200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "live_shipping_services", Value.Live_Shipping_Services);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasketLiveShippingServiceList200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BasketLiveShippingServiceList200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "live_shipping_services", Value.Live_Shipping_Services);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BasketLiveShippingServiceList200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BasketLiveShippingServiceList200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BasketLiveShippingServiceList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasketLiveShippingServiceList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BasketLiveShippingServiceList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BasketLiveShippingServiceList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BasketLiveShippingServiceList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BatchJobResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Job_Id.Is_Null then
         Into.Write_Entity ("job_id", Value.Job_Id);
      end if;
      if not Value.Job_Name.Is_Null then
         Into.Write_Entity ("job_name", Value.Job_Name);
      end if;
      if not Value.Items_Processed.Is_Null then
         Into.Write_Entity ("items_processed", Value.Items_Processed);
      end if;
      if not Value.Items_Succeed.Is_Null then
         Into.Write_Entity ("items_succeed", Value.Items_Succeed);
      end if;
      Serialize (Into, "items", Value.Items);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BatchJobResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BatchJobResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "job_id", Value.Job_Id);
      Swagger.Streams.Deserialize (Object, "job_name", Value.Job_Name);
      Swagger.Streams.Deserialize (Object, "items_processed", Value.Items_Processed);
      Swagger.Streams.Deserialize (Object, "items_succeed", Value.Items_Succeed);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BatchJobResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BatchJobResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BatchJob_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Method.Is_Null then
         Into.Write_Entity ("method", Value.Method);
      end if;
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      Serialize (Into, "created_time", Value.Created_Time);
      Serialize (Into, "processed_time", Value.Processed_Time);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BatchJob_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BatchJob_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "method", Value.Method);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "created_time", Value.Created_Time);
      Deserialize (Object, "processed_time", Value.Processed_Time);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BatchJob_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BatchJob_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Carrier_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Active.Is_Null then
         Into.Write_Entity ("active", Value.Active);
      end if;
      Serialize (Into, "shipping_methods", Value.Shipping_Methods);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Carrier_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Carrier_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "active", Value.Active);
      Deserialize (Object, "shipping_methods", Value.Shipping_Methods);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Carrier_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Carrier_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartBridge200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartBridge200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartBridge200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartBridge200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartBridge200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartCatalogPriceRulesCount200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartCatalogPriceRulesCount200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartCatalogPriceRulesCount200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartCatalogPriceRulesCount200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartCatalogPriceRulesCount200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartClearCache200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartClearCache200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartClearCache200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartClearCache200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartClearCache200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartConfig200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartConfig200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartConfig200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartConfig200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartConfig200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartCouponAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartCouponAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartCouponAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartCouponAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartCouponAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartCouponCount200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartCouponCount200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartCouponCount200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartCouponCount200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartCouponCount200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartCreate_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("cart_id", Value.Cart_Id);
      if not Value.Store_Url.Is_Null then
         Into.Write_Entity ("store_url", Value.Store_Url);
      end if;
      if not Value.Bridge_Url.Is_Null then
         Into.Write_Entity ("bridge_url", Value.Bridge_Url);
      end if;
      if not Value.Store_Root.Is_Null then
         Into.Write_Entity ("store_root", Value.Store_Root);
      end if;
      if not Value.Store_Key.Is_Null then
         Into.Write_Entity ("store_key", Value.Store_Key);
      end if;
      if not Value.Shared_Secret.Is_Null then
         Into.Write_Entity ("shared_secret", Value.Shared_Secret);
      end if;
      if not Value.Validate_Version.Is_Null then
         Into.Write_Entity ("validate_version", Value.Validate_Version);
      end if;
      if not Value.Verify.Is_Null then
         Into.Write_Entity ("verify", Value.Verify);
      end if;
      if not Value.Db_Tables_Prefix.Is_Null then
         Into.Write_Entity ("db_tables_prefix", Value.Db_Tables_Prefix);
      end if;
      if not Value.User_Agent.Is_Null then
         Into.Write_Entity ("user_agent", Value.User_Agent);
      end if;
      if not Value.Ftp_Host.Is_Null then
         Into.Write_Entity ("ftp_host", Value.Ftp_Host);
      end if;
      if not Value.Ftp_User.Is_Null then
         Into.Write_Entity ("ftp_user", Value.Ftp_User);
      end if;
      if not Value.Ftp_Password.Is_Null then
         Into.Write_Entity ("ftp_password", Value.Ftp_Password);
      end if;
      if not Value.Ftp_Port.Is_Null then
         Into.Write_Entity ("ftp_port", Value.Ftp_Port);
      end if;
      if not Value.Ftp_Store_Dir.Is_Null then
         Into.Write_Entity ("ftp_store_dir", Value.Ftp_Store_Dir);
      end if;
      if not Value.Api_Key_3dcart.Is_Null then
         Into.Write_Entity ("apiKey_3dcart", Value.Api_Key_3dcart);
      end if;
      if not Value.Admin_Account.Is_Null then
         Into.Write_Entity ("AdminAccount", Value.Admin_Account);
      end if;
      if not Value.Api_Path.Is_Null then
         Into.Write_Entity ("ApiPath", Value.Api_Path);
      end if;
      if not Value.Api_Key_Bigcommerce.Is_Null then
         Into.Write_Entity ("ApiKey_Bigcommerce", Value.Api_Key_Bigcommerce);
      end if;
      if not Value.Client_Id.Is_Null then
         Into.Write_Entity ("client_id", Value.Client_Id);
      end if;
      if not Value.Access_Token.Is_Null then
         Into.Write_Entity ("accessToken", Value.Access_Token);
      end if;
      if not Value.Context.Is_Null then
         Into.Write_Entity ("context", Value.Context);
      end if;
      if not Value.Access_Token.Is_Null then
         Into.Write_Entity ("access_token", Value.Access_Token);
      end if;
      if not Value.Api_Key_Shopify.Is_Null then
         Into.Write_Entity ("apiKey_shopify", Value.Api_Key_Shopify);
      end if;
      if not Value.Api_Password.Is_Null then
         Into.Write_Entity ("apiPassword", Value.Api_Password);
      end if;
      if not Value.Access_Token_Shopify.Is_Null then
         Into.Write_Entity ("accessToken_shopify", Value.Access_Token_Shopify);
      end if;
      if not Value.Api_Key.Is_Null then
         Into.Write_Entity ("apiKey", Value.Api_Key);
      end if;
      if not Value.Api_Username.Is_Null then
         Into.Write_Entity ("apiUsername", Value.Api_Username);
      end if;
      if not Value.Encrypted_Password.Is_Null then
         Into.Write_Entity ("EncryptedPassword", Value.Encrypted_Password);
      end if;
      if not Value.Login.Is_Null then
         Into.Write_Entity ("Login", Value.Login);
      end if;
      if not Value.Api_User_Adnsf.Is_Null then
         Into.Write_Entity ("apiUser_adnsf", Value.Api_User_Adnsf);
      end if;
      if not Value.Api_Pass.Is_Null then
         Into.Write_Entity ("apiPass", Value.Api_Pass);
      end if;
      if not Value.Private_Key.Is_Null then
         Into.Write_Entity ("privateKey", Value.Private_Key);
      end if;
      if not Value.App_Token.Is_Null then
         Into.Write_Entity ("appToken", Value.App_Token);
      end if;
      if not Value.Etsy_Keystring.Is_Null then
         Into.Write_Entity ("etsy_keystring", Value.Etsy_Keystring);
      end if;
      if not Value.Etsy_Shared_Secret.Is_Null then
         Into.Write_Entity ("etsy_shared_secret", Value.Etsy_Shared_Secret);
      end if;
      if not Value.Token_Secret.Is_Null then
         Into.Write_Entity ("tokenSecret", Value.Token_Secret);
      end if;
      if not Value.Etsy_Client_Id.Is_Null then
         Into.Write_Entity ("etsy_client_id", Value.Etsy_Client_Id);
      end if;
      if not Value.Etsy_Refresh_Token.Is_Null then
         Into.Write_Entity ("etsy_refresh_token", Value.Etsy_Refresh_Token);
      end if;
      if not Value.Ebay_Client_Id.Is_Null then
         Into.Write_Entity ("ebay_client_id", Value.Ebay_Client_Id);
      end if;
      if not Value.Ebay_Client_Secret.Is_Null then
         Into.Write_Entity ("ebay_client_secret", Value.Ebay_Client_Secret);
      end if;
      if not Value.Ebay_Runame.Is_Null then
         Into.Write_Entity ("ebay_runame", Value.Ebay_Runame);
      end if;
      if not Value.Ebay_Access_Token.Is_Null then
         Into.Write_Entity ("ebay_access_token", Value.Ebay_Access_Token);
      end if;
      if not Value.Ebay_Refresh_Token.Is_Null then
         Into.Write_Entity ("ebay_refresh_token", Value.Ebay_Refresh_Token);
      end if;
      if not Value.Ebay_Environment.Is_Null then
         Into.Write_Entity ("ebay_environment", Value.Ebay_Environment);
      end if;
      if not Value.Ebay_Site_Id.Is_Null then
         Into.Write_Entity ("ebay_site_id", Value.Ebay_Site_Id);
      end if;
      if not Value.Dw_Client_Id.Is_Null then
         Into.Write_Entity ("dw_client_id", Value.Dw_Client_Id);
      end if;
      if not Value.Dw_Api_Pass.Is_Null then
         Into.Write_Entity ("dw_api_pass", Value.Dw_Api_Pass);
      end if;
      if not Value.Demandware_User_Name.Is_Null then
         Into.Write_Entity ("demandware_user_name", Value.Demandware_User_Name);
      end if;
      if not Value.Demandware_User_Password.Is_Null then
         Into.Write_Entity ("demandware_user_password", Value.Demandware_User_Password);
      end if;
      Into.Write_Entity ("store_id", Value.Store_Id);
      if not Value.Seller_Id.Is_Null then
         Into.Write_Entity ("seller_id", Value.Seller_Id);
      end if;
      if not Value.Environment.Is_Null then
         Into.Write_Entity ("environment", Value.Environment);
      end if;
      if not Value.Hybris_Client_Id.Is_Null then
         Into.Write_Entity ("hybris_client_id", Value.Hybris_Client_Id);
      end if;
      if not Value.Hybris_Client_Secret.Is_Null then
         Into.Write_Entity ("hybris_client_secret", Value.Hybris_Client_Secret);
      end if;
      if not Value.Hybris_Username.Is_Null then
         Into.Write_Entity ("hybris_username", Value.Hybris_Username);
      end if;
      if not Value.Hybris_Password.Is_Null then
         Into.Write_Entity ("hybris_password", Value.Hybris_Password);
      end if;
      Serialize (Into, "hybris_websites", Value.Hybris_Websites);
      if not Value.Walmart_Client_Id.Is_Null then
         Into.Write_Entity ("walmart_client_id", Value.Walmart_Client_Id);
      end if;
      if not Value.Walmart_Client_Secret.Is_Null then
         Into.Write_Entity ("walmart_client_secret", Value.Walmart_Client_Secret);
      end if;
      if not Value.Walmart_Environment.Is_Null then
         Into.Write_Entity ("walmart_environment", Value.Walmart_Environment);
      end if;
      if not Value.Walmart_Channel_Type.Is_Null then
         Into.Write_Entity ("walmart_channel_type", Value.Walmart_Channel_Type);
      end if;
      if not Value.Walmart_Region.Is_Null then
         Into.Write_Entity ("walmart_region", Value.Walmart_Region);
      end if;
      if not Value.Lightspeed_Api_Key.Is_Null then
         Into.Write_Entity ("lightspeed_api_key", Value.Lightspeed_Api_Key);
      end if;
      if not Value.Lightspeed_Api_Secret.Is_Null then
         Into.Write_Entity ("lightspeed_api_secret", Value.Lightspeed_Api_Secret);
      end if;
      if not Value.Shoplazza_Access_Token.Is_Null then
         Into.Write_Entity ("shoplazza_access_token", Value.Shoplazza_Access_Token);
      end if;
      if not Value.Shoplazza_Shared_Secret.Is_Null then
         Into.Write_Entity ("shoplazza_shared_secret", Value.Shoplazza_Shared_Secret);
      end if;
      if not Value.Shopware_Access_Key.Is_Null then
         Into.Write_Entity ("shopware_access_key", Value.Shopware_Access_Key);
      end if;
      if not Value.Shopware_Api_Key.Is_Null then
         Into.Write_Entity ("shopware_api_key", Value.Shopware_Api_Key);
      end if;
      if not Value.Shopware_Api_Secret.Is_Null then
         Into.Write_Entity ("shopware_api_secret", Value.Shopware_Api_Secret);
      end if;
      if not Value.Commercehq_Api_Key.Is_Null then
         Into.Write_Entity ("commercehq_api_key", Value.Commercehq_Api_Key);
      end if;
      if not Value.Commercehq_Api_Password.Is_Null then
         Into.Write_Entity ("commercehq_api_password", Value.Commercehq_Api_Password);
      end if;
      if not Value.P_3dcart_Private_Key.Is_Null then
         Into.Write_Entity ("3dcart_private_key", Value.P_3dcart_Private_Key);
      end if;
      if not Value.P_3dcart_Access_Token.Is_Null then
         Into.Write_Entity ("3dcart_access_token", Value.P_3dcart_Access_Token);
      end if;
      if not Value.Wc_Consumer_Key.Is_Null then
         Into.Write_Entity ("wc_consumer_key", Value.Wc_Consumer_Key);
      end if;
      if not Value.Wc_Consumer_Secret.Is_Null then
         Into.Write_Entity ("wc_consumer_secret", Value.Wc_Consumer_Secret);
      end if;
      if not Value.Magento_Consumer_Key.Is_Null then
         Into.Write_Entity ("magento_consumer_key", Value.Magento_Consumer_Key);
      end if;
      if not Value.Magento_Consumer_Secret.Is_Null then
         Into.Write_Entity ("magento_consumer_secret", Value.Magento_Consumer_Secret);
      end if;
      if not Value.Magento_Access_Token.Is_Null then
         Into.Write_Entity ("magento_access_token", Value.Magento_Access_Token);
      end if;
      if not Value.Magento_Token_Secret.Is_Null then
         Into.Write_Entity ("magento_token_secret", Value.Magento_Token_Secret);
      end if;
      if not Value.Prestashop_Webservice_Key.Is_Null then
         Into.Write_Entity ("prestashop_webservice_key", Value.Prestashop_Webservice_Key);
      end if;
      Into.Write_Entity ("wix_app_id", Value.Wix_App_Id);
      Into.Write_Entity ("wix_app_secret_key", Value.Wix_App_Secret_Key);
      if not Value.Wix_Instance_Id.Is_Null then
         Into.Write_Entity ("wix_instance_id", Value.Wix_Instance_Id);
      end if;
      if not Value.Wix_Refresh_Token.Is_Null then
         Into.Write_Entity ("wix_refresh_token", Value.Wix_Refresh_Token);
      end if;
      if not Value.Mercado_Libre_App_Id.Is_Null then
         Into.Write_Entity ("mercado_libre_app_id", Value.Mercado_Libre_App_Id);
      end if;
      if not Value.Mercado_Libre_App_Secret_Key.Is_Null then
         Into.Write_Entity ("mercado_libre_app_secret_key", Value.Mercado_Libre_App_Secret_Key);
      end if;
      if not Value.Mercado_Libre_Refresh_Token.Is_Null then
         Into.Write_Entity ("mercado_libre_refresh_token", Value.Mercado_Libre_Refresh_Token);
      end if;
      if not Value.Zid_Client_Id.Is_Null then
         Into.Write_Entity ("zid_client_id", Value.Zid_Client_Id);
      end if;
      if not Value.Zid_Client_Secret.Is_Null then
         Into.Write_Entity ("zid_client_secret", Value.Zid_Client_Secret);
      end if;
      if not Value.Zid_Access_Token.Is_Null then
         Into.Write_Entity ("zid_access_token", Value.Zid_Access_Token);
      end if;
      if not Value.Zid_Authorization.Is_Null then
         Into.Write_Entity ("zid_authorization", Value.Zid_Authorization);
      end if;
      if not Value.Zid_Refresh_Token.Is_Null then
         Into.Write_Entity ("zid_refresh_token", Value.Zid_Refresh_Token);
      end if;
      if not Value.Flipkart_Client_Id.Is_Null then
         Into.Write_Entity ("flipkart_client_id", Value.Flipkart_Client_Id);
      end if;
      if not Value.Flipkart_Client_Secret.Is_Null then
         Into.Write_Entity ("flipkart_client_secret", Value.Flipkart_Client_Secret);
      end if;
      if not Value.Allegro_Client_Id.Is_Null then
         Into.Write_Entity ("allegro_client_id", Value.Allegro_Client_Id);
      end if;
      if not Value.Allegro_Client_Secret.Is_Null then
         Into.Write_Entity ("allegro_client_secret", Value.Allegro_Client_Secret);
      end if;
      if not Value.Allegro_Access_Token.Is_Null then
         Into.Write_Entity ("allegro_access_token", Value.Allegro_Access_Token);
      end if;
      if not Value.Allegro_Refresh_Token.Is_Null then
         Into.Write_Entity ("allegro_refresh_token", Value.Allegro_Refresh_Token);
      end if;
      if not Value.Allegro_Environment.Is_Null then
         Into.Write_Entity ("allegro_environment", Value.Allegro_Environment);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartCreate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartCreate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "cart_id", Value.Cart_Id);
      Swagger.Streams.Deserialize (Object, "store_url", Value.Store_Url);
      Swagger.Streams.Deserialize (Object, "bridge_url", Value.Bridge_Url);
      Swagger.Streams.Deserialize (Object, "store_root", Value.Store_Root);
      Swagger.Streams.Deserialize (Object, "store_key", Value.Store_Key);
      Swagger.Streams.Deserialize (Object, "shared_secret", Value.Shared_Secret);
      Swagger.Streams.Deserialize (Object, "validate_version", Value.Validate_Version);
      Swagger.Streams.Deserialize (Object, "verify", Value.Verify);
      Swagger.Streams.Deserialize (Object, "db_tables_prefix", Value.Db_Tables_Prefix);
      Swagger.Streams.Deserialize (Object, "user_agent", Value.User_Agent);
      Swagger.Streams.Deserialize (Object, "ftp_host", Value.Ftp_Host);
      Swagger.Streams.Deserialize (Object, "ftp_user", Value.Ftp_User);
      Swagger.Streams.Deserialize (Object, "ftp_password", Value.Ftp_Password);
      Swagger.Streams.Deserialize (Object, "ftp_port", Value.Ftp_Port);
      Swagger.Streams.Deserialize (Object, "ftp_store_dir", Value.Ftp_Store_Dir);
      Swagger.Streams.Deserialize (Object, "apiKey_3dcart", Value.Api_Key_3dcart);
      Swagger.Streams.Deserialize (Object, "AdminAccount", Value.Admin_Account);
      Swagger.Streams.Deserialize (Object, "ApiPath", Value.Api_Path);
      Swagger.Streams.Deserialize (Object, "ApiKey_Bigcommerce", Value.Api_Key_Bigcommerce);
      Swagger.Streams.Deserialize (Object, "client_id", Value.Client_Id);
      Swagger.Streams.Deserialize (Object, "accessToken", Value.Access_Token);
      Swagger.Streams.Deserialize (Object, "context", Value.Context);
      Swagger.Streams.Deserialize (Object, "access_token", Value.Access_Token);
      Swagger.Streams.Deserialize (Object, "apiKey_shopify", Value.Api_Key_Shopify);
      Swagger.Streams.Deserialize (Object, "apiPassword", Value.Api_Password);
      Swagger.Streams.Deserialize (Object, "accessToken_shopify", Value.Access_Token_Shopify);
      Swagger.Streams.Deserialize (Object, "apiKey", Value.Api_Key);
      Swagger.Streams.Deserialize (Object, "apiUsername", Value.Api_Username);
      Swagger.Streams.Deserialize (Object, "EncryptedPassword", Value.Encrypted_Password);
      Swagger.Streams.Deserialize (Object, "Login", Value.Login);
      Swagger.Streams.Deserialize (Object, "apiUser_adnsf", Value.Api_User_Adnsf);
      Swagger.Streams.Deserialize (Object, "apiPass", Value.Api_Pass);
      Swagger.Streams.Deserialize (Object, "privateKey", Value.Private_Key);
      Swagger.Streams.Deserialize (Object, "appToken", Value.App_Token);
      Swagger.Streams.Deserialize (Object, "etsy_keystring", Value.Etsy_Keystring);
      Swagger.Streams.Deserialize (Object, "etsy_shared_secret", Value.Etsy_Shared_Secret);
      Swagger.Streams.Deserialize (Object, "tokenSecret", Value.Token_Secret);
      Swagger.Streams.Deserialize (Object, "etsy_client_id", Value.Etsy_Client_Id);
      Swagger.Streams.Deserialize (Object, "etsy_refresh_token", Value.Etsy_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "ebay_client_id", Value.Ebay_Client_Id);
      Swagger.Streams.Deserialize (Object, "ebay_client_secret", Value.Ebay_Client_Secret);
      Swagger.Streams.Deserialize (Object, "ebay_runame", Value.Ebay_Runame);
      Swagger.Streams.Deserialize (Object, "ebay_access_token", Value.Ebay_Access_Token);
      Swagger.Streams.Deserialize (Object, "ebay_refresh_token", Value.Ebay_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "ebay_environment", Value.Ebay_Environment);
      Swagger.Streams.Deserialize (Object, "ebay_site_id", Value.Ebay_Site_Id);
      Swagger.Streams.Deserialize (Object, "dw_client_id", Value.Dw_Client_Id);
      Swagger.Streams.Deserialize (Object, "dw_api_pass", Value.Dw_Api_Pass);
      Swagger.Streams.Deserialize (Object, "demandware_user_name", Value.Demandware_User_Name);
      Swagger.Streams.Deserialize (Object, "demandware_user_password", Value.Demandware_User_Password);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "seller_id", Value.Seller_Id);
      Swagger.Streams.Deserialize (Object, "environment", Value.Environment);
      Swagger.Streams.Deserialize (Object, "hybris_client_id", Value.Hybris_Client_Id);
      Swagger.Streams.Deserialize (Object, "hybris_client_secret", Value.Hybris_Client_Secret);
      Swagger.Streams.Deserialize (Object, "hybris_username", Value.Hybris_Username);
      Swagger.Streams.Deserialize (Object, "hybris_password", Value.Hybris_Password);
      Deserialize (Object, "hybris_websites", Value.Hybris_Websites);
      Swagger.Streams.Deserialize (Object, "walmart_client_id", Value.Walmart_Client_Id);
      Swagger.Streams.Deserialize (Object, "walmart_client_secret", Value.Walmart_Client_Secret);
      Swagger.Streams.Deserialize (Object, "walmart_environment", Value.Walmart_Environment);
      Swagger.Streams.Deserialize (Object, "walmart_channel_type", Value.Walmart_Channel_Type);
      Swagger.Streams.Deserialize (Object, "walmart_region", Value.Walmart_Region);
      Swagger.Streams.Deserialize (Object, "lightspeed_api_key", Value.Lightspeed_Api_Key);
      Swagger.Streams.Deserialize (Object, "lightspeed_api_secret", Value.Lightspeed_Api_Secret);
      Swagger.Streams.Deserialize (Object, "shoplazza_access_token", Value.Shoplazza_Access_Token);
      Swagger.Streams.Deserialize (Object, "shoplazza_shared_secret", Value.Shoplazza_Shared_Secret);
      Swagger.Streams.Deserialize (Object, "shopware_access_key", Value.Shopware_Access_Key);
      Swagger.Streams.Deserialize (Object, "shopware_api_key", Value.Shopware_Api_Key);
      Swagger.Streams.Deserialize (Object, "shopware_api_secret", Value.Shopware_Api_Secret);
      Swagger.Streams.Deserialize (Object, "commercehq_api_key", Value.Commercehq_Api_Key);
      Swagger.Streams.Deserialize (Object, "commercehq_api_password", Value.Commercehq_Api_Password);
      Swagger.Streams.Deserialize (Object, "3dcart_private_key", Value.P_3dcart_Private_Key);
      Swagger.Streams.Deserialize (Object, "3dcart_access_token", Value.P_3dcart_Access_Token);
      Swagger.Streams.Deserialize (Object, "wc_consumer_key", Value.Wc_Consumer_Key);
      Swagger.Streams.Deserialize (Object, "wc_consumer_secret", Value.Wc_Consumer_Secret);
      Swagger.Streams.Deserialize (Object, "magento_consumer_key", Value.Magento_Consumer_Key);
      Swagger.Streams.Deserialize (Object, "magento_consumer_secret", Value.Magento_Consumer_Secret);
      Swagger.Streams.Deserialize (Object, "magento_access_token", Value.Magento_Access_Token);
      Swagger.Streams.Deserialize (Object, "magento_token_secret", Value.Magento_Token_Secret);
      Swagger.Streams.Deserialize (Object, "prestashop_webservice_key", Value.Prestashop_Webservice_Key);
      Swagger.Streams.Deserialize (Object, "wix_app_id", Value.Wix_App_Id);
      Swagger.Streams.Deserialize (Object, "wix_app_secret_key", Value.Wix_App_Secret_Key);
      Swagger.Streams.Deserialize (Object, "wix_instance_id", Value.Wix_Instance_Id);
      Swagger.Streams.Deserialize (Object, "wix_refresh_token", Value.Wix_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "mercado_libre_app_id", Value.Mercado_Libre_App_Id);
      Swagger.Streams.Deserialize (Object, "mercado_libre_app_secret_key", Value.Mercado_Libre_App_Secret_Key);
      Swagger.Streams.Deserialize (Object, "mercado_libre_refresh_token", Value.Mercado_Libre_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "zid_client_id", Value.Zid_Client_Id);
      Swagger.Streams.Deserialize (Object, "zid_client_secret", Value.Zid_Client_Secret);
      Swagger.Streams.Deserialize (Object, "zid_access_token", Value.Zid_Access_Token);
      Swagger.Streams.Deserialize (Object, "zid_authorization", Value.Zid_Authorization);
      Swagger.Streams.Deserialize (Object, "zid_refresh_token", Value.Zid_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "flipkart_client_id", Value.Flipkart_Client_Id);
      Swagger.Streams.Deserialize (Object, "flipkart_client_secret", Value.Flipkart_Client_Secret);
      Swagger.Streams.Deserialize (Object, "allegro_client_id", Value.Allegro_Client_Id);
      Swagger.Streams.Deserialize (Object, "allegro_client_secret", Value.Allegro_Client_Secret);
      Swagger.Streams.Deserialize (Object, "allegro_access_token", Value.Allegro_Access_Token);
      Swagger.Streams.Deserialize (Object, "allegro_refresh_token", Value.Allegro_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "allegro_environment", Value.Allegro_Environment);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartCreate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartCreate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartDelete200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartDelete200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartDelete200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartDelete200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartDelete200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartDisconnect200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartDisconnect200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartDisconnect200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartDisconnect200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartDisconnect200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartGiftcardAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartGiftcardAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartGiftcardAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartGiftcardAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartGiftcardAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartGiftcardCount200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartGiftcardCount200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartGiftcardCount200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartGiftcardCount200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartGiftcardCount200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Cart_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      if not Value.Version.Is_Null then
         Into.Write_Entity ("version", Value.Version);
      end if;
      if not Value.Db_Prefix.Is_Null then
         Into.Write_Entity ("db_prefix", Value.Db_Prefix);
      end if;
      Serialize (Into, "stores_info", Value.Stores_Info);
      Serialize (Into, "warehouses", Value.Warehouses);
      Serialize (Into, "shipping_zones", Value.Shipping_Zones);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Cart_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Cart_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "version", Value.Version);
      Swagger.Streams.Deserialize (Object, "db_prefix", Value.Db_Prefix);
      Deserialize (Object, "stores_info", Value.Stores_Info);
      Deserialize (Object, "warehouses", Value.Warehouses);
      Deserialize (Object, "shipping_zones", Value.Shipping_Zones);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Cart_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Cart_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartInfo200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartInfo200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartInfo200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartInfo200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartInfo200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartList200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "supported_carts", Value.Supported_Carts);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartList200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartList200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "supported_carts", Value.Supported_Carts);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartList200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartList200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartMethods200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartMethods200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartMethods200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartMethods200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartMethods200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PluginList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.All_Plugins.Is_Null then
         Into.Write_Entity ("all_plugins", Value.All_Plugins);
      end if;
      Serialize (Into, "plugins", Value.Plugins);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PluginList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PluginList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "all_plugins", Value.All_Plugins);
      Deserialize (Object, "plugins", Value.Plugins);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PluginList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PluginList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartPluginList200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.All_Plugins.Is_Null then
         Into.Write_Entity ("all_plugins", Value.All_Plugins);
      end if;
      Serialize (Into, "plugins", Value.Plugins);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartPluginList200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartPluginList200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "all_plugins", Value.All_Plugins);
      Deserialize (Object, "plugins", Value.Plugins);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartPluginList200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartPluginList200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartPluginList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartPluginList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartPluginList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartPluginList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartPluginList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartScriptAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartScriptAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartScriptAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartScriptAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartScriptAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartShippingMethod_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Handling_Fee.Is_Null then
         Into.Write_Entity ("handling_fee", Value.Handling_Fee);
      end if;
      if not Value.Handling_Enabled.Is_Null then
         Into.Write_Entity ("handling_enabled", Value.Handling_Enabled);
      end if;
      if not Value.Handling_Type.Is_Null then
         Into.Write_Entity ("handling_type", Value.Handling_Type);
      end if;
      if not Value.Default_Price.Is_Null then
         Into.Write_Entity ("default_price", Value.Default_Price);
      end if;
      if not Value.Default_Price_Type.Is_Null then
         Into.Write_Entity ("default_price_type", Value.Default_Price_Type);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Enabled.Is_Null then
         Into.Write_Entity ("enabled", Value.Enabled);
      end if;
      if not Value.Min_Order_Amount.Is_Null then
         Into.Write_Entity ("min_order_amount", Value.Min_Order_Amount);
      end if;
      Serialize (Into, "rates", Value.Rates);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartShippingMethod_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartShippingMethod_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "handling_fee", Value.Handling_Fee);
      Swagger.Streams.Deserialize (Object, "handling_enabled", Value.Handling_Enabled);
      Swagger.Streams.Deserialize (Object, "handling_type", Value.Handling_Type);
      Swagger.Streams.Deserialize (Object, "default_price", Value.Default_Price);
      Swagger.Streams.Deserialize (Object, "default_price_type", Value.Default_Price_Type);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "enabled", Value.Enabled);
      Swagger.Streams.Deserialize (Object, "min_order_amount", Value.Min_Order_Amount);
      Deserialize (Object, "rates", Value.Rates);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartShippingMethod_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartShippingMethod_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartValidate200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartValidate200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartValidate200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartValidate200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartValidate200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerAddress_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.First_Name.Is_Null then
         Into.Write_Entity ("first_name", Value.First_Name);
      end if;
      if not Value.Last_Name.Is_Null then
         Into.Write_Entity ("last_name", Value.Last_Name);
      end if;
      if not Value.Postcode.Is_Null then
         Into.Write_Entity ("postcode", Value.Postcode);
      end if;
      if not Value.Address_1.Is_Null then
         Into.Write_Entity ("address1", Value.Address_1);
      end if;
      if not Value.Address_2.Is_Null then
         Into.Write_Entity ("address2", Value.Address_2);
      end if;
      if not Value.Phone.Is_Null then
         Into.Write_Entity ("phone", Value.Phone);
      end if;
      if not Value.Phone_Mobile.Is_Null then
         Into.Write_Entity ("phone_mobile", Value.Phone_Mobile);
      end if;
      if not Value.City.Is_Null then
         Into.Write_Entity ("city", Value.City);
      end if;
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "state", Value.State);
      if not Value.Company.Is_Null then
         Into.Write_Entity ("company", Value.Company);
      end if;
      if not Value.Fax.Is_Null then
         Into.Write_Entity ("fax", Value.Fax);
      end if;
      if not Value.Website.Is_Null then
         Into.Write_Entity ("website", Value.Website);
      end if;
      if not Value.Gender.Is_Null then
         Into.Write_Entity ("gender", Value.Gender);
      end if;
      if not Value.Region.Is_Null then
         Into.Write_Entity ("region", Value.Region);
      end if;
      if not Value.Default.Is_Null then
         Into.Write_Entity ("default", Value.Default);
      end if;
      if not Value.Tax_Id.Is_Null then
         Into.Write_Entity ("tax_id", Value.Tax_Id);
      end if;
      if not Value.Identification_Number.Is_Null then
         Into.Write_Entity ("identification_number", Value.Identification_Number);
      end if;
      if not Value.Alias.Is_Null then
         Into.Write_Entity ("alias", Value.Alias);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerAddress_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerAddress_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "first_name", Value.First_Name);
      Swagger.Streams.Deserialize (Object, "last_name", Value.Last_Name);
      Swagger.Streams.Deserialize (Object, "postcode", Value.Postcode);
      Swagger.Streams.Deserialize (Object, "address1", Value.Address_1);
      Swagger.Streams.Deserialize (Object, "address2", Value.Address_2);
      Swagger.Streams.Deserialize (Object, "phone", Value.Phone);
      Swagger.Streams.Deserialize (Object, "phone_mobile", Value.Phone_Mobile);
      Swagger.Streams.Deserialize (Object, "city", Value.City);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "state", Value.State);
      Swagger.Streams.Deserialize (Object, "company", Value.Company);
      Swagger.Streams.Deserialize (Object, "fax", Value.Fax);
      Swagger.Streams.Deserialize (Object, "website", Value.Website);
      Swagger.Streams.Deserialize (Object, "gender", Value.Gender);
      Swagger.Streams.Deserialize (Object, "region", Value.Region);
      Swagger.Streams.Deserialize (Object, "default", Value.Default);
      Swagger.Streams.Deserialize (Object, "tax_id", Value.Tax_Id);
      Swagger.Streams.Deserialize (Object, "identification_number", Value.Identification_Number);
      Swagger.Streams.Deserialize (Object, "alias", Value.Alias);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerAddress_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerAddress_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartWarehouse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Avail.Is_Null then
         Into.Write_Entity ("avail", Value.Avail);
      end if;
      Serialize (Into, "address", Value.Address);
      Serialize (Into, "carriers_ids", Value.Carriers_Ids);
      Serialize (Into, "stores_ids", Value.Stores_Ids);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartWarehouse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartWarehouse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "avail", Value.Avail);
      Deserialize (Object, "address", Value.Address);
      Swagger.Streams.Deserialize (Object, "carriers_ids", Value.Carriers_Ids);
      Swagger.Streams.Deserialize (Object, "stores_ids", Value.Stores_Ids);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartWarehouse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartWarehouse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CouponCondition_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Entity.Is_Null then
         Into.Write_Entity ("entity", Value.Entity);
      end if;
      if not Value.Match_Items.Is_Null then
         Into.Write_Entity ("match_items", Value.Match_Items);
      end if;
      if not Value.Key.Is_Null then
         Into.Write_Entity ("key", Value.Key);
      end if;
      if not Value.Operator.Is_Null then
         Into.Write_Entity ("operator", Value.Operator);
      end if;
      if not Value.Value.Is_Null then
         Into.Write_Entity ("value", Value.Value);
      end if;
      if not Value.Logic_Operator.Is_Null then
         Into.Write_Entity ("logic_operator", Value.Logic_Operator);
      end if;
      Serialize (Into, "sub-conditions", Value.Sub_Conditions);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CouponCondition_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CouponCondition_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "entity", Value.Entity);
      Swagger.Streams.Deserialize (Object, "match_items", Value.Match_Items);
      Swagger.Streams.Deserialize (Object, "key", Value.Key);
      Swagger.Streams.Deserialize (Object, "operator", Value.Operator);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "logic_operator", Value.Logic_Operator);
      Deserialize (Object, "sub-conditions", Value.Sub_Conditions);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CouponCondition_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CouponCondition_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogPriceRuleAction_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Scope.Is_Null then
         Into.Write_Entity ("scope", Value.Scope);
      end if;
      if not Value.Apply_To.Is_Null then
         Into.Write_Entity ("apply_to", Value.Apply_To);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      Serialize (Into, "quantity", Value.Quantity);
      Serialize (Into, "value", Value.Value);
      if not Value.Currency_Code.Is_Null then
         Into.Write_Entity ("currency_code", Value.Currency_Code);
      end if;
      if not Value.Include_Tax.Is_Null then
         Into.Write_Entity ("include_tax", Value.Include_Tax);
      end if;
      Serialize (Into, "conditions", Value.Conditions);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogPriceRuleAction_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogPriceRuleAction_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "scope", Value.Scope);
      Swagger.Streams.Deserialize (Object, "apply_to", Value.Apply_To);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "currency_code", Value.Currency_Code);
      Swagger.Streams.Deserialize (Object, "include_tax", Value.Include_Tax);
      Deserialize (Object, "conditions", Value.Conditions);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogPriceRuleAction_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogPriceRuleAction_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryAddBatch200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryAddBatch200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryAddBatch200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryAddBatch200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryAddBatch200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryAddBatchPayloadInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      if not Value.Avail.Is_Null then
         Into.Write_Entity ("avail", Value.Avail);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Meta_Title.Is_Null then
         Into.Write_Entity ("meta_title", Value.Meta_Title);
      end if;
      if not Value.Meta_Description.Is_Null then
         Into.Write_Entity ("meta_description", Value.Meta_Description);
      end if;
      Serialize (Into, "meta_keywords", Value.Meta_Keywords);
      if not Value.Parent_Id.Is_Null then
         Into.Write_Entity ("parent_id", Value.Parent_Id);
      end if;
      if not Value.Sort_Order.Is_Null then
         Into.Write_Entity ("sort_order", Value.Sort_Order);
      end if;
      if not Value.Seo_Url.Is_Null then
         Into.Write_Entity ("seo_url", Value.Seo_Url);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      Serialize (Into, "images", Value.Images);
      Serialize (Into, "stores_ids", Value.Stores_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryAddBatchPayloadInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryAddBatchPayloadInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "avail", Value.Avail);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "meta_title", Value.Meta_Title);
      Swagger.Streams.Deserialize (Object, "meta_description", Value.Meta_Description);
      Swagger.Streams.Deserialize (Object, "meta_keywords", Value.Meta_Keywords);
      Swagger.Streams.Deserialize (Object, "parent_id", Value.Parent_Id);
      Swagger.Streams.Deserialize (Object, "sort_order", Value.Sort_Order);
      Swagger.Streams.Deserialize (Object, "seo_url", Value.Seo_Url);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Deserialize (Object, "images", Value.Images);
      Swagger.Streams.Deserialize (Object, "stores_ids", Value.Stores_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryAddBatchPayloadInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryAddBatchPayloadInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryAddBatch_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "payload", Value.Payload);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryAddBatch_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryAddBatch_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "payload", Value.Payload);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryAddBatch_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryAddBatch_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryCount200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryCount200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryCount200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryCount200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryCount200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryDelete200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryDelete200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryDelete200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryDelete200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryDelete200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryFind200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "category", Value.Category);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryFind200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryFind200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "category", Value.Category);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryFind200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryFind200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryFind200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryFind200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryFind200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryFind200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryFind200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryImageAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryImageAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryImageAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryImageAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryImageAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Category_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Parent_Id.Is_Null then
         Into.Write_Entity ("parent_id", Value.Parent_Id);
      end if;
      Serialize (Into, "created_at", Value.Created_At);
      Serialize (Into, "modified_at", Value.Modified_At);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Short_Description.Is_Null then
         Into.Write_Entity ("short_description", Value.Short_Description);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      Serialize (Into, "stores_ids", Value.Stores_Ids);
      if not Value.Keywords.Is_Null then
         Into.Write_Entity ("keywords", Value.Keywords);
      end if;
      if not Value.Meta_Description.Is_Null then
         Into.Write_Entity ("meta_description", Value.Meta_Description);
      end if;
      if not Value.Meta_Title.Is_Null then
         Into.Write_Entity ("meta_title", Value.Meta_Title);
      end if;
      if not Value.Avail.Is_Null then
         Into.Write_Entity ("avail", Value.Avail);
      end if;
      if not Value.Path.Is_Null then
         Into.Write_Entity ("path", Value.Path);
      end if;
      if not Value.Seo_Url.Is_Null then
         Into.Write_Entity ("seo_url", Value.Seo_Url);
      end if;
      if not Value.Sort_Order.Is_Null then
         Into.Write_Entity ("sort_order", Value.Sort_Order);
      end if;
      Serialize (Into, "images", Value.Images);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Category_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Category_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "parent_id", Value.Parent_Id);
      Deserialize (Object, "created_at", Value.Created_At);
      Deserialize (Object, "modified_at", Value.Modified_At);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "short_description", Value.Short_Description);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "stores_ids", Value.Stores_Ids);
      Swagger.Streams.Deserialize (Object, "keywords", Value.Keywords);
      Swagger.Streams.Deserialize (Object, "meta_description", Value.Meta_Description);
      Swagger.Streams.Deserialize (Object, "meta_title", Value.Meta_Title);
      Swagger.Streams.Deserialize (Object, "avail", Value.Avail);
      Swagger.Streams.Deserialize (Object, "path", Value.Path);
      Swagger.Streams.Deserialize (Object, "seo_url", Value.Seo_Url);
      Swagger.Streams.Deserialize (Object, "sort_order", Value.Sort_Order);
      Deserialize (Object, "images", Value.Images);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Category_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Category_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryInfo200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryInfo200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryInfo200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryInfo200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryInfo200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CouponAction_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Scope.Is_Null then
         Into.Write_Entity ("scope", Value.Scope);
      end if;
      if not Value.Apply_To.Is_Null then
         Into.Write_Entity ("apply_to", Value.Apply_To);
      end if;
      Serialize (Into, "amount", Value.Amount);
      if not Value.Currency_Code.Is_Null then
         Into.Write_Entity ("currency_code", Value.Currency_Code);
      end if;
      if not Value.Include_Tax.Is_Null then
         Into.Write_Entity ("include_tax", Value.Include_Tax);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      Serialize (Into, "discounted_quantity", Value.Discounted_Quantity);
      if not Value.Discount_Quantity_Step.Is_Null then
         Into.Write_Entity ("discount_quantity_step", Value.Discount_Quantity_Step);
      end if;
      if not Value.Logic_Operator.Is_Null then
         Into.Write_Entity ("logic_operator", Value.Logic_Operator);
      end if;
      Serialize (Into, "conditions", Value.Conditions);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CouponAction_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CouponAction_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "scope", Value.Scope);
      Swagger.Streams.Deserialize (Object, "apply_to", Value.Apply_To);
      Swagger.Streams.Deserialize (Object, "amount", Value.Amount);
      Swagger.Streams.Deserialize (Object, "currency_code", Value.Currency_Code);
      Swagger.Streams.Deserialize (Object, "include_tax", Value.Include_Tax);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "discounted_quantity", Value.Discounted_Quantity);
      Swagger.Streams.Deserialize (Object, "discount_quantity_step", Value.Discount_Quantity_Step);
      Swagger.Streams.Deserialize (Object, "logic_operator", Value.Logic_Operator);
      Deserialize (Object, "conditions", Value.Conditions);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CouponAction_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CouponAction_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerAttribute_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Attribute_Id.Is_Null then
         Into.Write_Entity ("attribute_id", Value.Attribute_Id);
      end if;
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      Serialize (Into, "values", Value.Values);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerAttribute_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerAttribute_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "attribute_id", Value.Attribute_Id);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Deserialize (Object, "values", Value.Values);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerAttribute_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerAttribute_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerCount200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerCount200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerCount200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerCount200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerCount200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerDelete200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerDelete200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerDelete200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerDelete200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerDelete200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerFind200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerFind200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerFind200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerFind200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerFind200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerGroupAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerGroupAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerGroupAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerGroupAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerGroupAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Customer_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Email.Is_Null then
         Into.Write_Entity ("email", Value.Email);
      end if;
      if not Value.First_Name.Is_Null then
         Into.Write_Entity ("first_name", Value.First_Name);
      end if;
      if not Value.Last_Name.Is_Null then
         Into.Write_Entity ("last_name", Value.Last_Name);
      end if;
      if not Value.Phone.Is_Null then
         Into.Write_Entity ("phone", Value.Phone);
      end if;
      Serialize (Into, "created_time", Value.Created_Time);
      Serialize (Into, "modified_time", Value.Modified_Time);
      Serialize (Into, "group", Value.Group);
      if not Value.Login.Is_Null then
         Into.Write_Entity ("login", Value.Login);
      end if;
      Serialize (Into, "last_login", Value.Last_Login);
      Serialize (Into, "birth_day", Value.Birth_Day);
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      if not Value.News_Letter_Subscription.Is_Null then
         Into.Write_Entity ("news_letter_subscription", Value.News_Letter_Subscription);
      end if;
      Serialize (Into, "consents", Value.Consents);
      if not Value.Gender.Is_Null then
         Into.Write_Entity ("gender", Value.Gender);
      end if;
      Serialize (Into, "stores_ids", Value.Stores_Ids);
      if not Value.Website.Is_Null then
         Into.Write_Entity ("website", Value.Website);
      end if;
      if not Value.Fax.Is_Null then
         Into.Write_Entity ("fax", Value.Fax);
      end if;
      if not Value.Company.Is_Null then
         Into.Write_Entity ("company", Value.Company);
      end if;
      if not Value.Ip_Address.Is_Null then
         Into.Write_Entity ("ip_address", Value.Ip_Address);
      end if;
      Serialize (Into, "address_book", Value.Address_Book);
      if not Value.Lang_Id.Is_Null then
         Into.Write_Entity ("lang_id", Value.Lang_Id);
      end if;
      if not Value.Orders_Count.Is_Null then
         Into.Write_Entity ("orders_count", Value.Orders_Count);
      end if;
      if not Value.Last_Order_Id.Is_Null then
         Into.Write_Entity ("last_order_id", Value.Last_Order_Id);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Customer_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Customer_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "email", Value.Email);
      Swagger.Streams.Deserialize (Object, "first_name", Value.First_Name);
      Swagger.Streams.Deserialize (Object, "last_name", Value.Last_Name);
      Swagger.Streams.Deserialize (Object, "phone", Value.Phone);
      Deserialize (Object, "created_time", Value.Created_Time);
      Deserialize (Object, "modified_time", Value.Modified_Time);
      Deserialize (Object, "group", Value.Group);
      Swagger.Streams.Deserialize (Object, "login", Value.Login);
      Deserialize (Object, "last_login", Value.Last_Login);
      Deserialize (Object, "birth_day", Value.Birth_Day);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "news_letter_subscription", Value.News_Letter_Subscription);
      Deserialize (Object, "consents", Value.Consents);
      Swagger.Streams.Deserialize (Object, "gender", Value.Gender);
      Swagger.Streams.Deserialize (Object, "stores_ids", Value.Stores_Ids);
      Swagger.Streams.Deserialize (Object, "website", Value.Website);
      Swagger.Streams.Deserialize (Object, "fax", Value.Fax);
      Swagger.Streams.Deserialize (Object, "company", Value.Company);
      Swagger.Streams.Deserialize (Object, "ip_address", Value.Ip_Address);
      Deserialize (Object, "address_book", Value.Address_Book);
      Swagger.Streams.Deserialize (Object, "lang_id", Value.Lang_Id);
      Swagger.Streams.Deserialize (Object, "orders_count", Value.Orders_Count);
      Swagger.Streams.Deserialize (Object, "last_order_id", Value.Last_Order_Id);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Customer_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Customer_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerInfo200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerInfo200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerInfo200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerInfo200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerInfo200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerWishListItem_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Product_Id.Is_Null then
         Into.Write_Entity ("product_id", Value.Product_Id);
      end if;
      if not Value.Child_Id.Is_Null then
         Into.Write_Entity ("child_id", Value.Child_Id);
      end if;
      Serialize (Into, "created_time", Value.Created_Time);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerWishListItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerWishListItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Swagger.Streams.Deserialize (Object, "child_id", Value.Child_Id);
      Deserialize (Object, "created_time", Value.Created_Time);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerWishListItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerWishListItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GiftCard_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Currency_Code.Is_Null then
         Into.Write_Entity ("currency_code", Value.Currency_Code);
      end if;
      Serialize (Into, "amount", Value.Amount);
      Serialize (Into, "initial_amount", Value.Initial_Amount);
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      if not Value.Created_At.Is_Null then
         Into.Write_Entity ("created_at", Value.Created_At);
      end if;
      if not Value.Avail_To.Is_Null then
         Into.Write_Entity ("avail_to", Value.Avail_To);
      end if;
      if not Value.Free_Product_Ids.Is_Null then
         Into.Write_Entity ("free_product_ids", Value.Free_Product_Ids);
      end if;
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      if not Value.Issuer_Email.Is_Null then
         Into.Write_Entity ("issuer_email", Value.Issuer_Email);
      end if;
      if not Value.Recipient_Email.Is_Null then
         Into.Write_Entity ("recipient_email", Value.Recipient_Email);
      end if;
      if not Value.Issuer_Name.Is_Null then
         Into.Write_Entity ("issuer_name", Value.Issuer_Name);
      end if;
      if not Value.Recipient_Name.Is_Null then
         Into.Write_Entity ("recipient_name", Value.Recipient_Name);
      end if;
      Serialize (Into, "usage_history", Value.Usage_History);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GiftCard_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GiftCard_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "currency_code", Value.Currency_Code);
      Swagger.Streams.Deserialize (Object, "amount", Value.Amount);
      Swagger.Streams.Deserialize (Object, "initial_amount", Value.Initial_Amount);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "created_at", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "avail_to", Value.Avail_To);
      Swagger.Streams.Deserialize (Object, "free_product_ids", Value.Free_Product_Ids);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
      Swagger.Streams.Deserialize (Object, "issuer_email", Value.Issuer_Email);
      Swagger.Streams.Deserialize (Object, "recipient_email", Value.Recipient_Email);
      Swagger.Streams.Deserialize (Object, "issuer_name", Value.Issuer_Name);
      Swagger.Streams.Deserialize (Object, "recipient_name", Value.Recipient_Name);
      Deserialize (Object, "usage_history", Value.Usage_History);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GiftCard_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GiftCard_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Image_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Http_Path.Is_Null then
         Into.Write_Entity ("http_path", Value.Http_Path);
      end if;
      if not Value.File_Name.Is_Null then
         Into.Write_Entity ("file_name", Value.File_Name);
      end if;
      if not Value.Mime_Type.Is_Null then
         Into.Write_Entity ("mime-type", Value.Mime_Type);
      end if;
      if not Value.Size.Is_Null then
         Into.Write_Entity ("size", Value.Size);
      end if;
      Serialize (Into, "create_at", Value.Create_At);
      Serialize (Into, "modified_at", Value.Modified_At);
      if not Value.Alt.Is_Null then
         Into.Write_Entity ("alt", Value.Alt);
      end if;
      if not Value.Avail.Is_Null then
         Into.Write_Entity ("avail", Value.Avail);
      end if;
      if not Value.Sort_Order.Is_Null then
         Into.Write_Entity ("sort_order", Value.Sort_Order);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Image_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Image_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "http_path", Value.Http_Path);
      Swagger.Streams.Deserialize (Object, "file_name", Value.File_Name);
      Swagger.Streams.Deserialize (Object, "mime-type", Value.Mime_Type);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
      Deserialize (Object, "create_at", Value.Create_At);
      Deserialize (Object, "modified_at", Value.Modified_At);
      Swagger.Streams.Deserialize (Object, "alt", Value.Alt);
      Swagger.Streams.Deserialize (Object, "avail", Value.Avail);
      Swagger.Streams.Deserialize (Object, "sort_order", Value.Sort_Order);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Image_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Image_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Brand_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Created_Time.Is_Null then
         Into.Write_Entity ("created_time", Value.Created_Time);
      end if;
      if not Value.Modified_Time.Is_Null then
         Into.Write_Entity ("modified_time", Value.Modified_Time);
      end if;
      if not Value.Full_Description.Is_Null then
         Into.Write_Entity ("full_description", Value.Full_Description);
      end if;
      if not Value.Short_Description.Is_Null then
         Into.Write_Entity ("short_description", Value.Short_Description);
      end if;
      Serialize (Into, "stores_ids", Value.Stores_Ids);
      if not Value.Active.Is_Null then
         Into.Write_Entity ("active", Value.Active);
      end if;
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      if not Value.Meta_Title.Is_Null then
         Into.Write_Entity ("meta_title", Value.Meta_Title);
      end if;
      if not Value.Meta_Keywords.Is_Null then
         Into.Write_Entity ("meta_keywords", Value.Meta_Keywords);
      end if;
      if not Value.Meta_Description.Is_Null then
         Into.Write_Entity ("meta_description", Value.Meta_Description);
      end if;
      Serialize (Into, "images", Value.Images);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Brand_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Brand_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
      Swagger.Streams.Deserialize (Object, "modified_time", Value.Modified_Time);
      Swagger.Streams.Deserialize (Object, "full_description", Value.Full_Description);
      Swagger.Streams.Deserialize (Object, "short_description", Value.Short_Description);
      Swagger.Streams.Deserialize (Object, "stores_ids", Value.Stores_Ids);
      Swagger.Streams.Deserialize (Object, "active", Value.Active);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "meta_title", Value.Meta_Title);
      Swagger.Streams.Deserialize (Object, "meta_keywords", Value.Meta_Keywords);
      Swagger.Streams.Deserialize (Object, "meta_description", Value.Meta_Description);
      Deserialize (Object, "images", Value.Images);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Brand_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Brand_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseTaxClassInfoResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Avail.Is_Null then
         Into.Write_Entity ("avail", Value.Avail);
      end if;
      Serialize (Into, "tax", Value.Tax);
      if not Value.Tax_Type.Is_Null then
         Into.Write_Entity ("tax_type", Value.Tax_Type);
      end if;
      Serialize (Into, "created_at", Value.Created_At);
      Serialize (Into, "modified_at", Value.Modified_At);
      Serialize (Into, "tax_rates", Value.Tax_Rates);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseTaxClassInfoResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseTaxClassInfoResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "avail", Value.Avail);
      Swagger.Streams.Deserialize (Object, "tax", Value.Tax);
      Swagger.Streams.Deserialize (Object, "tax_type", Value.Tax_Type);
      Deserialize (Object, "created_at", Value.Created_At);
      Deserialize (Object, "modified_at", Value.Modified_At);
      Deserialize (Object, "tax_rates", Value.Tax_Rates);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseTaxClassInfoResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseTaxClassInfoResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseTaxClassInfo_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseTaxClassInfo_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseTaxClassInfo_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseTaxClassInfo_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseTaxClassInfo_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderCount200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderCount200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderCount200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderCount200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderCount200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderFinancialStatusList200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "order_financial_statuses", Value.Order_Financial_Statuses);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderFinancialStatusList200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderFinancialStatusList200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "order_financial_statuses", Value.Order_Financial_Statuses);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderFinancialStatusList200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderFinancialStatusList200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderFinancialStatusList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderFinancialStatusList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderFinancialStatusList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderFinancialStatusList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderFinancialStatusList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Order_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Order_Id.Is_Null then
         Into.Write_Entity ("order_id", Value.Order_Id);
      end if;
      if not Value.Basket_Id.Is_Null then
         Into.Write_Entity ("basket_id", Value.Basket_Id);
      end if;
      if not Value.Channel_Id.Is_Null then
         Into.Write_Entity ("channel_id", Value.Channel_Id);
      end if;
      Serialize (Into, "customer", Value.Customer);
      Serialize (Into, "create_at", Value.Create_At);
      Serialize (Into, "currency", Value.Currency);
      Serialize (Into, "shipping_address", Value.Shipping_Address);
      Serialize (Into, "billing_address", Value.Billing_Address);
      Serialize (Into, "payment_method", Value.Payment_Method);
      Serialize (Into, "shipping_method", Value.Shipping_Method);
      Serialize (Into, "shipping_methods", Value.Shipping_Methods);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "totals", Value.Totals);
      Serialize (Into, "total", Value.Total);
      Serialize (Into, "discounts", Value.Discounts);
      Serialize (Into, "order_products", Value.Order_Products);
      Serialize (Into, "bundles", Value.Bundles);
      Serialize (Into, "modified_at", Value.Modified_At);
      Serialize (Into, "finished_time", Value.Finished_Time);
      if not Value.Comment.Is_Null then
         Into.Write_Entity ("comment", Value.Comment);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      Serialize (Into, "warehouses_ids", Value.Warehouses_Ids);
      Serialize (Into, "refunds", Value.Refunds);
      if not Value.Gift_Message.Is_Null then
         Into.Write_Entity ("gift_message", Value.Gift_Message);
      end if;
      if not Value.Order_Details_Url.Is_Null then
         Into.Write_Entity ("order_details_url", Value.Order_Details_Url);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Order_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Order_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "order_id", Value.Order_Id);
      Swagger.Streams.Deserialize (Object, "basket_id", Value.Basket_Id);
      Swagger.Streams.Deserialize (Object, "channel_id", Value.Channel_Id);
      Deserialize (Object, "customer", Value.Customer);
      Deserialize (Object, "create_at", Value.Create_At);
      Deserialize (Object, "currency", Value.Currency);
      Deserialize (Object, "shipping_address", Value.Shipping_Address);
      Deserialize (Object, "billing_address", Value.Billing_Address);
      Deserialize (Object, "payment_method", Value.Payment_Method);
      Deserialize (Object, "shipping_method", Value.Shipping_Method);
      Deserialize (Object, "shipping_methods", Value.Shipping_Methods);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "totals", Value.Totals);
      Deserialize (Object, "total", Value.Total);
      Deserialize (Object, "discounts", Value.Discounts);
      Deserialize (Object, "order_products", Value.Order_Products);
      Deserialize (Object, "bundles", Value.Bundles);
      Deserialize (Object, "modified_at", Value.Modified_At);
      Deserialize (Object, "finished_time", Value.Finished_Time);
      Swagger.Streams.Deserialize (Object, "comment", Value.Comment);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "warehouses_ids", Value.Warehouses_Ids);
      Deserialize (Object, "refunds", Value.Refunds);
      Swagger.Streams.Deserialize (Object, "gift_message", Value.Gift_Message);
      Swagger.Streams.Deserialize (Object, "order_details_url", Value.Order_Details_Url);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Order_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Order_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderFind200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "order", Value.Order);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderFind200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderFind200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "order", Value.Order);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderFind200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderFind200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderFind200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderFind200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderFind200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderFind200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderFind200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderFulfillmentStatusList200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "order_fulfillment_statuses", Value.Order_Fulfillment_Statuses);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderFulfillmentStatusList200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderFulfillmentStatusList200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "order_fulfillment_statuses", Value.Order_Fulfillment_Statuses);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderFulfillmentStatusList200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderFulfillmentStatusList200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderFulfillmentStatusList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderFulfillmentStatusList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderFulfillmentStatusList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderFulfillmentStatusList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderFulfillmentStatusList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderInfo200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderInfo200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderInfo200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderInfo200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderInfo200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderItem_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Product_Id.Is_Null then
         Into.Write_Entity ("product_id", Value.Product_Id);
      end if;
      if not Value.Order_Product_Id.Is_Null then
         Into.Write_Entity ("order_product_id", Value.Order_Product_Id);
      end if;
      if not Value.Model.Is_Null then
         Into.Write_Entity ("model", Value.Model);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "price", Value.Price);
      Serialize (Into, "price_inc_tax", Value.Price_Inc_Tax);
      Serialize (Into, "quantity", Value.Quantity);
      Serialize (Into, "discount_amount", Value.Discount_Amount);
      Serialize (Into, "total_price", Value.Total_Price);
      Serialize (Into, "tax_percent", Value.Tax_Percent);
      Serialize (Into, "tax_value", Value.Tax_Value);
      Serialize (Into, "tax_value_after_discount", Value.Tax_Value_After_Discount);
      Serialize (Into, "options", Value.Options);
      if not Value.Variant_Id.Is_Null then
         Into.Write_Entity ("variant_id", Value.Variant_Id);
      end if;
      if not Value.Weight_Unit.Is_Null then
         Into.Write_Entity ("weight_unit", Value.Weight_Unit);
      end if;
      Serialize (Into, "weight", Value.Weight);
      if not Value.Barcode.Is_Null then
         Into.Write_Entity ("barcode", Value.Barcode);
      end if;
      if not Value.Parent_Order_Product_Id.Is_Null then
         Into.Write_Entity ("parent_order_product_id", Value.Parent_Order_Product_Id);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Swagger.Streams.Deserialize (Object, "order_product_id", Value.Order_Product_Id);
      Swagger.Streams.Deserialize (Object, "model", Value.Model);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "price_inc_tax", Value.Price_Inc_Tax);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
      Swagger.Streams.Deserialize (Object, "discount_amount", Value.Discount_Amount);
      Swagger.Streams.Deserialize (Object, "total_price", Value.Total_Price);
      Swagger.Streams.Deserialize (Object, "tax_percent", Value.Tax_Percent);
      Swagger.Streams.Deserialize (Object, "tax_value", Value.Tax_Value);
      Swagger.Streams.Deserialize (Object, "tax_value_after_discount", Value.Tax_Value_After_Discount);
      Deserialize (Object, "options", Value.Options);
      Swagger.Streams.Deserialize (Object, "variant_id", Value.Variant_Id);
      Swagger.Streams.Deserialize (Object, "weight_unit", Value.Weight_Unit);
      Swagger.Streams.Deserialize (Object, "weight", Value.Weight);
      Swagger.Streams.Deserialize (Object, "barcode", Value.Barcode);
      Swagger.Streams.Deserialize (Object, "parent_order_product_id", Value.Parent_Order_Product_Id);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderPreestimateShippingListOrderItemInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("order_item_id", Value.Order_Item_Id);
      if not Value.Order_Item_Model.Is_Null then
         Into.Write_Entity ("order_item_model", Value.Order_Item_Model);
      end if;
      Into.Write_Entity ("order_item_quantity", Value.Order_Item_Quantity);
      Serialize (Into, "order_item_weight", Value.Order_Item_Weight);
      if not Value.Order_Item_Variant_Id.Is_Null then
         Into.Write_Entity ("order_item_variant_id", Value.Order_Item_Variant_Id);
      end if;
      Serialize (Into, "order_item_option", Value.Order_Item_Option);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderPreestimateShippingListOrderItemInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderPreestimateShippingListOrderItemInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "order_item_id", Value.Order_Item_Id);
      Swagger.Streams.Deserialize (Object, "order_item_model", Value.Order_Item_Model);
      Swagger.Streams.Deserialize (Object, "order_item_quantity", Value.Order_Item_Quantity);
      Swagger.Streams.Deserialize (Object, "order_item_weight", Value.Order_Item_Weight);
      Swagger.Streams.Deserialize (Object, "order_item_variant_id", Value.Order_Item_Variant_Id);
      Deserialize (Object, "order_item_option", Value.Order_Item_Option);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderPreestimateShippingListOrderItemInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderPreestimateShippingListOrderItemInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderPreestimateShippingList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Warehouse_Id.Is_Null then
         Into.Write_Entity ("warehouse_id", Value.Warehouse_Id);
      end if;
      if not Value.Customer_Id.Is_Null then
         Into.Write_Entity ("customer_id", Value.Customer_Id);
      end if;
      if not Value.Customer_Email.Is_Null then
         Into.Write_Entity ("customer_email", Value.Customer_Email);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.Shipp_Address_1.Is_Null then
         Into.Write_Entity ("shipp_address_1", Value.Shipp_Address_1);
      end if;
      if not Value.Shipp_City.Is_Null then
         Into.Write_Entity ("shipp_city", Value.Shipp_City);
      end if;
      if not Value.Shipp_Postcode.Is_Null then
         Into.Write_Entity ("shipp_postcode", Value.Shipp_Postcode);
      end if;
      if not Value.Shipp_State.Is_Null then
         Into.Write_Entity ("shipp_state", Value.Shipp_State);
      end if;
      Into.Write_Entity ("shipp_country", Value.Shipp_Country);
      if not Value.Params.Is_Null then
         Into.Write_Entity ("params", Value.Params);
      end if;
      if not Value.Exclude.Is_Null then
         Into.Write_Entity ("exclude", Value.Exclude);
      end if;
      Serialize (Into, "order_item", Value.Order_Item);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderPreestimateShippingList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderPreestimateShippingList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "warehouse_id", Value.Warehouse_Id);
      Swagger.Streams.Deserialize (Object, "customer_id", Value.Customer_Id);
      Swagger.Streams.Deserialize (Object, "customer_email", Value.Customer_Email);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "shipp_address_1", Value.Shipp_Address_1);
      Swagger.Streams.Deserialize (Object, "shipp_city", Value.Shipp_City);
      Swagger.Streams.Deserialize (Object, "shipp_postcode", Value.Shipp_Postcode);
      Swagger.Streams.Deserialize (Object, "shipp_state", Value.Shipp_State);
      Swagger.Streams.Deserialize (Object, "shipp_country", Value.Shipp_Country);
      Swagger.Streams.Deserialize (Object, "params", Value.Params);
      Swagger.Streams.Deserialize (Object, "exclude", Value.Exclude);
      Deserialize (Object, "order_item", Value.Order_Item);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderPreestimateShippingList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderPreestimateShippingList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderRefundAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderRefundAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderRefundAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderRefundAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderRefundAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderRefundAdd_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Order_Id.Is_Null then
         Into.Write_Entity ("order_id", Value.Order_Id);
      end if;
      Serialize (Into, "items", Value.Items);
      Serialize (Into, "total_price", Value.Total_Price);
      Serialize (Into, "shipping_price", Value.Shipping_Price);
      Serialize (Into, "fee_price", Value.Fee_Price);
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      if not Value.Item_Restock.Is_Null then
         Into.Write_Entity ("item_restock", Value.Item_Restock);
      end if;
      if not Value.Send_Notifications.Is_Null then
         Into.Write_Entity ("send_notifications", Value.Send_Notifications);
      end if;
      if not Value.Date.Is_Null then
         Into.Write_Entity ("date", Value.Date);
      end if;
      if not Value.Is_Online.Is_Null then
         Into.Write_Entity ("is_online", Value.Is_Online);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderRefundAdd_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderRefundAdd_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "order_id", Value.Order_Id);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "total_price", Value.Total_Price);
      Swagger.Streams.Deserialize (Object, "shipping_price", Value.Shipping_Price);
      Swagger.Streams.Deserialize (Object, "fee_price", Value.Fee_Price);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
      Swagger.Streams.Deserialize (Object, "item_restock", Value.Item_Restock);
      Swagger.Streams.Deserialize (Object, "send_notifications", Value.Send_Notifications);
      Swagger.Streams.Deserialize (Object, "date", Value.Date);
      Swagger.Streams.Deserialize (Object, "is_online", Value.Is_Online);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderRefundAdd_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderRefundAdd_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderReturnAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderReturnAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderReturnAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderReturnAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderReturnAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderReturnAdd_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Order_Id.Is_Null then
         Into.Write_Entity ("order_id", Value.Order_Id);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      Into.Write_Entity ("return_status_id", Value.Return_Status_Id);
      Into.Write_Entity ("return_action_id", Value.Return_Action_Id);
      Into.Write_Entity ("return_reason_id", Value.Return_Reason_Id);
      if not Value.Return_Reason.Is_Null then
         Into.Write_Entity ("return_reason", Value.Return_Reason);
      end if;
      if not Value.Item_Restock.Is_Null then
         Into.Write_Entity ("item_restock", Value.Item_Restock);
      end if;
      if not Value.Staff_Note.Is_Null then
         Into.Write_Entity ("staff_note", Value.Staff_Note);
      end if;
      if not Value.Comment.Is_Null then
         Into.Write_Entity ("comment", Value.Comment);
      end if;
      if not Value.Send_Notifications.Is_Null then
         Into.Write_Entity ("send_notifications", Value.Send_Notifications);
      end if;
      if not Value.Reject_Reason.Is_Null then
         Into.Write_Entity ("reject_reason", Value.Reject_Reason);
      end if;
      Serialize (Into, "order_products", Value.Order_Products);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderReturnAdd_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderReturnAdd_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "order_id", Value.Order_Id);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "return_status_id", Value.Return_Status_Id);
      Swagger.Streams.Deserialize (Object, "return_action_id", Value.Return_Action_Id);
      Swagger.Streams.Deserialize (Object, "return_reason_id", Value.Return_Reason_Id);
      Swagger.Streams.Deserialize (Object, "return_reason", Value.Return_Reason);
      Swagger.Streams.Deserialize (Object, "item_restock", Value.Item_Restock);
      Swagger.Streams.Deserialize (Object, "staff_note", Value.Staff_Note);
      Swagger.Streams.Deserialize (Object, "comment", Value.Comment);
      Swagger.Streams.Deserialize (Object, "send_notifications", Value.Send_Notifications);
      Swagger.Streams.Deserialize (Object, "reject_reason", Value.Reject_Reason);
      Deserialize (Object, "order_products", Value.Order_Products);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderReturnAdd_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderReturnAdd_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderReturnUpdate_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("return_id", Value.Return_Id);
      if not Value.Order_Id.Is_Null then
         Into.Write_Entity ("order_id", Value.Order_Id);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.Item_Restock.Is_Null then
         Into.Write_Entity ("item_restock", Value.Item_Restock);
      end if;
      if not Value.Return_Status_Id.Is_Null then
         Into.Write_Entity ("return_status_id", Value.Return_Status_Id);
      end if;
      if not Value.Staff_Note.Is_Null then
         Into.Write_Entity ("staff_note", Value.Staff_Note);
      end if;
      if not Value.Comment.Is_Null then
         Into.Write_Entity ("comment", Value.Comment);
      end if;
      if not Value.Send_Notifications.Is_Null then
         Into.Write_Entity ("send_notifications", Value.Send_Notifications);
      end if;
      if not Value.Reject_Reason.Is_Null then
         Into.Write_Entity ("reject_reason", Value.Reject_Reason);
      end if;
      Serialize (Into, "order_products", Value.Order_Products);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderReturnUpdate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderReturnUpdate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_id", Value.Return_Id);
      Swagger.Streams.Deserialize (Object, "order_id", Value.Order_Id);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "item_restock", Value.Item_Restock);
      Swagger.Streams.Deserialize (Object, "return_status_id", Value.Return_Status_Id);
      Swagger.Streams.Deserialize (Object, "staff_note", Value.Staff_Note);
      Swagger.Streams.Deserialize (Object, "comment", Value.Comment);
      Swagger.Streams.Deserialize (Object, "send_notifications", Value.Send_Notifications);
      Swagger.Streams.Deserialize (Object, "reject_reason", Value.Reject_Reason);
      Deserialize (Object, "order_products", Value.Order_Products);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderReturnUpdate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderReturnUpdate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderShipmentAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderShipmentAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderShipmentAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderShipmentAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderShipmentAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderShipmentAddBatchPayloadInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("order_id", Value.Order_Id);
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.Warehouse_Id.Is_Null then
         Into.Write_Entity ("warehouse_id", Value.Warehouse_Id);
      end if;
      if not Value.Carrier_Id.Is_Null then
         Into.Write_Entity ("carrier_id", Value.Carrier_Id);
      end if;
      if not Value.Carrier_Name.Is_Null then
         Into.Write_Entity ("carrier_name", Value.Carrier_Name);
      end if;
      Into.Write_Entity ("tracking_number", Value.Tracking_Number);
      if not Value.Tracking_Link.Is_Null then
         Into.Write_Entity ("tracking_link", Value.Tracking_Link);
      end if;
      if not Value.Shipment_Provider.Is_Null then
         Into.Write_Entity ("shipment_provider", Value.Shipment_Provider);
      end if;
      Serialize (Into, "items", Value.Items);
      if not Value.Send_Notifications.Is_Null then
         Into.Write_Entity ("send_notifications", Value.Send_Notifications);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderShipmentAddBatchPayloadInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderShipmentAddBatchPayloadInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "order_id", Value.Order_Id);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "warehouse_id", Value.Warehouse_Id);
      Swagger.Streams.Deserialize (Object, "carrier_id", Value.Carrier_Id);
      Swagger.Streams.Deserialize (Object, "carrier_name", Value.Carrier_Name);
      Swagger.Streams.Deserialize (Object, "tracking_number", Value.Tracking_Number);
      Swagger.Streams.Deserialize (Object, "tracking_link", Value.Tracking_Link);
      Swagger.Streams.Deserialize (Object, "shipment_provider", Value.Shipment_Provider);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "send_notifications", Value.Send_Notifications);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderShipmentAddBatchPayloadInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderShipmentAddBatchPayloadInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderShipmentAddBatch_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "payload", Value.Payload);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderShipmentAddBatch_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderShipmentAddBatch_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "payload", Value.Payload);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderShipmentAddBatch_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderShipmentAddBatch_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderShipmentDelete200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderShipmentDelete200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderShipmentDelete200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderShipmentDelete200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderShipmentDelete200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Shipment_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Order_Id.Is_Null then
         Into.Write_Entity ("order_id", Value.Order_Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Warehouse_Id.Is_Null then
         Into.Write_Entity ("warehouse_id", Value.Warehouse_Id);
      end if;
      if not Value.Shipment_Provider.Is_Null then
         Into.Write_Entity ("shipment_provider", Value.Shipment_Provider);
      end if;
      Serialize (Into, "tracking_numbers", Value.Tracking_Numbers);
      Serialize (Into, "created_at", Value.Created_At);
      Serialize (Into, "modified_time", Value.Modified_Time);
      Serialize (Into, "items", Value.Items);
      if not Value.Is_Shipped.Is_Null then
         Into.Write_Entity ("is_shipped", Value.Is_Shipped);
      end if;
      Serialize (Into, "delivered_at", Value.Delivered_At);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Shipment_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Shipment_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "order_id", Value.Order_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "warehouse_id", Value.Warehouse_Id);
      Swagger.Streams.Deserialize (Object, "shipment_provider", Value.Shipment_Provider);
      Deserialize (Object, "tracking_numbers", Value.Tracking_Numbers);
      Deserialize (Object, "created_at", Value.Created_At);
      Deserialize (Object, "modified_time", Value.Modified_Time);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "is_shipped", Value.Is_Shipped);
      Deserialize (Object, "delivered_at", Value.Delivered_At);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Shipment_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Shipment_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderShipmentInfo200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderShipmentInfo200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderShipmentInfo200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderShipmentInfo200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderShipmentInfo200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderShipmentTrackingAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderShipmentTrackingAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderShipmentTrackingAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderShipmentTrackingAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderShipmentTrackingAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderStatusHistoryItem_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "modified_time", Value.Modified_Time);
      if not Value.Notify.Is_Null then
         Into.Write_Entity ("notify", Value.Notify);
      end if;
      if not Value.Comment.Is_Null then
         Into.Write_Entity ("comment", Value.Comment);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderStatusHistoryItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderStatusHistoryItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "modified_time", Value.Modified_Time);
      Swagger.Streams.Deserialize (Object, "notify", Value.Notify);
      Swagger.Streams.Deserialize (Object, "comment", Value.Comment);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderStatusHistoryItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderStatusHistoryItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderTransaction_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Transaction_Id.Is_Null then
         Into.Write_Entity ("transaction_id", Value.Transaction_Id);
      end if;
      if not Value.Order_Id.Is_Null then
         Into.Write_Entity ("order_id", Value.Order_Id);
      end if;
      if not Value.Parent_Id.Is_Null then
         Into.Write_Entity ("parent_id", Value.Parent_Id);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      if not Value.Gateway.Is_Null then
         Into.Write_Entity ("gateway", Value.Gateway);
      end if;
      if not Value.Reference_Number.Is_Null then
         Into.Write_Entity ("reference_number", Value.Reference_Number);
      end if;
      if not Value.Currency.Is_Null then
         Into.Write_Entity ("currency", Value.Currency);
      end if;
      Serialize (Into, "amount", Value.Amount);
      Serialize (Into, "created_time", Value.Created_Time);
      if not Value.Settlement_Currency.Is_Null then
         Into.Write_Entity ("settlement_currency", Value.Settlement_Currency);
      end if;
      Serialize (Into, "settlement_amount", Value.Settlement_Amount);
      Serialize (Into, "settlement_created_time", Value.Settlement_Created_Time);
      if not Value.Card_Brand.Is_Null then
         Into.Write_Entity ("card_brand", Value.Card_Brand);
      end if;
      if not Value.Card_Bin.Is_Null then
         Into.Write_Entity ("card_bin", Value.Card_Bin);
      end if;
      if not Value.Card_Last_Four.Is_Null then
         Into.Write_Entity ("card_last_four", Value.Card_Last_Four);
      end if;
      if not Value.Avs_Street_Resp_Code.Is_Null then
         Into.Write_Entity ("avs_street_resp_code", Value.Avs_Street_Resp_Code);
      end if;
      if not Value.Avs_Postal_Resp_Code.Is_Null then
         Into.Write_Entity ("avs_postal_resp_code", Value.Avs_Postal_Resp_Code);
      end if;
      if not Value.Avs_Message.Is_Null then
         Into.Write_Entity ("avs_message", Value.Avs_Message);
      end if;
      if not Value.Cvv_Code.Is_Null then
         Into.Write_Entity ("cvv_code", Value.Cvv_Code);
      end if;
      if not Value.Cvv_Message.Is_Null then
         Into.Write_Entity ("cvv_message", Value.Cvv_Message);
      end if;
      if not Value.Is_Test_Mode.Is_Null then
         Into.Write_Entity ("is_test_mode", Value.Is_Test_Mode);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderTransaction_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderTransaction_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "transaction_id", Value.Transaction_Id);
      Swagger.Streams.Deserialize (Object, "order_id", Value.Order_Id);
      Swagger.Streams.Deserialize (Object, "parent_id", Value.Parent_Id);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "gateway", Value.Gateway);
      Swagger.Streams.Deserialize (Object, "reference_number", Value.Reference_Number);
      Swagger.Streams.Deserialize (Object, "currency", Value.Currency);
      Swagger.Streams.Deserialize (Object, "amount", Value.Amount);
      Deserialize (Object, "created_time", Value.Created_Time);
      Swagger.Streams.Deserialize (Object, "settlement_currency", Value.Settlement_Currency);
      Swagger.Streams.Deserialize (Object, "settlement_amount", Value.Settlement_Amount);
      Deserialize (Object, "settlement_created_time", Value.Settlement_Created_Time);
      Swagger.Streams.Deserialize (Object, "card_brand", Value.Card_Brand);
      Swagger.Streams.Deserialize (Object, "card_bin", Value.Card_Bin);
      Swagger.Streams.Deserialize (Object, "card_last_four", Value.Card_Last_Four);
      Swagger.Streams.Deserialize (Object, "avs_street_resp_code", Value.Avs_Street_Resp_Code);
      Swagger.Streams.Deserialize (Object, "avs_postal_resp_code", Value.Avs_Postal_Resp_Code);
      Swagger.Streams.Deserialize (Object, "avs_message", Value.Avs_Message);
      Swagger.Streams.Deserialize (Object, "cvv_code", Value.Cvv_Code);
      Swagger.Streams.Deserialize (Object, "cvv_message", Value.Cvv_Message);
      Swagger.Streams.Deserialize (Object, "is_test_mode", Value.Is_Test_Mode);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderTransaction_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderTransaction_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddBatchPayloadInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Short_Description.Is_Null then
         Into.Write_Entity ("short_description", Value.Short_Description);
      end if;
      if not Value.Sku.Is_Null then
         Into.Write_Entity ("sku", Value.Sku);
      end if;
      if not Value.Model.Is_Null then
         Into.Write_Entity ("model", Value.Model);
      end if;
      if not Value.Asin.Is_Null then
         Into.Write_Entity ("asin", Value.Asin);
      end if;
      if not Value.Upc.Is_Null then
         Into.Write_Entity ("upc", Value.Upc);
      end if;
      if not Value.Ean.Is_Null then
         Into.Write_Entity ("ean", Value.Ean);
      end if;
      if not Value.Gtin.Is_Null then
         Into.Write_Entity ("gtin", Value.Gtin);
      end if;
      if not Value.Mpn.Is_Null then
         Into.Write_Entity ("mpn", Value.Mpn);
      end if;
      if not Value.Barcode.Is_Null then
         Into.Write_Entity ("barcode", Value.Barcode);
      end if;
      Serialize (Into, "price", Value.Price);
      Serialize (Into, "old_price", Value.Old_Price);
      Serialize (Into, "cost_price", Value.Cost_Price);
      Serialize (Into, "special_price", Value.Special_Price);
      if not Value.Sprice_Create.Is_Null then
         Into.Write_Entity ("sprice_create", Value.Sprice_Create);
      end if;
      if not Value.Sprice_Expire.Is_Null then
         Into.Write_Entity ("sprice_expire", Value.Sprice_Expire);
      end if;
      Serialize (Into, "advanced_prices", Value.Advanced_Prices);
      Serialize (Into, "fixed_cost_shipping_price", Value.Fixed_Cost_Shipping_Price);
      Serialize (Into, "quantity", Value.Quantity);
      if not Value.Manage_Stock.Is_Null then
         Into.Write_Entity ("manage_stock", Value.Manage_Stock);
      end if;
      if not Value.Product_Type.Is_Null then
         Into.Write_Entity ("product_type", Value.Product_Type);
      end if;
      if not Swagger.Is_Null (Value.Marketplace_Item_Properties) then
         Into.Write_Entity ("marketplace_item_properties", Value.Marketplace_Item_Properties);
      end if;
      if not Value.Is_Free_Shipping.Is_Null then
         Into.Write_Entity ("is_free_shipping", Value.Is_Free_Shipping);
      end if;
      if not Value.Taxable.Is_Null then
         Into.Write_Entity ("taxable", Value.Taxable);
      end if;
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      if not Value.Condition.Is_Null then
         Into.Write_Entity ("condition", Value.Condition);
      end if;
      if not Value.Visible.Is_Null then
         Into.Write_Entity ("visible", Value.Visible);
      end if;
      if not Value.Available_For_View.Is_Null then
         Into.Write_Entity ("available_for_view", Value.Available_For_View);
      end if;
      if not Value.Available_For_Sale.Is_Null then
         Into.Write_Entity ("available_for_sale", Value.Available_For_Sale);
      end if;
      if not Value.Is_Virtual.Is_Null then
         Into.Write_Entity ("is_virtual", Value.Is_Virtual);
      end if;
      if not Value.In_Stock.Is_Null then
         Into.Write_Entity ("in_stock", Value.In_Stock);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Downloadable.Is_Null then
         Into.Write_Entity ("downloadable", Value.Downloadable);
      end if;
      Serialize (Into, "weight", Value.Weight);
      Serialize (Into, "length", Value.Length);
      Serialize (Into, "width", Value.Width);
      Serialize (Into, "height", Value.Height);
      if not Value.Weight_Unit.Is_Null then
         Into.Write_Entity ("weight_unit", Value.Weight_Unit);
      end if;
      if not Value.Dimensions_Unit.Is_Null then
         Into.Write_Entity ("dimensions_unit", Value.Dimensions_Unit);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.Lang_Id.Is_Null then
         Into.Write_Entity ("lang_id", Value.Lang_Id);
      end if;
      if not Value.Category_Id.Is_Null then
         Into.Write_Entity ("category_id", Value.Category_Id);
      end if;
      if not Value.Warehouse_Id.Is_Null then
         Into.Write_Entity ("warehouse_id", Value.Warehouse_Id);
      end if;
      Serialize (Into, "categories_ids", Value.Categories_Ids);
      Serialize (Into, "related_products_ids", Value.Related_Products_Ids);
      Serialize (Into, "up_sell_products_ids", Value.Up_Sell_Products_Ids);
      Serialize (Into, "cross_sell_products_ids", Value.Cross_Sell_Products_Ids);
      Serialize (Into, "stores_ids", Value.Stores_Ids);
      if not Value.Tax_Class_Id.Is_Null then
         Into.Write_Entity ("tax_class_id", Value.Tax_Class_Id);
      end if;
      if not Value.Meta_Title.Is_Null then
         Into.Write_Entity ("meta_title", Value.Meta_Title);
      end if;
      if not Value.Meta_Description.Is_Null then
         Into.Write_Entity ("meta_description", Value.Meta_Description);
      end if;
      Serialize (Into, "meta_keywords", Value.Meta_Keywords);
      Serialize (Into, "search_keywords", Value.Search_Keywords);
      if not Value.Harmonized_System_Code.Is_Null then
         Into.Write_Entity ("harmonized_system_code", Value.Harmonized_System_Code);
      end if;
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      if not Value.Seo_Url.Is_Null then
         Into.Write_Entity ("seo_url", Value.Seo_Url);
      end if;
      if not Value.Manufacturer.Is_Null then
         Into.Write_Entity ("manufacturer", Value.Manufacturer);
      end if;
      if not Value.Manufacturer_Id.Is_Null then
         Into.Write_Entity ("manufacturer_id", Value.Manufacturer_Id);
      end if;
      if not Value.Backorder_Status.Is_Null then
         Into.Write_Entity ("backorder_status", Value.Backorder_Status);
      end if;
      Serialize (Into, "images", Value.Images);
      Serialize (Into, "tags", Value.Tags);
      Serialize (Into, "files", Value.Files);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddBatchPayloadInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddBatchPayloadInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "short_description", Value.Short_Description);
      Swagger.Streams.Deserialize (Object, "sku", Value.Sku);
      Swagger.Streams.Deserialize (Object, "model", Value.Model);
      Swagger.Streams.Deserialize (Object, "asin", Value.Asin);
      Swagger.Streams.Deserialize (Object, "upc", Value.Upc);
      Swagger.Streams.Deserialize (Object, "ean", Value.Ean);
      Swagger.Streams.Deserialize (Object, "gtin", Value.Gtin);
      Swagger.Streams.Deserialize (Object, "mpn", Value.Mpn);
      Swagger.Streams.Deserialize (Object, "barcode", Value.Barcode);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "old_price", Value.Old_Price);
      Swagger.Streams.Deserialize (Object, "cost_price", Value.Cost_Price);
      Swagger.Streams.Deserialize (Object, "special_price", Value.Special_Price);
      Swagger.Streams.Deserialize (Object, "sprice_create", Value.Sprice_Create);
      Swagger.Streams.Deserialize (Object, "sprice_expire", Value.Sprice_Expire);
      Deserialize (Object, "advanced_prices", Value.Advanced_Prices);
      Swagger.Streams.Deserialize (Object, "fixed_cost_shipping_price", Value.Fixed_Cost_Shipping_Price);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
      Swagger.Streams.Deserialize (Object, "manage_stock", Value.Manage_Stock);
      Swagger.Streams.Deserialize (Object, "product_type", Value.Product_Type);
      Swagger.Streams.Deserialize (Object, "marketplace_item_properties", Value.Marketplace_Item_Properties);
      Swagger.Streams.Deserialize (Object, "is_free_shipping", Value.Is_Free_Shipping);
      Swagger.Streams.Deserialize (Object, "taxable", Value.Taxable);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "condition", Value.Condition);
      Swagger.Streams.Deserialize (Object, "visible", Value.Visible);
      Swagger.Streams.Deserialize (Object, "available_for_view", Value.Available_For_View);
      Swagger.Streams.Deserialize (Object, "available_for_sale", Value.Available_For_Sale);
      Swagger.Streams.Deserialize (Object, "is_virtual", Value.Is_Virtual);
      Swagger.Streams.Deserialize (Object, "in_stock", Value.In_Stock);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "downloadable", Value.Downloadable);
      Swagger.Streams.Deserialize (Object, "weight", Value.Weight);
      Swagger.Streams.Deserialize (Object, "length", Value.Length);
      Swagger.Streams.Deserialize (Object, "width", Value.Width);
      Swagger.Streams.Deserialize (Object, "height", Value.Height);
      Swagger.Streams.Deserialize (Object, "weight_unit", Value.Weight_Unit);
      Swagger.Streams.Deserialize (Object, "dimensions_unit", Value.Dimensions_Unit);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "lang_id", Value.Lang_Id);
      Swagger.Streams.Deserialize (Object, "category_id", Value.Category_Id);
      Swagger.Streams.Deserialize (Object, "warehouse_id", Value.Warehouse_Id);
      Swagger.Streams.Deserialize (Object, "categories_ids", Value.Categories_Ids);
      Swagger.Streams.Deserialize (Object, "related_products_ids", Value.Related_Products_Ids);
      Swagger.Streams.Deserialize (Object, "up_sell_products_ids", Value.Up_Sell_Products_Ids);
      Swagger.Streams.Deserialize (Object, "cross_sell_products_ids", Value.Cross_Sell_Products_Ids);
      Swagger.Streams.Deserialize (Object, "stores_ids", Value.Stores_Ids);
      Swagger.Streams.Deserialize (Object, "tax_class_id", Value.Tax_Class_Id);
      Swagger.Streams.Deserialize (Object, "meta_title", Value.Meta_Title);
      Swagger.Streams.Deserialize (Object, "meta_description", Value.Meta_Description);
      Swagger.Streams.Deserialize (Object, "meta_keywords", Value.Meta_Keywords);
      Swagger.Streams.Deserialize (Object, "search_keywords", Value.Search_Keywords);
      Swagger.Streams.Deserialize (Object, "harmonized_system_code", Value.Harmonized_System_Code);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "seo_url", Value.Seo_Url);
      Swagger.Streams.Deserialize (Object, "manufacturer", Value.Manufacturer);
      Swagger.Streams.Deserialize (Object, "manufacturer_id", Value.Manufacturer_Id);
      Swagger.Streams.Deserialize (Object, "backorder_status", Value.Backorder_Status);
      Deserialize (Object, "images", Value.Images);
      Swagger.Streams.Deserialize (Object, "tags", Value.Tags);
      Deserialize (Object, "files", Value.Files);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddBatchPayloadInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddBatchPayloadInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddBatch_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Nested_Items_Update_Behaviour.Is_Null then
         Into.Write_Entity ("nested_items_update_behaviour", Value.Nested_Items_Update_Behaviour);
      end if;
      if not Value.Clear_Cache.Is_Null then
         Into.Write_Entity ("clear_cache", Value.Clear_Cache);
      end if;
      if not Value.Reindex.Is_Null then
         Into.Write_Entity ("reindex", Value.Reindex);
      end if;
      Serialize (Into, "payload", Value.Payload);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddBatch_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddBatch_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "nested_items_update_behaviour", Value.Nested_Items_Update_Behaviour);
      Swagger.Streams.Deserialize (Object, "clear_cache", Value.Clear_Cache);
      Swagger.Streams.Deserialize (Object, "reindex", Value.Reindex);
      Deserialize (Object, "payload", Value.Payload);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddBatch_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddBatch_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddSpecificsInnerBookingDetailsAvailabilitiesInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("day", Value.Day);
      if not Value.Is_Available.Is_Null then
         Into.Write_Entity ("is_available", Value.Is_Available);
      end if;
      Serialize (Into, "times", Value.Times);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddSpecificsInnerBookingDetailsAvailabilitiesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddSpecificsInnerBookingDetailsAvailabilitiesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "day", Value.Day);
      Swagger.Streams.Deserialize (Object, "is_available", Value.Is_Available);
      Deserialize (Object, "times", Value.Times);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddSpecificsInnerBookingDetailsAvailabilitiesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddSpecificsInnerBookingDetailsAvailabilitiesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAdvancedPrice_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "value", Value.Value);
      if not Value.Avail.Is_Null then
         Into.Write_Entity ("avail", Value.Avail);
      end if;
      if not Value.Group_Id.Is_Null then
         Into.Write_Entity ("group_id", Value.Group_Id);
      end if;
      Serialize (Into, "quantity_from", Value.Quantity_From);
      Serialize (Into, "start_time", Value.Start_Time);
      Serialize (Into, "expire_time", Value.Expire_Time);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAdvancedPrice_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAdvancedPrice_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "avail", Value.Avail);
      Swagger.Streams.Deserialize (Object, "group_id", Value.Group_Id);
      Swagger.Streams.Deserialize (Object, "quantity_from", Value.Quantity_From);
      Deserialize (Object, "start_time", Value.Start_Time);
      Deserialize (Object, "expire_time", Value.Expire_Time);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAdvancedPrice_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAdvancedPrice_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAttributeValueSet200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAttributeValueSet200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAttributeValueSet200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAttributeValueSet200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAttributeValueSet200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAttributeValueUnset200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAttributeValueUnset200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAttributeValueUnset200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAttributeValueUnset200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAttributeValueUnset200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductChildItemFind200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "children", Value.Children);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductChildItemFind200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductChildItemFind200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "children", Value.Children);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductChildItemFind200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductChildItemFind200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductChildItemFind200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductChildItemFind200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductChildItemFind200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductChildItemFind200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductChildItemFind200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Child_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Parent_Id.Is_Null then
         Into.Write_Entity ("parent_id", Value.Parent_Id);
      end if;
      if not Value.Sku.Is_Null then
         Into.Write_Entity ("sku", Value.Sku);
      end if;
      if not Value.Upc.Is_Null then
         Into.Write_Entity ("upc", Value.Upc);
      end if;
      if not Value.Ean.Is_Null then
         Into.Write_Entity ("ean", Value.Ean);
      end if;
      if not Value.Mpn.Is_Null then
         Into.Write_Entity ("mpn", Value.Mpn);
      end if;
      if not Value.Gtin.Is_Null then
         Into.Write_Entity ("gtin", Value.Gtin);
      end if;
      if not Value.Isbn.Is_Null then
         Into.Write_Entity ("isbn", Value.Isbn);
      end if;
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      if not Value.Seo_Url.Is_Null then
         Into.Write_Entity ("seo_url", Value.Seo_Url);
      end if;
      if not Value.Sort_Order.Is_Null then
         Into.Write_Entity ("sort_order", Value.Sort_Order);
      end if;
      Serialize (Into, "created_time", Value.Created_Time);
      Serialize (Into, "modified_time", Value.Modified_Time);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Short_Description.Is_Null then
         Into.Write_Entity ("short_description", Value.Short_Description);
      end if;
      if not Value.Full_Description.Is_Null then
         Into.Write_Entity ("full_description", Value.Full_Description);
      end if;
      Serialize (Into, "images", Value.Images);
      Serialize (Into, "combination", Value.Combination);
      Serialize (Into, "default_price", Value.Default_Price);
      Serialize (Into, "cost_price", Value.Cost_Price);
      Serialize (Into, "list_price", Value.List_Price);
      Serialize (Into, "wholesale_price", Value.Wholesale_Price);
      Serialize (Into, "advanced_price", Value.Advanced_Price);
      if not Value.Tax_Class_Id.Is_Null then
         Into.Write_Entity ("tax_class_id", Value.Tax_Class_Id);
      end if;
      if not Value.Avail_For_Sale.Is_Null then
         Into.Write_Entity ("avail_for_sale", Value.Avail_For_Sale);
      end if;
      if not Value.Allow_Backorders.Is_Null then
         Into.Write_Entity ("allow_backorders", Value.Allow_Backorders);
      end if;
      if not Value.In_Stock.Is_Null then
         Into.Write_Entity ("in_stock", Value.In_Stock);
      end if;
      if not Value.On_Sale.Is_Null then
         Into.Write_Entity ("on_sale", Value.On_Sale);
      end if;
      if not Value.Manage_Stock.Is_Null then
         Into.Write_Entity ("manage_stock", Value.Manage_Stock);
      end if;
      Serialize (Into, "inventory_level", Value.Inventory_Level);
      Serialize (Into, "inventory", Value.Inventory);
      Serialize (Into, "min_quantity", Value.Min_Quantity);
      Serialize (Into, "default_qty_in_pack", Value.Default_Qty_In_Pack);
      if not Value.Is_Qty_In_Pack_Fixed.Is_Null then
         Into.Write_Entity ("is_qty_in_pack_fixed", Value.Is_Qty_In_Pack_Fixed);
      end if;
      if not Value.Weight_Unit.Is_Null then
         Into.Write_Entity ("weight_unit", Value.Weight_Unit);
      end if;
      Serialize (Into, "weight", Value.Weight);
      if not Value.Dimensions_Unit.Is_Null then
         Into.Write_Entity ("dimensions_unit", Value.Dimensions_Unit);
      end if;
      Serialize (Into, "width", Value.Width);
      Serialize (Into, "height", Value.Height);
      Serialize (Into, "length", Value.Length);
      if not Value.Meta_Title.Is_Null then
         Into.Write_Entity ("meta_title", Value.Meta_Title);
      end if;
      if not Value.Meta_Description.Is_Null then
         Into.Write_Entity ("meta_description", Value.Meta_Description);
      end if;
      if not Value.Meta_Keywords.Is_Null then
         Into.Write_Entity ("meta_keywords", Value.Meta_Keywords);
      end if;
      Serialize (Into, "discounts", Value.Discounts);
      if not Value.Is_Virtual.Is_Null then
         Into.Write_Entity ("is_virtual", Value.Is_Virtual);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Child_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Child_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "parent_id", Value.Parent_Id);
      Swagger.Streams.Deserialize (Object, "sku", Value.Sku);
      Swagger.Streams.Deserialize (Object, "upc", Value.Upc);
      Swagger.Streams.Deserialize (Object, "ean", Value.Ean);
      Swagger.Streams.Deserialize (Object, "mpn", Value.Mpn);
      Swagger.Streams.Deserialize (Object, "gtin", Value.Gtin);
      Swagger.Streams.Deserialize (Object, "isbn", Value.Isbn);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "seo_url", Value.Seo_Url);
      Swagger.Streams.Deserialize (Object, "sort_order", Value.Sort_Order);
      Deserialize (Object, "created_time", Value.Created_Time);
      Deserialize (Object, "modified_time", Value.Modified_Time);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "short_description", Value.Short_Description);
      Swagger.Streams.Deserialize (Object, "full_description", Value.Full_Description);
      Deserialize (Object, "images", Value.Images);
      Deserialize (Object, "combination", Value.Combination);
      Swagger.Streams.Deserialize (Object, "default_price", Value.Default_Price);
      Swagger.Streams.Deserialize (Object, "cost_price", Value.Cost_Price);
      Swagger.Streams.Deserialize (Object, "list_price", Value.List_Price);
      Swagger.Streams.Deserialize (Object, "wholesale_price", Value.Wholesale_Price);
      Deserialize (Object, "advanced_price", Value.Advanced_Price);
      Swagger.Streams.Deserialize (Object, "tax_class_id", Value.Tax_Class_Id);
      Swagger.Streams.Deserialize (Object, "avail_for_sale", Value.Avail_For_Sale);
      Swagger.Streams.Deserialize (Object, "allow_backorders", Value.Allow_Backorders);
      Swagger.Streams.Deserialize (Object, "in_stock", Value.In_Stock);
      Swagger.Streams.Deserialize (Object, "on_sale", Value.On_Sale);
      Swagger.Streams.Deserialize (Object, "manage_stock", Value.Manage_Stock);
      Swagger.Streams.Deserialize (Object, "inventory_level", Value.Inventory_Level);
      Deserialize (Object, "inventory", Value.Inventory);
      Swagger.Streams.Deserialize (Object, "min_quantity", Value.Min_Quantity);
      Swagger.Streams.Deserialize (Object, "default_qty_in_pack", Value.Default_Qty_In_Pack);
      Swagger.Streams.Deserialize (Object, "is_qty_in_pack_fixed", Value.Is_Qty_In_Pack_Fixed);
      Swagger.Streams.Deserialize (Object, "weight_unit", Value.Weight_Unit);
      Swagger.Streams.Deserialize (Object, "weight", Value.Weight);
      Swagger.Streams.Deserialize (Object, "dimensions_unit", Value.Dimensions_Unit);
      Swagger.Streams.Deserialize (Object, "width", Value.Width);
      Swagger.Streams.Deserialize (Object, "height", Value.Height);
      Swagger.Streams.Deserialize (Object, "length", Value.Length);
      Swagger.Streams.Deserialize (Object, "meta_title", Value.Meta_Title);
      Swagger.Streams.Deserialize (Object, "meta_description", Value.Meta_Description);
      Swagger.Streams.Deserialize (Object, "meta_keywords", Value.Meta_Keywords);
      Deserialize (Object, "discounts", Value.Discounts);
      Swagger.Streams.Deserialize (Object, "is_virtual", Value.Is_Virtual);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Child_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Child_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductChildItemInfo200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductChildItemInfo200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductChildItemInfo200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductChildItemInfo200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductChildItemInfo200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductCount200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductCount200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductCount200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductCount200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductCount200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductCurrencyAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductCurrencyAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductCurrencyAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductCurrencyAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductCurrencyAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductDeleteBatch_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "payload", Value.Payload);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductDeleteBatch_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductDeleteBatch_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "payload", Value.Payload);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductDeleteBatch_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductDeleteBatch_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductFind200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "product", Value.Product);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductFind200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductFind200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "product", Value.Product);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductFind200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductFind200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductFind200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductFind200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductFind200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductFind200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductFind200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductImageAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductImageAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductImageAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductImageAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductImageAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductImageUpdate200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductImageUpdate200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductImageUpdate200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductImageUpdate200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductImageUpdate200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Product_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.U_Model.Is_Null then
         Into.Write_Entity ("u_model", Value.U_Model);
      end if;
      if not Value.U_Sku.Is_Null then
         Into.Write_Entity ("u_sku", Value.U_Sku);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Short_Description.Is_Null then
         Into.Write_Entity ("short_description", Value.Short_Description);
      end if;
      Serialize (Into, "price", Value.Price);
      Serialize (Into, "advanced_price", Value.Advanced_Price);
      Serialize (Into, "cost_price", Value.Cost_Price);
      Serialize (Into, "quantity", Value.Quantity);
      Serialize (Into, "inventory", Value.Inventory);
      Serialize (Into, "group_items", Value.Group_Items);
      if not Value.U_Brand_Id.Is_Null then
         Into.Write_Entity ("u_brand_id", Value.U_Brand_Id);
      end if;
      if not Value.U_Brand.Is_Null then
         Into.Write_Entity ("u_brand", Value.U_Brand);
      end if;
      Serialize (Into, "categories_ids", Value.Categories_Ids);
      Serialize (Into, "stores_ids", Value.Stores_Ids);
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      if not Value.Seo_Url.Is_Null then
         Into.Write_Entity ("seo_url", Value.Seo_Url);
      end if;
      if not Value.Meta_Title.Is_Null then
         Into.Write_Entity ("meta_title", Value.Meta_Title);
      end if;
      if not Value.Meta_Keywords.Is_Null then
         Into.Write_Entity ("meta_keywords", Value.Meta_Keywords);
      end if;
      if not Value.Meta_Description.Is_Null then
         Into.Write_Entity ("meta_description", Value.Meta_Description);
      end if;
      if not Value.Avail_Sale.Is_Null then
         Into.Write_Entity ("avail_sale", Value.Avail_Sale);
      end if;
      if not Value.Avail_View.Is_Null then
         Into.Write_Entity ("avail_view", Value.Avail_View);
      end if;
      if not Value.Is_Virtual.Is_Null then
         Into.Write_Entity ("is_virtual", Value.Is_Virtual);
      end if;
      if not Value.Is_Downloadable.Is_Null then
         Into.Write_Entity ("is_downloadable", Value.Is_Downloadable);
      end if;
      Serialize (Into, "weight", Value.Weight);
      if not Value.Weight_Unit.Is_Null then
         Into.Write_Entity ("weight_unit", Value.Weight_Unit);
      end if;
      if not Value.Sort_Order.Is_Null then
         Into.Write_Entity ("sort_order", Value.Sort_Order);
      end if;
      if not Value.In_Stock.Is_Null then
         Into.Write_Entity ("in_stock", Value.In_Stock);
      end if;
      if not Value.On_Sale.Is_Null then
         Into.Write_Entity ("on_sale", Value.On_Sale);
      end if;
      if not Value.Backorders.Is_Null then
         Into.Write_Entity ("backorders", Value.Backorders);
      end if;
      if not Value.Manage_Stock.Is_Null then
         Into.Write_Entity ("manage_stock", Value.Manage_Stock);
      end if;
      if not Value.Is_Stock_Managed.Is_Null then
         Into.Write_Entity ("is_stock_managed", Value.Is_Stock_Managed);
      end if;
      Serialize (Into, "create_at", Value.Create_At);
      Serialize (Into, "modified_at", Value.Modified_At);
      if not Value.Tax_Class_Id.Is_Null then
         Into.Write_Entity ("tax_class_id", Value.Tax_Class_Id);
      end if;
      Serialize (Into, "special_price", Value.Special_Price);
      Serialize (Into, "tier_price", Value.Tier_Price);
      Serialize (Into, "group_price", Value.Group_Price);
      Serialize (Into, "images", Value.Images);
      Serialize (Into, "product_options", Value.Product_Options);
      if not Value.U_Upc.Is_Null then
         Into.Write_Entity ("u_upc", Value.U_Upc);
      end if;
      if not Value.U_Mpn.Is_Null then
         Into.Write_Entity ("u_mpn", Value.U_Mpn);
      end if;
      if not Value.U_Gtin.Is_Null then
         Into.Write_Entity ("u_gtin", Value.U_Gtin);
      end if;
      if not Value.U_Isbn.Is_Null then
         Into.Write_Entity ("u_isbn", Value.U_Isbn);
      end if;
      if not Value.U_Ean.Is_Null then
         Into.Write_Entity ("u_ean", Value.U_Ean);
      end if;
      Serialize (Into, "related_products_ids", Value.Related_Products_Ids);
      Serialize (Into, "up_sell_products_ids", Value.Up_Sell_Products_Ids);
      Serialize (Into, "cross_sell_products_ids", Value.Cross_Sell_Products_Ids);
      if not Value.Dimensions_Unit.Is_Null then
         Into.Write_Entity ("dimensions_unit", Value.Dimensions_Unit);
      end if;
      Serialize (Into, "width", Value.Width);
      Serialize (Into, "height", Value.Height);
      Serialize (Into, "length", Value.Length);
      Serialize (Into, "discounts", Value.Discounts);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Product_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Product_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "u_model", Value.U_Model);
      Swagger.Streams.Deserialize (Object, "u_sku", Value.U_Sku);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "short_description", Value.Short_Description);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Deserialize (Object, "advanced_price", Value.Advanced_Price);
      Swagger.Streams.Deserialize (Object, "cost_price", Value.Cost_Price);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
      Deserialize (Object, "inventory", Value.Inventory);
      Deserialize (Object, "group_items", Value.Group_Items);
      Swagger.Streams.Deserialize (Object, "u_brand_id", Value.U_Brand_Id);
      Swagger.Streams.Deserialize (Object, "u_brand", Value.U_Brand);
      Swagger.Streams.Deserialize (Object, "categories_ids", Value.Categories_Ids);
      Swagger.Streams.Deserialize (Object, "stores_ids", Value.Stores_Ids);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "seo_url", Value.Seo_Url);
      Swagger.Streams.Deserialize (Object, "meta_title", Value.Meta_Title);
      Swagger.Streams.Deserialize (Object, "meta_keywords", Value.Meta_Keywords);
      Swagger.Streams.Deserialize (Object, "meta_description", Value.Meta_Description);
      Swagger.Streams.Deserialize (Object, "avail_sale", Value.Avail_Sale);
      Swagger.Streams.Deserialize (Object, "avail_view", Value.Avail_View);
      Swagger.Streams.Deserialize (Object, "is_virtual", Value.Is_Virtual);
      Swagger.Streams.Deserialize (Object, "is_downloadable", Value.Is_Downloadable);
      Swagger.Streams.Deserialize (Object, "weight", Value.Weight);
      Swagger.Streams.Deserialize (Object, "weight_unit", Value.Weight_Unit);
      Swagger.Streams.Deserialize (Object, "sort_order", Value.Sort_Order);
      Swagger.Streams.Deserialize (Object, "in_stock", Value.In_Stock);
      Swagger.Streams.Deserialize (Object, "on_sale", Value.On_Sale);
      Swagger.Streams.Deserialize (Object, "backorders", Value.Backorders);
      Swagger.Streams.Deserialize (Object, "manage_stock", Value.Manage_Stock);
      Swagger.Streams.Deserialize (Object, "is_stock_managed", Value.Is_Stock_Managed);
      Deserialize (Object, "create_at", Value.Create_At);
      Deserialize (Object, "modified_at", Value.Modified_At);
      Swagger.Streams.Deserialize (Object, "tax_class_id", Value.Tax_Class_Id);
      Deserialize (Object, "special_price", Value.Special_Price);
      Deserialize (Object, "tier_price", Value.Tier_Price);
      Deserialize (Object, "group_price", Value.Group_Price);
      Deserialize (Object, "images", Value.Images);
      Deserialize (Object, "product_options", Value.Product_Options);
      Swagger.Streams.Deserialize (Object, "u_upc", Value.U_Upc);
      Swagger.Streams.Deserialize (Object, "u_mpn", Value.U_Mpn);
      Swagger.Streams.Deserialize (Object, "u_gtin", Value.U_Gtin);
      Swagger.Streams.Deserialize (Object, "u_isbn", Value.U_Isbn);
      Swagger.Streams.Deserialize (Object, "u_ean", Value.U_Ean);
      Swagger.Streams.Deserialize (Object, "related_products_ids", Value.Related_Products_Ids);
      Swagger.Streams.Deserialize (Object, "up_sell_products_ids", Value.Up_Sell_Products_Ids);
      Swagger.Streams.Deserialize (Object, "cross_sell_products_ids", Value.Cross_Sell_Products_Ids);
      Swagger.Streams.Deserialize (Object, "dimensions_unit", Value.Dimensions_Unit);
      Swagger.Streams.Deserialize (Object, "width", Value.Width);
      Swagger.Streams.Deserialize (Object, "height", Value.Height);
      Swagger.Streams.Deserialize (Object, "length", Value.Length);
      Deserialize (Object, "discounts", Value.Discounts);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Product_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Product_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductInfo200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductInfo200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductInfo200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductInfo200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductInfo200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductManufacturerAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductManufacturerAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductManufacturerAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductManufacturerAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductManufacturerAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductOptionAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductOptionAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductOptionAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductOptionAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductOptionAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductOptionAdd_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("type", Value.P_Type);
      if not Value.Product_Id.Is_Null then
         Into.Write_Entity ("product_id", Value.Product_Id);
      end if;
      if not Value.Default_Option_Value.Is_Null then
         Into.Write_Entity ("default_option_value", Value.Default_Option_Value);
      end if;
      if not Value.Option_Values.Is_Null then
         Into.Write_Entity ("option_values", Value.Option_Values);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Avail.Is_Null then
         Into.Write_Entity ("avail", Value.Avail);
      end if;
      if not Value.Sort_Order.Is_Null then
         Into.Write_Entity ("sort_order", Value.Sort_Order);
      end if;
      if not Value.Required.Is_Null then
         Into.Write_Entity ("required", Value.Required);
      end if;
      Serialize (Into, "values", Value.Values);
      if not Value.Clear_Cache.Is_Null then
         Into.Write_Entity ("clear_cache", Value.Clear_Cache);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductOptionAdd_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductOptionAdd_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Swagger.Streams.Deserialize (Object, "default_option_value", Value.Default_Option_Value);
      Swagger.Streams.Deserialize (Object, "option_values", Value.Option_Values);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "avail", Value.Avail);
      Swagger.Streams.Deserialize (Object, "sort_order", Value.Sort_Order);
      Swagger.Streams.Deserialize (Object, "required", Value.Required);
      Deserialize (Object, "values", Value.Values);
      Swagger.Streams.Deserialize (Object, "clear_cache", Value.Clear_Cache);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductOptionAdd_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductOptionAdd_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductOptionAssign200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductOptionAssign200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductOptionAssign200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductOptionAssign200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductOptionAssign200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductOptionValueAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductOptionValueAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductOptionValueAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductOptionValueAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductOptionValueAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductOptionValueAssign200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductOptionValueAssign200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductOptionValueAssign200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductOptionValueAssign200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductOptionValueAssign200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductOption_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Product_Option_Id.Is_Null then
         Into.Write_Entity ("product_option_id", Value.Product_Option_Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Sort_Order.Is_Null then
         Into.Write_Entity ("sort_order", Value.Sort_Order);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Required.Is_Null then
         Into.Write_Entity ("required", Value.Required);
      end if;
      if not Value.Available.Is_Null then
         Into.Write_Entity ("available", Value.Available);
      end if;
      if not Value.Used_In_Combination.Is_Null then
         Into.Write_Entity ("used_in_combination", Value.Used_In_Combination);
      end if;
      Serialize (Into, "option_items", Value.Option_Items);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductOption_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductOption_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "product_option_id", Value.Product_Option_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "sort_order", Value.Sort_Order);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "required", Value.Required);
      Swagger.Streams.Deserialize (Object, "available", Value.Available);
      Swagger.Streams.Deserialize (Object, "used_in_combination", Value.Used_In_Combination);
      Deserialize (Object, "option_items", Value.Option_Items);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductOption_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductOption_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductPriceAdd_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Product_Id.Is_Null then
         Into.Write_Entity ("product_id", Value.Product_Id);
      end if;
      Serialize (Into, "group_prices", Value.Group_Prices);
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductPriceAdd_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductPriceAdd_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Deserialize (Object, "group_prices", Value.Group_Prices);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductPriceAdd_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductPriceAdd_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductPriceUpdate_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Product_Id.Is_Null then
         Into.Write_Entity ("product_id", Value.Product_Id);
      end if;
      Serialize (Into, "group_prices", Value.Group_Prices);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductPriceUpdate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductPriceUpdate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Deserialize (Object, "group_prices", Value.Group_Prices);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductPriceUpdate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductPriceUpdate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductTaxAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductTaxAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductTaxAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductTaxAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductTaxAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductTaxAdd_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Product_Id.Is_Null then
         Into.Write_Entity ("product_id", Value.Product_Id);
      end if;
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "tax_rates", Value.Tax_Rates);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductTaxAdd_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductTaxAdd_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "tax_rates", Value.Tax_Rates);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductTaxAdd_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductTaxAdd_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductUpdateBatchPayloadInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("id", Value.Id);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Short_Description.Is_Null then
         Into.Write_Entity ("short_description", Value.Short_Description);
      end if;
      if not Value.Sku.Is_Null then
         Into.Write_Entity ("sku", Value.Sku);
      end if;
      if not Value.Model.Is_Null then
         Into.Write_Entity ("model", Value.Model);
      end if;
      Serialize (Into, "price", Value.Price);
      Serialize (Into, "special_price", Value.Special_Price);
      if not Value.Sprice_Create.Is_Null then
         Into.Write_Entity ("sprice_create", Value.Sprice_Create);
      end if;
      if not Value.Sprice_Expire.Is_Null then
         Into.Write_Entity ("sprice_expire", Value.Sprice_Expire);
      end if;
      Serialize (Into, "cost_price", Value.Cost_Price);
      Serialize (Into, "old_price", Value.Old_Price);
      Serialize (Into, "fixed_cost_shipping_price", Value.Fixed_Cost_Shipping_Price);
      Serialize (Into, "advanced_prices", Value.Advanced_Prices);
      Serialize (Into, "quantity", Value.Quantity);
      Serialize (Into, "increase_quantity", Value.Increase_Quantity);
      Serialize (Into, "reduce_quantity", Value.Reduce_Quantity);
      Serialize (Into, "reserve_quantity", Value.Reserve_Quantity);
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.Lang_Id.Is_Null then
         Into.Write_Entity ("lang_id", Value.Lang_Id);
      end if;
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Condition.Is_Null then
         Into.Write_Entity ("condition", Value.Condition);
      end if;
      if not Value.Visible.Is_Null then
         Into.Write_Entity ("visible", Value.Visible);
      end if;
      if not Value.Available_For_View.Is_Null then
         Into.Write_Entity ("available_for_view", Value.Available_For_View);
      end if;
      if not Value.Available_For_Sale.Is_Null then
         Into.Write_Entity ("available_for_sale", Value.Available_For_Sale);
      end if;
      if not Value.Avail_From.Is_Null then
         Into.Write_Entity ("avail_from", Value.Avail_From);
      end if;
      Serialize (Into, "weight", Value.Weight);
      Serialize (Into, "length", Value.Length);
      Serialize (Into, "width", Value.Width);
      Serialize (Into, "height", Value.Height);
      if not Value.Dimensions_Unit.Is_Null then
         Into.Write_Entity ("dimensions_unit", Value.Dimensions_Unit);
      end if;
      if not Value.Weight_Unit.Is_Null then
         Into.Write_Entity ("weight_unit", Value.Weight_Unit);
      end if;
      if not Value.Manage_Stock.Is_Null then
         Into.Write_Entity ("manage_stock", Value.Manage_Stock);
      end if;
      if not Value.In_Stock.Is_Null then
         Into.Write_Entity ("in_stock", Value.In_Stock);
      end if;
      if not Value.Backorder_Status.Is_Null then
         Into.Write_Entity ("backorder_status", Value.Backorder_Status);
      end if;
      if not Value.Is_Free_Shipping.Is_Null then
         Into.Write_Entity ("is_free_shipping", Value.Is_Free_Shipping);
      end if;
      if not Value.Is_Virtual.Is_Null then
         Into.Write_Entity ("is_virtual", Value.Is_Virtual);
      end if;
      if not Value.Taxable.Is_Null then
         Into.Write_Entity ("taxable", Value.Taxable);
      end if;
      if not Value.Downloadable.Is_Null then
         Into.Write_Entity ("downloadable", Value.Downloadable);
      end if;
      if not Value.Warehouse_Id.Is_Null then
         Into.Write_Entity ("warehouse_id", Value.Warehouse_Id);
      end if;
      if not Value.Tax_Class_Id.Is_Null then
         Into.Write_Entity ("tax_class_id", Value.Tax_Class_Id);
      end if;
      Serialize (Into, "categories_ids", Value.Categories_Ids);
      if not Value.Meta_Title.Is_Null then
         Into.Write_Entity ("meta_title", Value.Meta_Title);
      end if;
      if not Value.Meta_Description.Is_Null then
         Into.Write_Entity ("meta_description", Value.Meta_Description);
      end if;
      Serialize (Into, "meta_keywords", Value.Meta_Keywords);
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      if not Value.Seo_Url.Is_Null then
         Into.Write_Entity ("seo_url", Value.Seo_Url);
      end if;
      if not Value.Manufacturer.Is_Null then
         Into.Write_Entity ("manufacturer", Value.Manufacturer);
      end if;
      if not Value.Manufacturer_Id.Is_Null then
         Into.Write_Entity ("manufacturer_id", Value.Manufacturer_Id);
      end if;
      if not Value.Mpn.Is_Null then
         Into.Write_Entity ("mpn", Value.Mpn);
      end if;
      if not Value.Gtin.Is_Null then
         Into.Write_Entity ("gtin", Value.Gtin);
      end if;
      if not Value.Upc.Is_Null then
         Into.Write_Entity ("upc", Value.Upc);
      end if;
      if not Value.Isbn.Is_Null then
         Into.Write_Entity ("isbn", Value.Isbn);
      end if;
      if not Value.Ean.Is_Null then
         Into.Write_Entity ("ean", Value.Ean);
      end if;
      if not Value.Barcode.Is_Null then
         Into.Write_Entity ("barcode", Value.Barcode);
      end if;
      Serialize (Into, "images", Value.Images);
      Serialize (Into, "related_products_ids", Value.Related_Products_Ids);
      Serialize (Into, "up_sell_products_ids", Value.Up_Sell_Products_Ids);
      Serialize (Into, "cross_sell_products_ids", Value.Cross_Sell_Products_Ids);
      Serialize (Into, "tags", Value.Tags);
      Serialize (Into, "search_keywords", Value.Search_Keywords);
      if not Value.Harmonized_System_Code.Is_Null then
         Into.Write_Entity ("harmonized_system_code", Value.Harmonized_System_Code);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductUpdateBatchPayloadInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductUpdateBatchPayloadInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "short_description", Value.Short_Description);
      Swagger.Streams.Deserialize (Object, "sku", Value.Sku);
      Swagger.Streams.Deserialize (Object, "model", Value.Model);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "special_price", Value.Special_Price);
      Swagger.Streams.Deserialize (Object, "sprice_create", Value.Sprice_Create);
      Swagger.Streams.Deserialize (Object, "sprice_expire", Value.Sprice_Expire);
      Swagger.Streams.Deserialize (Object, "cost_price", Value.Cost_Price);
      Swagger.Streams.Deserialize (Object, "old_price", Value.Old_Price);
      Swagger.Streams.Deserialize (Object, "fixed_cost_shipping_price", Value.Fixed_Cost_Shipping_Price);
      Deserialize (Object, "advanced_prices", Value.Advanced_Prices);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
      Swagger.Streams.Deserialize (Object, "increase_quantity", Value.Increase_Quantity);
      Swagger.Streams.Deserialize (Object, "reduce_quantity", Value.Reduce_Quantity);
      Swagger.Streams.Deserialize (Object, "reserve_quantity", Value.Reserve_Quantity);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "lang_id", Value.Lang_Id);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "condition", Value.Condition);
      Swagger.Streams.Deserialize (Object, "visible", Value.Visible);
      Swagger.Streams.Deserialize (Object, "available_for_view", Value.Available_For_View);
      Swagger.Streams.Deserialize (Object, "available_for_sale", Value.Available_For_Sale);
      Swagger.Streams.Deserialize (Object, "avail_from", Value.Avail_From);
      Swagger.Streams.Deserialize (Object, "weight", Value.Weight);
      Swagger.Streams.Deserialize (Object, "length", Value.Length);
      Swagger.Streams.Deserialize (Object, "width", Value.Width);
      Swagger.Streams.Deserialize (Object, "height", Value.Height);
      Swagger.Streams.Deserialize (Object, "dimensions_unit", Value.Dimensions_Unit);
      Swagger.Streams.Deserialize (Object, "weight_unit", Value.Weight_Unit);
      Swagger.Streams.Deserialize (Object, "manage_stock", Value.Manage_Stock);
      Swagger.Streams.Deserialize (Object, "in_stock", Value.In_Stock);
      Swagger.Streams.Deserialize (Object, "backorder_status", Value.Backorder_Status);
      Swagger.Streams.Deserialize (Object, "is_free_shipping", Value.Is_Free_Shipping);
      Swagger.Streams.Deserialize (Object, "is_virtual", Value.Is_Virtual);
      Swagger.Streams.Deserialize (Object, "taxable", Value.Taxable);
      Swagger.Streams.Deserialize (Object, "downloadable", Value.Downloadable);
      Swagger.Streams.Deserialize (Object, "warehouse_id", Value.Warehouse_Id);
      Swagger.Streams.Deserialize (Object, "tax_class_id", Value.Tax_Class_Id);
      Swagger.Streams.Deserialize (Object, "categories_ids", Value.Categories_Ids);
      Swagger.Streams.Deserialize (Object, "meta_title", Value.Meta_Title);
      Swagger.Streams.Deserialize (Object, "meta_description", Value.Meta_Description);
      Swagger.Streams.Deserialize (Object, "meta_keywords", Value.Meta_Keywords);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "seo_url", Value.Seo_Url);
      Swagger.Streams.Deserialize (Object, "manufacturer", Value.Manufacturer);
      Swagger.Streams.Deserialize (Object, "manufacturer_id", Value.Manufacturer_Id);
      Swagger.Streams.Deserialize (Object, "mpn", Value.Mpn);
      Swagger.Streams.Deserialize (Object, "gtin", Value.Gtin);
      Swagger.Streams.Deserialize (Object, "upc", Value.Upc);
      Swagger.Streams.Deserialize (Object, "isbn", Value.Isbn);
      Swagger.Streams.Deserialize (Object, "ean", Value.Ean);
      Swagger.Streams.Deserialize (Object, "barcode", Value.Barcode);
      Deserialize (Object, "images", Value.Images);
      Swagger.Streams.Deserialize (Object, "related_products_ids", Value.Related_Products_Ids);
      Swagger.Streams.Deserialize (Object, "up_sell_products_ids", Value.Up_Sell_Products_Ids);
      Swagger.Streams.Deserialize (Object, "cross_sell_products_ids", Value.Cross_Sell_Products_Ids);
      Swagger.Streams.Deserialize (Object, "tags", Value.Tags);
      Swagger.Streams.Deserialize (Object, "search_keywords", Value.Search_Keywords);
      Swagger.Streams.Deserialize (Object, "harmonized_system_code", Value.Harmonized_System_Code);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductUpdateBatchPayloadInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductUpdateBatchPayloadInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductUpdateBatch_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Nested_Items_Update_Behaviour.Is_Null then
         Into.Write_Entity ("nested_items_update_behaviour", Value.Nested_Items_Update_Behaviour);
      end if;
      if not Value.Clear_Cache.Is_Null then
         Into.Write_Entity ("clear_cache", Value.Clear_Cache);
      end if;
      if not Value.Reindex.Is_Null then
         Into.Write_Entity ("reindex", Value.Reindex);
      end if;
      Serialize (Into, "payload", Value.Payload);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductUpdateBatch_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductUpdateBatch_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "nested_items_update_behaviour", Value.Nested_Items_Update_Behaviour);
      Swagger.Streams.Deserialize (Object, "clear_cache", Value.Clear_Cache);
      Swagger.Streams.Deserialize (Object, "reindex", Value.Reindex);
      Deserialize (Object, "payload", Value.Payload);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductUpdateBatch_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductUpdateBatch_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductVariantAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductVariantAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductVariantAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductVariantAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductVariantAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductVariantAddBatchPayloadInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("product_id", Value.Product_Id);
      Serialize (Into, "combination", Value.Combination);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Short_Description.Is_Null then
         Into.Write_Entity ("short_description", Value.Short_Description);
      end if;
      Into.Write_Entity ("sku", Value.Sku);
      if not Value.Model.Is_Null then
         Into.Write_Entity ("model", Value.Model);
      end if;
      Serialize (Into, "price", Value.Price);
      Serialize (Into, "old_price", Value.Old_Price);
      Serialize (Into, "cost_price", Value.Cost_Price);
      Serialize (Into, "special_price", Value.Special_Price);
      if not Value.Sprice_Create.Is_Null then
         Into.Write_Entity ("sprice_create", Value.Sprice_Create);
      end if;
      if not Value.Sprice_Expire.Is_Null then
         Into.Write_Entity ("sprice_expire", Value.Sprice_Expire);
      end if;
      Serialize (Into, "advanced_prices", Value.Advanced_Prices);
      Serialize (Into, "meta_title", Value.Meta_Title);
      Serialize (Into, "meta_description", Value.Meta_Description);
      Serialize (Into, "meta_keywords", Value.Meta_Keywords);
      Serialize (Into, "categories_ids", Value.Categories_Ids);
      Serialize (Into, "stores_ids", Value.Stores_Ids);
      Serialize (Into, "weight", Value.Weight);
      Serialize (Into, "width", Value.Width);
      Serialize (Into, "height", Value.Height);
      Serialize (Into, "length", Value.Length);
      if not Value.Weight_Unit.Is_Null then
         Into.Write_Entity ("weight_unit", Value.Weight_Unit);
      end if;
      if not Value.Warehouse_Id.Is_Null then
         Into.Write_Entity ("warehouse_id", Value.Warehouse_Id);
      end if;
      Serialize (Into, "quantity", Value.Quantity);
      if not Value.Manage_Stock.Is_Null then
         Into.Write_Entity ("manage_stock", Value.Manage_Stock);
      end if;
      if not Value.In_Stock.Is_Null then
         Into.Write_Entity ("in_stock", Value.In_Stock);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.Lang_Id.Is_Null then
         Into.Write_Entity ("lang_id", Value.Lang_Id);
      end if;
      if not Value.Tax_Class_Id.Is_Null then
         Into.Write_Entity ("tax_class_id", Value.Tax_Class_Id);
      end if;
      if not Value.Backorder_Status.Is_Null then
         Into.Write_Entity ("backorder_status", Value.Backorder_Status);
      end if;
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      if not Value.Visible.Is_Null then
         Into.Write_Entity ("visible", Value.Visible);
      end if;
      if not Value.Is_Virtual.Is_Null then
         Into.Write_Entity ("is_virtual", Value.Is_Virtual);
      end if;
      if not Value.Downloadable.Is_Null then
         Into.Write_Entity ("downloadable", Value.Downloadable);
      end if;
      if not Value.Is_Default.Is_Null then
         Into.Write_Entity ("is_default", Value.Is_Default);
      end if;
      if not Value.Upc.Is_Null then
         Into.Write_Entity ("upc", Value.Upc);
      end if;
      if not Value.Isbn.Is_Null then
         Into.Write_Entity ("isbn", Value.Isbn);
      end if;
      if not Value.Mpn.Is_Null then
         Into.Write_Entity ("mpn", Value.Mpn);
      end if;
      if not Value.Ean.Is_Null then
         Into.Write_Entity ("ean", Value.Ean);
      end if;
      if not Value.Barcode.Is_Null then
         Into.Write_Entity ("barcode", Value.Barcode);
      end if;
      if not Value.Available_For_Sale.Is_Null then
         Into.Write_Entity ("available_for_sale", Value.Available_For_Sale);
      end if;
      if not Value.Is_Free_Shipping.Is_Null then
         Into.Write_Entity ("is_free_shipping", Value.Is_Free_Shipping);
      end if;
      if not Value.Taxable.Is_Null then
         Into.Write_Entity ("taxable", Value.Taxable);
      end if;
      if not Value.Seo_Url.Is_Null then
         Into.Write_Entity ("seo_url", Value.Seo_Url);
      end if;
      if not Value.Manufacturer_Id.Is_Null then
         Into.Write_Entity ("manufacturer_id", Value.Manufacturer_Id);
      end if;
      if not Value.Harmonized_System_Code.Is_Null then
         Into.Write_Entity ("harmonized_system_code", Value.Harmonized_System_Code);
      end if;
      if not Swagger.Is_Null (Value.Marketplace_Item_Properties) then
         Into.Write_Entity ("marketplace_item_properties", Value.Marketplace_Item_Properties);
      end if;
      Serialize (Into, "images", Value.Images);
      Serialize (Into, "product_images_ids", Value.Product_Images_Ids);
      Serialize (Into, "related_products_ids", Value.Related_Products_Ids);
      Serialize (Into, "up_sell_products_ids", Value.Up_Sell_Products_Ids);
      Serialize (Into, "cross_sell_products_ids", Value.Cross_Sell_Products_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductVariantAddBatchPayloadInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductVariantAddBatchPayloadInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Deserialize (Object, "combination", Value.Combination);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "short_description", Value.Short_Description);
      Swagger.Streams.Deserialize (Object, "sku", Value.Sku);
      Swagger.Streams.Deserialize (Object, "model", Value.Model);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "old_price", Value.Old_Price);
      Swagger.Streams.Deserialize (Object, "cost_price", Value.Cost_Price);
      Swagger.Streams.Deserialize (Object, "special_price", Value.Special_Price);
      Swagger.Streams.Deserialize (Object, "sprice_create", Value.Sprice_Create);
      Swagger.Streams.Deserialize (Object, "sprice_expire", Value.Sprice_Expire);
      Deserialize (Object, "advanced_prices", Value.Advanced_Prices);
      Swagger.Streams.Deserialize (Object, "meta_title", Value.Meta_Title);
      Swagger.Streams.Deserialize (Object, "meta_description", Value.Meta_Description);
      Swagger.Streams.Deserialize (Object, "meta_keywords", Value.Meta_Keywords);
      Swagger.Streams.Deserialize (Object, "categories_ids", Value.Categories_Ids);
      Swagger.Streams.Deserialize (Object, "stores_ids", Value.Stores_Ids);
      Swagger.Streams.Deserialize (Object, "weight", Value.Weight);
      Swagger.Streams.Deserialize (Object, "width", Value.Width);
      Swagger.Streams.Deserialize (Object, "height", Value.Height);
      Swagger.Streams.Deserialize (Object, "length", Value.Length);
      Swagger.Streams.Deserialize (Object, "weight_unit", Value.Weight_Unit);
      Swagger.Streams.Deserialize (Object, "warehouse_id", Value.Warehouse_Id);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
      Swagger.Streams.Deserialize (Object, "manage_stock", Value.Manage_Stock);
      Swagger.Streams.Deserialize (Object, "in_stock", Value.In_Stock);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "lang_id", Value.Lang_Id);
      Swagger.Streams.Deserialize (Object, "tax_class_id", Value.Tax_Class_Id);
      Swagger.Streams.Deserialize (Object, "backorder_status", Value.Backorder_Status);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "visible", Value.Visible);
      Swagger.Streams.Deserialize (Object, "is_virtual", Value.Is_Virtual);
      Swagger.Streams.Deserialize (Object, "downloadable", Value.Downloadable);
      Swagger.Streams.Deserialize (Object, "is_default", Value.Is_Default);
      Swagger.Streams.Deserialize (Object, "upc", Value.Upc);
      Swagger.Streams.Deserialize (Object, "isbn", Value.Isbn);
      Swagger.Streams.Deserialize (Object, "mpn", Value.Mpn);
      Swagger.Streams.Deserialize (Object, "ean", Value.Ean);
      Swagger.Streams.Deserialize (Object, "barcode", Value.Barcode);
      Swagger.Streams.Deserialize (Object, "available_for_sale", Value.Available_For_Sale);
      Swagger.Streams.Deserialize (Object, "is_free_shipping", Value.Is_Free_Shipping);
      Swagger.Streams.Deserialize (Object, "taxable", Value.Taxable);
      Swagger.Streams.Deserialize (Object, "seo_url", Value.Seo_Url);
      Swagger.Streams.Deserialize (Object, "manufacturer_id", Value.Manufacturer_Id);
      Swagger.Streams.Deserialize (Object, "harmonized_system_code", Value.Harmonized_System_Code);
      Swagger.Streams.Deserialize (Object, "marketplace_item_properties", Value.Marketplace_Item_Properties);
      Deserialize (Object, "images", Value.Images);
      Swagger.Streams.Deserialize (Object, "product_images_ids", Value.Product_Images_Ids);
      Swagger.Streams.Deserialize (Object, "related_products_ids", Value.Related_Products_Ids);
      Swagger.Streams.Deserialize (Object, "up_sell_products_ids", Value.Up_Sell_Products_Ids);
      Swagger.Streams.Deserialize (Object, "cross_sell_products_ids", Value.Cross_Sell_Products_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductVariantAddBatchPayloadInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductVariantAddBatchPayloadInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductVariantAddBatch_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Clear_Cache.Is_Null then
         Into.Write_Entity ("clear_cache", Value.Clear_Cache);
      end if;
      if not Value.Reindex.Is_Null then
         Into.Write_Entity ("reindex", Value.Reindex);
      end if;
      Serialize (Into, "payload", Value.Payload);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductVariantAddBatch_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductVariantAddBatch_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "clear_cache", Value.Clear_Cache);
      Swagger.Streams.Deserialize (Object, "reindex", Value.Reindex);
      Deserialize (Object, "payload", Value.Payload);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductVariantAddBatch_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductVariantAddBatch_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductVariantCount200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductVariantCount200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductVariantCount200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductVariantCount200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductVariantCount200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductVariantDeleteBatch_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Clear_Cache.Is_Null then
         Into.Write_Entity ("clear_cache", Value.Clear_Cache);
      end if;
      if not Value.Reindex.Is_Null then
         Into.Write_Entity ("reindex", Value.Reindex);
      end if;
      Serialize (Into, "payload", Value.Payload);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductVariantDeleteBatch_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductVariantDeleteBatch_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "clear_cache", Value.Clear_Cache);
      Swagger.Streams.Deserialize (Object, "reindex", Value.Reindex);
      Deserialize (Object, "payload", Value.Payload);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductVariantDeleteBatch_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductVariantDeleteBatch_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductVariantImageAdd200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductVariantImageAdd200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductVariantImageAdd200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductVariantImageAdd200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductVariantImageAdd200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductVariantList200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "variant", Value.Variant);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductVariantList200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductVariantList200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "variant", Value.Variant);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductVariantList200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductVariantList200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductVariantList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductVariantList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductVariantList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductVariantList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductVariantList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductVariantPriceAdd_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Product_Id.Is_Null then
         Into.Write_Entity ("product_id", Value.Product_Id);
      end if;
      Serialize (Into, "group_prices", Value.Group_Prices);
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductVariantPriceAdd_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductVariantPriceAdd_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Deserialize (Object, "group_prices", Value.Group_Prices);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductVariantPriceAdd_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductVariantPriceAdd_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductVariantPriceUpdate_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Product_Id.Is_Null then
         Into.Write_Entity ("product_id", Value.Product_Id);
      end if;
      Serialize (Into, "group_prices", Value.Group_Prices);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductVariantPriceUpdate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductVariantPriceUpdate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Deserialize (Object, "group_prices", Value.Group_Prices);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductVariantPriceUpdate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductVariantPriceUpdate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductVariantUpdateBatchPayloadInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("product_id", Value.Product_Id);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Short_Description.Is_Null then
         Into.Write_Entity ("short_description", Value.Short_Description);
      end if;
      if not Value.Sku.Is_Null then
         Into.Write_Entity ("sku", Value.Sku);
      end if;
      if not Value.Upc.Is_Null then
         Into.Write_Entity ("upc", Value.Upc);
      end if;
      if not Value.Mpn.Is_Null then
         Into.Write_Entity ("mpn", Value.Mpn);
      end if;
      if not Value.Gtin.Is_Null then
         Into.Write_Entity ("gtin", Value.Gtin);
      end if;
      if not Value.Isbn.Is_Null then
         Into.Write_Entity ("isbn", Value.Isbn);
      end if;
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      Serialize (Into, "price", Value.Price);
      Serialize (Into, "special_price", Value.Special_Price);
      Serialize (Into, "cost_price", Value.Cost_Price);
      Serialize (Into, "retail_price", Value.Retail_Price);
      Serialize (Into, "advanced_prices", Value.Advanced_Prices);
      Serialize (Into, "quantity", Value.Quantity);
      Serialize (Into, "reserve_quantity", Value.Reserve_Quantity);
      Serialize (Into, "increase_quantity", Value.Increase_Quantity);
      Serialize (Into, "reduce_quantity", Value.Reduce_Quantity);
      if not Value.Warehouse_Id.Is_Null then
         Into.Write_Entity ("warehouse_id", Value.Warehouse_Id);
      end if;
      if not Value.Manufacturer_Id.Is_Null then
         Into.Write_Entity ("manufacturer_id", Value.Manufacturer_Id);
      end if;
      Serialize (Into, "weight", Value.Weight);
      Serialize (Into, "height", Value.Height);
      Serialize (Into, "length", Value.Length);
      Serialize (Into, "width", Value.Width);
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.Lang_Id.Is_Null then
         Into.Write_Entity ("lang_id", Value.Lang_Id);
      end if;
      if not Value.Tax_Class_Id.Is_Null then
         Into.Write_Entity ("tax_class_id", Value.Tax_Class_Id);
      end if;
      if not Value.Backorder_Status.Is_Null then
         Into.Write_Entity ("backorder_status", Value.Backorder_Status);
      end if;
      if not Value.Visible.Is_Null then
         Into.Write_Entity ("visible", Value.Visible);
      end if;
      if not Value.Is_Default.Is_Null then
         Into.Write_Entity ("is_default", Value.Is_Default);
      end if;
      if not Value.In_Stock.Is_Null then
         Into.Write_Entity ("in_stock", Value.In_Stock);
      end if;
      if not Value.Is_Virtual.Is_Null then
         Into.Write_Entity ("is_virtual", Value.Is_Virtual);
      end if;
      if not Value.Downloadable.Is_Null then
         Into.Write_Entity ("downloadable", Value.Downloadable);
      end if;
      if not Value.Manage_Stock.Is_Null then
         Into.Write_Entity ("manage_stock", Value.Manage_Stock);
      end if;
      if not Value.Is_Free_Shipping.Is_Null then
         Into.Write_Entity ("is_free_shipping", Value.Is_Free_Shipping);
      end if;
      if not Value.Seo_Url.Is_Null then
         Into.Write_Entity ("seo_url", Value.Seo_Url);
      end if;
      if not Value.Meta_Title.Is_Null then
         Into.Write_Entity ("meta_title", Value.Meta_Title);
      end if;
      if not Value.Meta_Description.Is_Null then
         Into.Write_Entity ("meta_description", Value.Meta_Description);
      end if;
      Serialize (Into, "meta_keywords", Value.Meta_Keywords);
      Serialize (Into, "categories_ids", Value.Categories_Ids);
      Serialize (Into, "stores_ids", Value.Stores_Ids);
      Serialize (Into, "images", Value.Images);
      Serialize (Into, "product_images_ids", Value.Product_Images_Ids);
      Serialize (Into, "related_products_ids", Value.Related_Products_Ids);
      Serialize (Into, "up_sell_products_ids", Value.Up_Sell_Products_Ids);
      Serialize (Into, "cross_sell_products_ids", Value.Cross_Sell_Products_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductVariantUpdateBatchPayloadInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductVariantUpdateBatchPayloadInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "short_description", Value.Short_Description);
      Swagger.Streams.Deserialize (Object, "sku", Value.Sku);
      Swagger.Streams.Deserialize (Object, "upc", Value.Upc);
      Swagger.Streams.Deserialize (Object, "mpn", Value.Mpn);
      Swagger.Streams.Deserialize (Object, "gtin", Value.Gtin);
      Swagger.Streams.Deserialize (Object, "isbn", Value.Isbn);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "special_price", Value.Special_Price);
      Swagger.Streams.Deserialize (Object, "cost_price", Value.Cost_Price);
      Swagger.Streams.Deserialize (Object, "retail_price", Value.Retail_Price);
      Deserialize (Object, "advanced_prices", Value.Advanced_Prices);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
      Swagger.Streams.Deserialize (Object, "reserve_quantity", Value.Reserve_Quantity);
      Swagger.Streams.Deserialize (Object, "increase_quantity", Value.Increase_Quantity);
      Swagger.Streams.Deserialize (Object, "reduce_quantity", Value.Reduce_Quantity);
      Swagger.Streams.Deserialize (Object, "warehouse_id", Value.Warehouse_Id);
      Swagger.Streams.Deserialize (Object, "manufacturer_id", Value.Manufacturer_Id);
      Swagger.Streams.Deserialize (Object, "weight", Value.Weight);
      Swagger.Streams.Deserialize (Object, "height", Value.Height);
      Swagger.Streams.Deserialize (Object, "length", Value.Length);
      Swagger.Streams.Deserialize (Object, "width", Value.Width);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "lang_id", Value.Lang_Id);
      Swagger.Streams.Deserialize (Object, "tax_class_id", Value.Tax_Class_Id);
      Swagger.Streams.Deserialize (Object, "backorder_status", Value.Backorder_Status);
      Swagger.Streams.Deserialize (Object, "visible", Value.Visible);
      Swagger.Streams.Deserialize (Object, "is_default", Value.Is_Default);
      Swagger.Streams.Deserialize (Object, "in_stock", Value.In_Stock);
      Swagger.Streams.Deserialize (Object, "is_virtual", Value.Is_Virtual);
      Swagger.Streams.Deserialize (Object, "downloadable", Value.Downloadable);
      Swagger.Streams.Deserialize (Object, "manage_stock", Value.Manage_Stock);
      Swagger.Streams.Deserialize (Object, "is_free_shipping", Value.Is_Free_Shipping);
      Swagger.Streams.Deserialize (Object, "seo_url", Value.Seo_Url);
      Swagger.Streams.Deserialize (Object, "meta_title", Value.Meta_Title);
      Swagger.Streams.Deserialize (Object, "meta_description", Value.Meta_Description);
      Swagger.Streams.Deserialize (Object, "meta_keywords", Value.Meta_Keywords);
      Swagger.Streams.Deserialize (Object, "categories_ids", Value.Categories_Ids);
      Swagger.Streams.Deserialize (Object, "stores_ids", Value.Stores_Ids);
      Deserialize (Object, "images", Value.Images);
      Swagger.Streams.Deserialize (Object, "product_images_ids", Value.Product_Images_Ids);
      Swagger.Streams.Deserialize (Object, "related_products_ids", Value.Related_Products_Ids);
      Swagger.Streams.Deserialize (Object, "up_sell_products_ids", Value.Up_Sell_Products_Ids);
      Swagger.Streams.Deserialize (Object, "cross_sell_products_ids", Value.Cross_Sell_Products_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductVariantUpdateBatchPayloadInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductVariantUpdateBatchPayloadInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductVariantUpdateBatch_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Nested_Items_Update_Behaviour.Is_Null then
         Into.Write_Entity ("nested_items_update_behaviour", Value.Nested_Items_Update_Behaviour);
      end if;
      if not Value.Clear_Cache.Is_Null then
         Into.Write_Entity ("clear_cache", Value.Clear_Cache);
      end if;
      if not Value.Reindex.Is_Null then
         Into.Write_Entity ("reindex", Value.Reindex);
      end if;
      Serialize (Into, "payload", Value.Payload);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductVariantUpdateBatch_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductVariantUpdateBatch_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "nested_items_update_behaviour", Value.Nested_Items_Update_Behaviour);
      Swagger.Streams.Deserialize (Object, "clear_cache", Value.Clear_Cache);
      Swagger.Streams.Deserialize (Object, "reindex", Value.Reindex);
      Deserialize (Object, "payload", Value.Payload);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductVariantUpdateBatch_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductVariantUpdateBatch_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductVariantUpdate_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Product_Id.Is_Null then
         Into.Write_Entity ("product_id", Value.Product_Id);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.Lang_Id.Is_Null then
         Into.Write_Entity ("lang_id", Value.Lang_Id);
      end if;
      Serialize (Into, "options", Value.Options);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Short_Description.Is_Null then
         Into.Write_Entity ("short_description", Value.Short_Description);
      end if;
      if not Value.Model.Is_Null then
         Into.Write_Entity ("model", Value.Model);
      end if;
      if not Value.Sku.Is_Null then
         Into.Write_Entity ("sku", Value.Sku);
      end if;
      if not Value.Visible.Is_Null then
         Into.Write_Entity ("visible", Value.Visible);
      end if;
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      if not Value.Backorder_Status.Is_Null then
         Into.Write_Entity ("backorder_status", Value.Backorder_Status);
      end if;
      if not Value.Available_For_Sale.Is_Null then
         Into.Write_Entity ("available_for_sale", Value.Available_For_Sale);
      end if;
      if not Value.Avail.Is_Null then
         Into.Write_Entity ("avail", Value.Avail);
      end if;
      if not Value.Is_Default.Is_Null then
         Into.Write_Entity ("is_default", Value.Is_Default);
      end if;
      if not Value.Is_Free_Shipping.Is_Null then
         Into.Write_Entity ("is_free_shipping", Value.Is_Free_Shipping);
      end if;
      if not Value.Taxable.Is_Null then
         Into.Write_Entity ("taxable", Value.Taxable);
      end if;
      if not Value.Tax_Class_Id.Is_Null then
         Into.Write_Entity ("tax_class_id", Value.Tax_Class_Id);
      end if;
      if not Value.Is_Virtual.Is_Null then
         Into.Write_Entity ("is_virtual", Value.Is_Virtual);
      end if;
      if not Value.Manage_Stock.Is_Null then
         Into.Write_Entity ("manage_stock", Value.Manage_Stock);
      end if;
      if not Value.In_Stock.Is_Null then
         Into.Write_Entity ("in_stock", Value.In_Stock);
      end if;
      if not Value.Warehouse_Id.Is_Null then
         Into.Write_Entity ("warehouse_id", Value.Warehouse_Id);
      end if;
      Serialize (Into, "reserve_quantity", Value.Reserve_Quantity);
      Serialize (Into, "quantity", Value.Quantity);
      Serialize (Into, "increase_quantity", Value.Increase_Quantity);
      Serialize (Into, "reduce_quantity", Value.Reduce_Quantity);
      Serialize (Into, "price", Value.Price);
      Serialize (Into, "special_price", Value.Special_Price);
      Serialize (Into, "retail_price", Value.Retail_Price);
      Serialize (Into, "old_price", Value.Old_Price);
      Serialize (Into, "cost_price", Value.Cost_Price);
      Serialize (Into, "fixed_cost_shipping_price", Value.Fixed_Cost_Shipping_Price);
      if not Value.Sprice_Create.Is_Null then
         Into.Write_Entity ("sprice_create", Value.Sprice_Create);
      end if;
      if not Value.Sprice_Expire.Is_Null then
         Into.Write_Entity ("sprice_expire", Value.Sprice_Expire);
      end if;
      Serialize (Into, "weight", Value.Weight);
      if not Value.Barcode.Is_Null then
         Into.Write_Entity ("barcode", Value.Barcode);
      end if;
      Serialize (Into, "width", Value.Width);
      if not Value.Weight_Unit.Is_Null then
         Into.Write_Entity ("weight_unit", Value.Weight_Unit);
      end if;
      Serialize (Into, "height", Value.Height);
      Serialize (Into, "length", Value.Length);
      if not Value.Gtin.Is_Null then
         Into.Write_Entity ("gtin", Value.Gtin);
      end if;
      if not Value.Upc.Is_Null then
         Into.Write_Entity ("upc", Value.Upc);
      end if;
      if not Value.Mpn.Is_Null then
         Into.Write_Entity ("mpn", Value.Mpn);
      end if;
      if not Value.Ean.Is_Null then
         Into.Write_Entity ("ean", Value.Ean);
      end if;
      if not Value.Isbn.Is_Null then
         Into.Write_Entity ("isbn", Value.Isbn);
      end if;
      if not Value.Harmonized_System_Code.Is_Null then
         Into.Write_Entity ("harmonized_system_code", Value.Harmonized_System_Code);
      end if;
      if not Value.Country_Of_Origin.Is_Null then
         Into.Write_Entity ("country_of_origin", Value.Country_Of_Origin);
      end if;
      if not Value.Meta_Title.Is_Null then
         Into.Write_Entity ("meta_title", Value.Meta_Title);
      end if;
      if not Value.Meta_Description.Is_Null then
         Into.Write_Entity ("meta_description", Value.Meta_Description);
      end if;
      if not Value.Meta_Keywords.Is_Null then
         Into.Write_Entity ("meta_keywords", Value.Meta_Keywords);
      end if;
      if not Value.Reindex.Is_Null then
         Into.Write_Entity ("reindex", Value.Reindex);
      end if;
      if not Value.Clear_Cache.Is_Null then
         Into.Write_Entity ("clear_cache", Value.Clear_Cache);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductVariantUpdate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductVariantUpdate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "lang_id", Value.Lang_Id);
      Deserialize (Object, "options", Value.Options);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "short_description", Value.Short_Description);
      Swagger.Streams.Deserialize (Object, "model", Value.Model);
      Swagger.Streams.Deserialize (Object, "sku", Value.Sku);
      Swagger.Streams.Deserialize (Object, "visible", Value.Visible);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "backorder_status", Value.Backorder_Status);
      Swagger.Streams.Deserialize (Object, "available_for_sale", Value.Available_For_Sale);
      Swagger.Streams.Deserialize (Object, "avail", Value.Avail);
      Swagger.Streams.Deserialize (Object, "is_default", Value.Is_Default);
      Swagger.Streams.Deserialize (Object, "is_free_shipping", Value.Is_Free_Shipping);
      Swagger.Streams.Deserialize (Object, "taxable", Value.Taxable);
      Swagger.Streams.Deserialize (Object, "tax_class_id", Value.Tax_Class_Id);
      Swagger.Streams.Deserialize (Object, "is_virtual", Value.Is_Virtual);
      Swagger.Streams.Deserialize (Object, "manage_stock", Value.Manage_Stock);
      Swagger.Streams.Deserialize (Object, "in_stock", Value.In_Stock);
      Swagger.Streams.Deserialize (Object, "warehouse_id", Value.Warehouse_Id);
      Swagger.Streams.Deserialize (Object, "reserve_quantity", Value.Reserve_Quantity);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
      Swagger.Streams.Deserialize (Object, "increase_quantity", Value.Increase_Quantity);
      Swagger.Streams.Deserialize (Object, "reduce_quantity", Value.Reduce_Quantity);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "special_price", Value.Special_Price);
      Swagger.Streams.Deserialize (Object, "retail_price", Value.Retail_Price);
      Swagger.Streams.Deserialize (Object, "old_price", Value.Old_Price);
      Swagger.Streams.Deserialize (Object, "cost_price", Value.Cost_Price);
      Swagger.Streams.Deserialize (Object, "fixed_cost_shipping_price", Value.Fixed_Cost_Shipping_Price);
      Swagger.Streams.Deserialize (Object, "sprice_create", Value.Sprice_Create);
      Swagger.Streams.Deserialize (Object, "sprice_expire", Value.Sprice_Expire);
      Swagger.Streams.Deserialize (Object, "weight", Value.Weight);
      Swagger.Streams.Deserialize (Object, "barcode", Value.Barcode);
      Swagger.Streams.Deserialize (Object, "width", Value.Width);
      Swagger.Streams.Deserialize (Object, "weight_unit", Value.Weight_Unit);
      Swagger.Streams.Deserialize (Object, "height", Value.Height);
      Swagger.Streams.Deserialize (Object, "length", Value.Length);
      Swagger.Streams.Deserialize (Object, "gtin", Value.Gtin);
      Swagger.Streams.Deserialize (Object, "upc", Value.Upc);
      Swagger.Streams.Deserialize (Object, "mpn", Value.Mpn);
      Swagger.Streams.Deserialize (Object, "ean", Value.Ean);
      Swagger.Streams.Deserialize (Object, "isbn", Value.Isbn);
      Swagger.Streams.Deserialize (Object, "harmonized_system_code", Value.Harmonized_System_Code);
      Swagger.Streams.Deserialize (Object, "country_of_origin", Value.Country_Of_Origin);
      Swagger.Streams.Deserialize (Object, "meta_title", Value.Meta_Title);
      Swagger.Streams.Deserialize (Object, "meta_description", Value.Meta_Description);
      Swagger.Streams.Deserialize (Object, "meta_keywords", Value.Meta_Keywords);
      Swagger.Streams.Deserialize (Object, "reindex", Value.Reindex);
      Swagger.Streams.Deserialize (Object, "clear_cache", Value.Clear_Cache);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductVariantUpdate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductVariantUpdate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseAttributeAttributesetListResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "attribute_set", Value.Attribute_Set);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseAttributeAttributesetListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseAttributeAttributesetListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "attribute_set", Value.Attribute_Set);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseAttributeAttributesetListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseAttributeAttributesetListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseAttributeGroupListResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "group", Value.Group);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseAttributeGroupListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseAttributeGroupListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "group", Value.Group);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseAttributeGroupListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseAttributeGroupListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseAttributeListResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Attributes_Count.Is_Null then
         Into.Write_Entity ("attributes_count", Value.Attributes_Count);
      end if;
      Serialize (Into, "attribute", Value.Attribute);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseAttributeListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseAttributeListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "attributes_count", Value.Attributes_Count);
      Deserialize (Object, "attribute", Value.Attribute);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseAttributeListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseAttributeListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseBatchJobListResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "jobs", Value.Jobs);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseBatchJobListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseBatchJobListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "jobs", Value.Jobs);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseBatchJobListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseBatchJobListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseBatchJobResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseBatchJobResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseBatchJobResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseBatchJobResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseBatchJobResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogPriceRule_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Gid.Is_Null then
         Into.Write_Entity ("gid", Value.Gid);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Short_Description.Is_Null then
         Into.Write_Entity ("short_description", Value.Short_Description);
      end if;
      if not Value.Avail.Is_Null then
         Into.Write_Entity ("avail", Value.Avail);
      end if;
      Serialize (Into, "actions", Value.Actions);
      Serialize (Into, "created_time", Value.Created_Time);
      Serialize (Into, "date_start", Value.Date_Start);
      Serialize (Into, "date_end", Value.Date_End);
      Serialize (Into, "usage_count", Value.Usage_Count);
      Serialize (Into, "conditions", Value.Conditions);
      if not Value.Uses_Per_Order_Limit.Is_Null then
         Into.Write_Entity ("uses_per_order_limit", Value.Uses_Per_Order_Limit);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogPriceRule_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogPriceRule_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "gid", Value.Gid);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "short_description", Value.Short_Description);
      Swagger.Streams.Deserialize (Object, "avail", Value.Avail);
      Deserialize (Object, "actions", Value.Actions);
      Deserialize (Object, "created_time", Value.Created_Time);
      Deserialize (Object, "date_start", Value.Date_Start);
      Deserialize (Object, "date_end", Value.Date_End);
      Swagger.Streams.Deserialize (Object, "usage_count", Value.Usage_Count);
      Deserialize (Object, "conditions", Value.Conditions);
      Swagger.Streams.Deserialize (Object, "uses_per_order_limit", Value.Uses_Per_Order_Limit);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogPriceRule_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogPriceRule_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseCartCatalogPriceRulesListResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Catalog_Price_Rules_Count.Is_Null then
         Into.Write_Entity ("catalog_price_rules_count", Value.Catalog_Price_Rules_Count);
      end if;
      Serialize (Into, "catalog_price_rules", Value.Catalog_Price_Rules);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseCartCatalogPriceRulesListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseCartCatalogPriceRulesListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_price_rules_count", Value.Catalog_Price_Rules_Count);
      Deserialize (Object, "catalog_price_rules", Value.Catalog_Price_Rules);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseCartCatalogPriceRulesListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseCartCatalogPriceRulesListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Coupon_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      Serialize (Into, "codes", Value.Codes);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      Serialize (Into, "actions", Value.Actions);
      Serialize (Into, "date_start", Value.Date_Start);
      Serialize (Into, "date_end", Value.Date_End);
      if not Value.Avail.Is_Null then
         Into.Write_Entity ("avail", Value.Avail);
      end if;
      if not Value.Priority.Is_Null then
         Into.Write_Entity ("priority", Value.Priority);
      end if;
      if not Value.Used_Times.Is_Null then
         Into.Write_Entity ("used_times", Value.Used_Times);
      end if;
      if not Value.Usage_Limit.Is_Null then
         Into.Write_Entity ("usage_limit", Value.Usage_Limit);
      end if;
      if not Value.Usage_Limit_Per_Customer.Is_Null then
         Into.Write_Entity ("usage_limit_per_customer", Value.Usage_Limit_Per_Customer);
      end if;
      if not Value.Logic_Operator.Is_Null then
         Into.Write_Entity ("logic_operator", Value.Logic_Operator);
      end if;
      Serialize (Into, "conditions", Value.Conditions);
      Serialize (Into, "usage_history", Value.Usage_History);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Coupon_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Coupon_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Deserialize (Object, "codes", Value.Codes);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "actions", Value.Actions);
      Deserialize (Object, "date_start", Value.Date_Start);
      Deserialize (Object, "date_end", Value.Date_End);
      Swagger.Streams.Deserialize (Object, "avail", Value.Avail);
      Swagger.Streams.Deserialize (Object, "priority", Value.Priority);
      Swagger.Streams.Deserialize (Object, "used_times", Value.Used_Times);
      Swagger.Streams.Deserialize (Object, "usage_limit", Value.Usage_Limit);
      Swagger.Streams.Deserialize (Object, "usage_limit_per_customer", Value.Usage_Limit_Per_Customer);
      Swagger.Streams.Deserialize (Object, "logic_operator", Value.Logic_Operator);
      Deserialize (Object, "conditions", Value.Conditions);
      Deserialize (Object, "usage_history", Value.Usage_History);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Coupon_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Coupon_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseCartCouponListResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Coupon_Count.Is_Null then
         Into.Write_Entity ("coupon_count", Value.Coupon_Count);
      end if;
      Serialize (Into, "coupon", Value.Coupon);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseCartCouponListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseCartCouponListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "coupon_count", Value.Coupon_Count);
      Deserialize (Object, "coupon", Value.Coupon);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseCartCouponListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseCartCouponListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseCartGiftcardListResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "gift_card", Value.Gift_Card);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseCartGiftcardListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseCartGiftcardListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "gift_card", Value.Gift_Card);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseCartGiftcardListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseCartGiftcardListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseCartMetaDataListResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Total_Count.Is_Null then
         Into.Write_Entity ("total_count", Value.Total_Count);
      end if;
      Serialize (Into, "items", Value.Items);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseCartMetaDataListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseCartMetaDataListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "total_count", Value.Total_Count);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseCartMetaDataListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseCartMetaDataListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartShippingZone2_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Enabled.Is_Null then
         Into.Write_Entity ("enabled", Value.Enabled);
      end if;
      Serialize (Into, "countries", Value.Countries);
      Serialize (Into, "shipping_methods", Value.Shipping_Methods);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartShippingZone2_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartShippingZone2_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "enabled", Value.Enabled);
      Deserialize (Object, "countries", Value.Countries);
      Deserialize (Object, "shipping_methods", Value.Shipping_Methods);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartShippingZone2_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartShippingZone2_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseCartShippingZonesListResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "shipping_zone", Value.Shipping_Zone);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseCartShippingZonesListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseCartShippingZonesListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "shipping_zone", Value.Shipping_Zone);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseCartShippingZonesListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseCartShippingZonesListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseCategoryListResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Categories_Count.Is_Null then
         Into.Write_Entity ("categories_count", Value.Categories_Count);
      end if;
      Serialize (Into, "category", Value.Category);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseCategoryListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseCategoryListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "categories_count", Value.Categories_Count);
      Deserialize (Object, "category", Value.Category);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseCategoryListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseCategoryListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseCustomerAttributeListResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Total_Count.Is_Null then
         Into.Write_Entity ("total_count", Value.Total_Count);
      end if;
      Serialize (Into, "items", Value.Items);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseCustomerAttributeListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseCustomerAttributeListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "total_count", Value.Total_Count);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseCustomerAttributeListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseCustomerAttributeListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseCustomerGroupListResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Group_Count.Is_Null then
         Into.Write_Entity ("group_count", Value.Group_Count);
      end if;
      Serialize (Into, "group", Value.Group);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseCustomerGroupListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseCustomerGroupListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "group_count", Value.Group_Count);
      Deserialize (Object, "group", Value.Group);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseCustomerGroupListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseCustomerGroupListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseCustomerListResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Customers_Count.Is_Null then
         Into.Write_Entity ("customers_count", Value.Customers_Count);
      end if;
      Serialize (Into, "customer", Value.Customer);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseCustomerListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseCustomerListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "customers_count", Value.Customers_Count);
      Deserialize (Object, "customer", Value.Customer);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseCustomerListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseCustomerListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerWishList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Is_Public.Is_Null then
         Into.Write_Entity ("is_public", Value.Is_Public);
      end if;
      Serialize (Into, "created_at", Value.Created_At);
      Serialize (Into, "modified_at", Value.Modified_At);
      Serialize (Into, "products", Value.Products);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerWishList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerWishList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "is_public", Value.Is_Public);
      Deserialize (Object, "created_at", Value.Created_At);
      Deserialize (Object, "modified_at", Value.Modified_At);
      Deserialize (Object, "products", Value.Products);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerWishList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerWishList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseCustomerWishlistListResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Total_Count.Is_Null then
         Into.Write_Entity ("total_count", Value.Total_Count);
      end if;
      Serialize (Into, "wish_lists", Value.Wish_Lists);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseCustomerWishlistListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseCustomerWishlistListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "total_count", Value.Total_Count);
      Deserialize (Object, "wish_lists", Value.Wish_Lists);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseCustomerWishlistListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseCustomerWishlistListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MarketplaceProduct_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.U_Asin.Is_Null then
         Into.Write_Entity ("u_asin", Value.U_Asin);
      end if;
      if not Value.U_Ean.Is_Null then
         Into.Write_Entity ("u_ean", Value.U_Ean);
      end if;
      if not Value.U_Gtin.Is_Null then
         Into.Write_Entity ("u_gtin", Value.U_Gtin);
      end if;
      if not Value.U_Isbn.Is_Null then
         Into.Write_Entity ("u_isbn", Value.U_Isbn);
      end if;
      if not Value.U_Mpn.Is_Null then
         Into.Write_Entity ("u_mpn", Value.U_Mpn);
      end if;
      if not Value.U_Upc.Is_Null then
         Into.Write_Entity ("u_upc", Value.U_Upc);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      Serialize (Into, "price", Value.Price);
      Serialize (Into, "images", Value.Images);
      Serialize (Into, "product_options", Value.Product_Options);
      if not Value.Manufacturer.Is_Null then
         Into.Write_Entity ("manufacturer", Value.Manufacturer);
      end if;
      if not Value.Brand.Is_Null then
         Into.Write_Entity ("brand", Value.Brand);
      end if;
      Serialize (Into, "weight", Value.Weight);
      if not Value.Weight_Unit.Is_Null then
         Into.Write_Entity ("weight_unit", Value.Weight_Unit);
      end if;
      if not Value.Dimensions_Unit.Is_Null then
         Into.Write_Entity ("dimensions_unit", Value.Dimensions_Unit);
      end if;
      Serialize (Into, "width", Value.Width);
      Serialize (Into, "height", Value.Height);
      Serialize (Into, "length", Value.Length);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MarketplaceProduct_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MarketplaceProduct_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "u_asin", Value.U_Asin);
      Swagger.Streams.Deserialize (Object, "u_ean", Value.U_Ean);
      Swagger.Streams.Deserialize (Object, "u_gtin", Value.U_Gtin);
      Swagger.Streams.Deserialize (Object, "u_isbn", Value.U_Isbn);
      Swagger.Streams.Deserialize (Object, "u_mpn", Value.U_Mpn);
      Swagger.Streams.Deserialize (Object, "u_upc", Value.U_Upc);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Deserialize (Object, "images", Value.Images);
      Deserialize (Object, "product_options", Value.Product_Options);
      Swagger.Streams.Deserialize (Object, "manufacturer", Value.Manufacturer);
      Swagger.Streams.Deserialize (Object, "brand", Value.Brand);
      Swagger.Streams.Deserialize (Object, "weight", Value.Weight);
      Swagger.Streams.Deserialize (Object, "weight_unit", Value.Weight_Unit);
      Swagger.Streams.Deserialize (Object, "dimensions_unit", Value.Dimensions_Unit);
      Swagger.Streams.Deserialize (Object, "width", Value.Width);
      Swagger.Streams.Deserialize (Object, "height", Value.Height);
      Swagger.Streams.Deserialize (Object, "length", Value.Length);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MarketplaceProduct_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MarketplaceProduct_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseMarketplaceProductFindResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Marketplace_Products_Count.Is_Null then
         Into.Write_Entity ("marketplace_products_count", Value.Marketplace_Products_Count);
      end if;
      Serialize (Into, "marketplace_product", Value.Marketplace_Product);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseMarketplaceProductFindResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseMarketplaceProductFindResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "marketplace_products_count", Value.Marketplace_Products_Count);
      Deserialize (Object, "marketplace_product", Value.Marketplace_Product);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseMarketplaceProductFindResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseMarketplaceProductFindResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderAbandoned_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "customer", Value.Customer);
      if not Value.Basket_Id.Is_Null then
         Into.Write_Entity ("basket_id", Value.Basket_Id);
      end if;
      if not Value.Basket_Url.Is_Null then
         Into.Write_Entity ("basket_url", Value.Basket_Url);
      end if;
      Serialize (Into, "created_at", Value.Created_At);
      Serialize (Into, "modified_at", Value.Modified_At);
      Serialize (Into, "currency", Value.Currency);
      Serialize (Into, "totals", Value.Totals);
      Serialize (Into, "order_products", Value.Order_Products);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderAbandoned_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderAbandoned_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "customer", Value.Customer);
      Swagger.Streams.Deserialize (Object, "basket_id", Value.Basket_Id);
      Swagger.Streams.Deserialize (Object, "basket_url", Value.Basket_Url);
      Deserialize (Object, "created_at", Value.Created_At);
      Deserialize (Object, "modified_at", Value.Modified_At);
      Deserialize (Object, "currency", Value.Currency);
      Deserialize (Object, "totals", Value.Totals);
      Deserialize (Object, "order_products", Value.Order_Products);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderAbandoned_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderAbandoned_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseOrderAbandonedListResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "order", Value.Order);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseOrderAbandonedListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseOrderAbandonedListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "order", Value.Order);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseOrderAbandonedListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseOrderAbandonedListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseOrderListResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Orders_Count.Is_Null then
         Into.Write_Entity ("orders_count", Value.Orders_Count);
      end if;
      Serialize (Into, "order", Value.Order);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseOrderListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseOrderListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "orders_count", Value.Orders_Count);
      Deserialize (Object, "order", Value.Order);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseOrderListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseOrderListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseOrderPreestimateShippingListResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Preestimate_Shippings_Count.Is_Null then
         Into.Write_Entity ("preestimate_shippings_count", Value.Preestimate_Shippings_Count);
      end if;
      Serialize (Into, "preestimate_shippings", Value.Preestimate_Shippings);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseOrderPreestimateShippingListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseOrderPreestimateShippingListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "preestimate_shippings_count", Value.Preestimate_Shippings_Count);
      Deserialize (Object, "preestimate_shippings", Value.Preestimate_Shippings);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseOrderPreestimateShippingListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseOrderPreestimateShippingListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseOrderShipmentListResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Shipment_Count.Is_Null then
         Into.Write_Entity ("shipment_count", Value.Shipment_Count);
      end if;
      Serialize (Into, "shipment", Value.Shipment);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseOrderShipmentListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseOrderShipmentListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "shipment_count", Value.Shipment_Count);
      Deserialize (Object, "shipment", Value.Shipment);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseOrderShipmentListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseOrderShipmentListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseOrderStatusListResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "cart_order_statuses", Value.Cart_Order_Statuses);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseOrderStatusListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseOrderStatusListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "cart_order_statuses", Value.Cart_Order_Statuses);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseOrderStatusListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseOrderStatusListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseOrderTransactionListResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Transactions_Count.Is_Null then
         Into.Write_Entity ("transactions_count", Value.Transactions_Count);
      end if;
      Serialize (Into, "transactions", Value.Transactions);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseOrderTransactionListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseOrderTransactionListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "transactions_count", Value.Transactions_Count);
      Deserialize (Object, "transactions", Value.Transactions);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseOrderTransactionListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseOrderTransactionListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseProductAttributeListResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "attribute", Value.Attribute);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseProductAttributeListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseProductAttributeListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "attribute", Value.Attribute);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseProductAttributeListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseProductAttributeListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseProductBrandListResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Total_Count.Is_Null then
         Into.Write_Entity ("total_count", Value.Total_Count);
      end if;
      Serialize (Into, "brands", Value.Brands);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseProductBrandListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseProductBrandListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "total_count", Value.Total_Count);
      Deserialize (Object, "brands", Value.Brands);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseProductBrandListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseProductBrandListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseProductChildItemListResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Total_Count.Is_Null then
         Into.Write_Entity ("total_count", Value.Total_Count);
      end if;
      Serialize (Into, "children", Value.Children);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseProductChildItemListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseProductChildItemListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "total_count", Value.Total_Count);
      Deserialize (Object, "children", Value.Children);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseProductChildItemListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseProductChildItemListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseProductCurrencyListResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Total_Count.Is_Null then
         Into.Write_Entity ("total_count", Value.Total_Count);
      end if;
      Serialize (Into, "currency", Value.Currency);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseProductCurrencyListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseProductCurrencyListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "total_count", Value.Total_Count);
      Deserialize (Object, "currency", Value.Currency);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseProductCurrencyListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseProductCurrencyListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseProductListResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Products_Count.Is_Null then
         Into.Write_Entity ("products_count", Value.Products_Count);
      end if;
      Serialize (Into, "product", Value.Product);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseProductListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseProductListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "products_count", Value.Products_Count);
      Deserialize (Object, "product", Value.Product);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseProductListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseProductListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseProductOptionListResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "option", Value.Option);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseProductOptionListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseProductOptionListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "option", Value.Option);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseProductOptionListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseProductOptionListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductReview_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Product_Id.Is_Null then
         Into.Write_Entity ("product_id", Value.Product_Id);
      end if;
      if not Value.Customer_Id.Is_Null then
         Into.Write_Entity ("customer_id", Value.Customer_Id);
      end if;
      if not Value.Nick_Name.Is_Null then
         Into.Write_Entity ("nick_name", Value.Nick_Name);
      end if;
      if not Value.Email.Is_Null then
         Into.Write_Entity ("email", Value.Email);
      end if;
      if not Value.Summary.Is_Null then
         Into.Write_Entity ("summary", Value.Summary);
      end if;
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      Serialize (Into, "rating", Value.Rating);
      Serialize (Into, "ratings", Value.Ratings);
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      Serialize (Into, "created_time", Value.Created_Time);
      Serialize (Into, "medias", Value.Medias);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductReview_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductReview_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Swagger.Streams.Deserialize (Object, "customer_id", Value.Customer_Id);
      Swagger.Streams.Deserialize (Object, "nick_name", Value.Nick_Name);
      Swagger.Streams.Deserialize (Object, "email", Value.Email);
      Swagger.Streams.Deserialize (Object, "summary", Value.Summary);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
      Swagger.Streams.Deserialize (Object, "rating", Value.Rating);
      Deserialize (Object, "ratings", Value.Ratings);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "created_time", Value.Created_Time);
      Deserialize (Object, "medias", Value.Medias);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductReview_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductReview_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseProductReviewListResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Total_Count.Is_Null then
         Into.Write_Entity ("total_count", Value.Total_Count);
      end if;
      Serialize (Into, "reviews", Value.Reviews);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseProductReviewListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseProductReviewListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "total_count", Value.Total_Count);
      Deserialize (Object, "reviews", Value.Reviews);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseProductReviewListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseProductReviewListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnOrderProduct_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Product_Id.Is_Null then
         Into.Write_Entity ("product_id", Value.Product_Id);
      end if;
      if not Value.Order_Product_Id.Is_Null then
         Into.Write_Entity ("order_product_id", Value.Order_Product_Id);
      end if;
      if not Value.Sku.Is_Null then
         Into.Write_Entity ("sku", Value.Sku);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Quantity.Is_Null then
         Into.Write_Entity ("quantity", Value.Quantity);
      end if;
      Serialize (Into, "reason", Value.Reason);
      Serialize (Into, "action", Value.Action);
      if not Value.Condition.Is_Null then
         Into.Write_Entity ("condition", Value.Condition);
      end if;
      if not Value.Customer_Comment.Is_Null then
         Into.Write_Entity ("customer_comment", Value.Customer_Comment);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnOrderProduct_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnOrderProduct_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Swagger.Streams.Deserialize (Object, "order_product_id", Value.Order_Product_Id);
      Swagger.Streams.Deserialize (Object, "sku", Value.Sku);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
      Deserialize (Object, "reason", Value.Reason);
      Deserialize (Object, "action", Value.Action);
      Swagger.Streams.Deserialize (Object, "condition", Value.Condition);
      Swagger.Streams.Deserialize (Object, "customer_comment", Value.Customer_Comment);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnOrderProduct_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnOrderProduct_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Model_Return) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Order_Id.Is_Null then
         Into.Write_Entity ("order_id", Value.Order_Id);
      end if;
      if not Value.Customer_Id.Is_Null then
         Into.Write_Entity ("customer_id", Value.Customer_Id);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.Created_At.Is_Null then
         Into.Write_Entity ("created_at", Value.Created_At);
      end if;
      if not Value.Modified_At.Is_Null then
         Into.Write_Entity ("modified_at", Value.Modified_At);
      end if;
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "order_products", Value.Order_Products);
      if not Value.Comment.Is_Null then
         Into.Write_Entity ("comment", Value.Comment);
      end if;
      if not Value.Staff_Note.Is_Null then
         Into.Write_Entity ("staff_note", Value.Staff_Note);
      end if;
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Model_Return_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Model_Return) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "order_id", Value.Order_Id);
      Swagger.Streams.Deserialize (Object, "customer_id", Value.Customer_Id);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "created_at", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "modified_at", Value.Modified_At);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "order_products", Value.Order_Products);
      Swagger.Streams.Deserialize (Object, "comment", Value.Comment);
      Swagger.Streams.Deserialize (Object, "staff_note", Value.Staff_Note);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Model_Return_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Model_Return;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseReturnListResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Total_Count.Is_Null then
         Into.Write_Entity ("total_count", Value.Total_Count);
      end if;
      Serialize (Into, "returns", Value.Returns);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseReturnListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseReturnListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "total_count", Value.Total_Count);
      Deserialize (Object, "returns", Value.Returns);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseReturnListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseReturnListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseSubscriberListResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Total_Count.Is_Null then
         Into.Write_Entity ("total_count", Value.Total_Count);
      end if;
      Serialize (Into, "subscribers", Value.Subscribers);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseSubscriberListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseSubscriberListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "total_count", Value.Total_Count);
      Deserialize (Object, "subscribers", Value.Subscribers);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseSubscriberListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseSubscriberListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TaxClass_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Avail.Is_Null then
         Into.Write_Entity ("avail", Value.Avail);
      end if;
      Serialize (Into, "tax", Value.Tax);
      if not Value.Tax_Type.Is_Null then
         Into.Write_Entity ("tax_type", Value.Tax_Type);
      end if;
      Serialize (Into, "created_at", Value.Created_At);
      Serialize (Into, "modified_at", Value.Modified_At);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TaxClass_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TaxClass_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "avail", Value.Avail);
      Swagger.Streams.Deserialize (Object, "tax", Value.Tax);
      Swagger.Streams.Deserialize (Object, "tax_type", Value.Tax_Type);
      Deserialize (Object, "created_at", Value.Created_At);
      Deserialize (Object, "modified_at", Value.Modified_At);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TaxClass_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TaxClass_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseTaxClassListResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Total_Count.Is_Null then
         Into.Write_Entity ("total_count", Value.Total_Count);
      end if;
      Serialize (Into, "tax_classes", Value.Tax_Classes);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseTaxClassListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseTaxClassListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "total_count", Value.Total_Count);
      Deserialize (Object, "tax_classes", Value.Tax_Classes);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseTaxClassListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseTaxClassListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnActionList200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "return_actions", Value.Return_Actions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnActionList200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnActionList200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "return_actions", Value.Return_Actions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnActionList200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnActionList200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnActionList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnActionList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnActionList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnActionList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnActionList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnCount200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnCount200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnCount200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnCount200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnCount200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnInfo200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnInfo200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnInfo200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnInfo200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnInfo200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnReasonList200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "return_reasons", Value.Return_Reasons);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnReasonList200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnReasonList200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "return_reasons", Value.Return_Reasons);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnReasonList200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnReasonList200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnReasonList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnReasonList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnReasonList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnReasonList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnReasonList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnStatusList200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "return_statuses", Value.Return_Statuses);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnStatusList200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnStatusList200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "return_statuses", Value.Return_Statuses);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnStatusList200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnStatusList200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnStatusList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnStatusList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnStatusList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnStatusList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnStatusList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Script_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Src.Is_Null then
         Into.Write_Entity ("src", Value.Src);
      end if;
      if not Value.Scope.Is_Null then
         Into.Write_Entity ("scope", Value.Scope);
      end if;
      if not Value.Event.Is_Null then
         Into.Write_Entity ("event", Value.Event);
      end if;
      if not Value.Load_Method.Is_Null then
         Into.Write_Entity ("load_method", Value.Load_Method);
      end if;
      if not Value.Html.Is_Null then
         Into.Write_Entity ("html", Value.Html);
      end if;
      Serialize (Into, "created_time", Value.Created_Time);
      Serialize (Into, "modified_time", Value.Modified_Time);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Script_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Script_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "src", Value.Src);
      Swagger.Streams.Deserialize (Object, "scope", Value.Scope);
      Swagger.Streams.Deserialize (Object, "event", Value.Event);
      Swagger.Streams.Deserialize (Object, "load_method", Value.Load_Method);
      Swagger.Streams.Deserialize (Object, "html", Value.Html);
      Deserialize (Object, "created_time", Value.Created_Time);
      Deserialize (Object, "modified_time", Value.Modified_Time);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Script_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Script_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseCartScriptListResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Total_Count.Is_Null then
         Into.Write_Entity ("total_count", Value.Total_Count);
      end if;
      Serialize (Into, "scripts", Value.Scripts);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseCartScriptListResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseCartScriptListResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "total_count", Value.Total_Count);
      Deserialize (Object, "scripts", Value.Scripts);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseCartScriptListResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseCartScriptListResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SpecialPrice_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "value", Value.Value);
      if not Value.Avail.Is_Null then
         Into.Write_Entity ("avail", Value.Avail);
      end if;
      Serialize (Into, "created_at", Value.Created_At);
      Serialize (Into, "modified_at", Value.Modified_At);
      Serialize (Into, "expired_at", Value.Expired_At);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SpecialPrice_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SpecialPrice_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "avail", Value.Avail);
      Deserialize (Object, "created_at", Value.Created_At);
      Deserialize (Object, "modified_at", Value.Modified_At);
      Deserialize (Object, "expired_at", Value.Expired_At);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SpecialPrice_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SpecialPrice_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TaxClassZipCodes_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Is_Range.Is_Null then
         Into.Write_Entity ("is_range", Value.Is_Range);
      end if;
      Serialize (Into, "range", Value.P_Range);
      Serialize (Into, "fields", Value.Fields);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TaxClassZipCodes_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TaxClassZipCodes_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "is_range", Value.Is_Range);
      Swagger.Streams.Deserialize (Object, "range", Value.P_Range);
      Deserialize (Object, "fields", Value.Fields);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TaxClassZipCodes_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TaxClassZipCodes_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TaxClassStates_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "tax", Value.Tax);
      if not Value.Tax_Type.Is_Null then
         Into.Write_Entity ("tax_type", Value.Tax_Type);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      Serialize (Into, "zip_codes", Value.Zip_Codes);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TaxClassStates_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TaxClassStates_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "tax", Value.Tax);
      Swagger.Streams.Deserialize (Object, "tax_type", Value.Tax_Type);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Deserialize (Object, "zip_codes", Value.Zip_Codes);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TaxClassStates_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TaxClassStates_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TaxClassCountries_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      Serialize (Into, "tax", Value.Tax);
      if not Value.Tax_Type.Is_Null then
         Into.Write_Entity ("tax_type", Value.Tax_Type);
      end if;
      Serialize (Into, "states", Value.States);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TaxClassCountries_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TaxClassCountries_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "tax", Value.Tax);
      Swagger.Streams.Deserialize (Object, "tax_type", Value.Tax_Type);
      Deserialize (Object, "states", Value.States);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TaxClassCountries_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TaxClassCountries_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.WebhookCount200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in WebhookCount200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.WebhookCount200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out WebhookCount200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.WebhookCount200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.WebhookEvents200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "events", Value.Events);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in WebhookEvents200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.WebhookEvents200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "events", Value.Events);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out WebhookEvents200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.WebhookEvents200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.WebhookEvents200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in WebhookEvents200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.WebhookEvents200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out WebhookEvents200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.WebhookEvents200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.WebhookList200ResponseResult_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "webhook", Value.Webhook);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in WebhookList200ResponseResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.WebhookList200ResponseResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "webhook", Value.Webhook);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out WebhookList200ResponseResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.WebhookList200ResponseResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.WebhookList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in WebhookList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.WebhookList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out WebhookList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.WebhookList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerAdd_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("email", Value.Email);
      if not Value.First_Name.Is_Null then
         Into.Write_Entity ("first_name", Value.First_Name);
      end if;
      if not Value.Last_Name.Is_Null then
         Into.Write_Entity ("last_name", Value.Last_Name);
      end if;
      if not Value.Password.Is_Null then
         Into.Write_Entity ("password", Value.Password);
      end if;
      if not Value.Group.Is_Null then
         Into.Write_Entity ("group", Value.Group);
      end if;
      if not Value.Group_Ids.Is_Null then
         Into.Write_Entity ("group_ids", Value.Group_Ids);
      end if;
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      if not Value.Created_Time.Is_Null then
         Into.Write_Entity ("created_time", Value.Created_Time);
      end if;
      if not Value.Modified_Time.Is_Null then
         Into.Write_Entity ("modified_time", Value.Modified_Time);
      end if;
      if not Value.Login.Is_Null then
         Into.Write_Entity ("login", Value.Login);
      end if;
      if not Value.Last_Login.Is_Null then
         Into.Write_Entity ("last_login", Value.Last_Login);
      end if;
      if not Value.Birth_Day.Is_Null then
         Into.Write_Entity ("birth_day", Value.Birth_Day);
      end if;
      if not Value.News_Letter_Subscription.Is_Null then
         Into.Write_Entity ("news_letter_subscription", Value.News_Letter_Subscription);
      end if;
      Serialize (Into, "consents", Value.Consents);
      if not Value.Gender.Is_Null then
         Into.Write_Entity ("gender", Value.Gender);
      end if;
      if not Value.Website.Is_Null then
         Into.Write_Entity ("website", Value.Website);
      end if;
      if not Value.Fax.Is_Null then
         Into.Write_Entity ("fax", Value.Fax);
      end if;
      if not Value.Company.Is_Null then
         Into.Write_Entity ("company", Value.Company);
      end if;
      if not Value.Phone.Is_Null then
         Into.Write_Entity ("phone", Value.Phone);
      end if;
      if not Value.Note.Is_Null then
         Into.Write_Entity ("note", Value.Note);
      end if;
      if not Value.Country.Is_Null then
         Into.Write_Entity ("country", Value.Country);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      Serialize (Into, "address", Value.Address);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerAdd_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerAdd_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "email", Value.Email);
      Swagger.Streams.Deserialize (Object, "first_name", Value.First_Name);
      Swagger.Streams.Deserialize (Object, "last_name", Value.Last_Name);
      Swagger.Streams.Deserialize (Object, "password", Value.Password);
      Swagger.Streams.Deserialize (Object, "group", Value.Group);
      Swagger.Streams.Deserialize (Object, "group_ids", Value.Group_Ids);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
      Swagger.Streams.Deserialize (Object, "modified_time", Value.Modified_Time);
      Swagger.Streams.Deserialize (Object, "login", Value.Login);
      Swagger.Streams.Deserialize (Object, "last_login", Value.Last_Login);
      Swagger.Streams.Deserialize (Object, "birth_day", Value.Birth_Day);
      Swagger.Streams.Deserialize (Object, "news_letter_subscription", Value.News_Letter_Subscription);
      Deserialize (Object, "consents", Value.Consents);
      Swagger.Streams.Deserialize (Object, "gender", Value.Gender);
      Swagger.Streams.Deserialize (Object, "website", Value.Website);
      Swagger.Streams.Deserialize (Object, "fax", Value.Fax);
      Swagger.Streams.Deserialize (Object, "company", Value.Company);
      Swagger.Streams.Deserialize (Object, "phone", Value.Phone);
      Swagger.Streams.Deserialize (Object, "note", Value.Note);
      Swagger.Streams.Deserialize (Object, "country", Value.Country);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Deserialize (Object, "address", Value.Address);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerAdd_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerAdd_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerUpdate_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Group_Id.Is_Null then
         Into.Write_Entity ("group_id", Value.Group_Id);
      end if;
      if not Value.Group_Ids.Is_Null then
         Into.Write_Entity ("group_ids", Value.Group_Ids);
      end if;
      if not Value.Group.Is_Null then
         Into.Write_Entity ("group", Value.Group);
      end if;
      if not Value.Email.Is_Null then
         Into.Write_Entity ("email", Value.Email);
      end if;
      if not Value.Phone.Is_Null then
         Into.Write_Entity ("phone", Value.Phone);
      end if;
      if not Value.First_Name.Is_Null then
         Into.Write_Entity ("first_name", Value.First_Name);
      end if;
      if not Value.Last_Name.Is_Null then
         Into.Write_Entity ("last_name", Value.Last_Name);
      end if;
      if not Value.Birth_Day.Is_Null then
         Into.Write_Entity ("birth_day", Value.Birth_Day);
      end if;
      if not Value.News_Letter_Subscription.Is_Null then
         Into.Write_Entity ("news_letter_subscription", Value.News_Letter_Subscription);
      end if;
      Serialize (Into, "consents", Value.Consents);
      if not Value.Tags.Is_Null then
         Into.Write_Entity ("tags", Value.Tags);
      end if;
      if not Value.Gender.Is_Null then
         Into.Write_Entity ("gender", Value.Gender);
      end if;
      if not Value.Note.Is_Null then
         Into.Write_Entity ("note", Value.Note);
      end if;
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      Serialize (Into, "address", Value.Address);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerUpdate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerUpdate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "group_id", Value.Group_Id);
      Swagger.Streams.Deserialize (Object, "group_ids", Value.Group_Ids);
      Swagger.Streams.Deserialize (Object, "group", Value.Group);
      Swagger.Streams.Deserialize (Object, "email", Value.Email);
      Swagger.Streams.Deserialize (Object, "phone", Value.Phone);
      Swagger.Streams.Deserialize (Object, "first_name", Value.First_Name);
      Swagger.Streams.Deserialize (Object, "last_name", Value.Last_Name);
      Swagger.Streams.Deserialize (Object, "birth_day", Value.Birth_Day);
      Swagger.Streams.Deserialize (Object, "news_letter_subscription", Value.News_Letter_Subscription);
      Deserialize (Object, "consents", Value.Consents);
      Swagger.Streams.Deserialize (Object, "tags", Value.Tags);
      Swagger.Streams.Deserialize (Object, "gender", Value.Gender);
      Swagger.Streams.Deserialize (Object, "note", Value.Note);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Deserialize (Object, "address", Value.Address);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerUpdate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerUpdate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseAttributeAttributesetList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseAttributeAttributesetList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseAttributeAttributesetList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseAttributeAttributesetList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseAttributeAttributesetList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseAttributeGroupList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseAttributeGroupList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseAttributeGroupList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseAttributeGroupList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseAttributeGroupList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseAttributeList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseAttributeList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseAttributeList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseAttributeList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseAttributeList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseBatchJobList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseBatchJobList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseBatchJobList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseBatchJobList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseBatchJobList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseCartCatalogPriceRulesList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseCartCatalogPriceRulesList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseCartCatalogPriceRulesList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseCartCatalogPriceRulesList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseCartCatalogPriceRulesList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseCartCouponList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseCartCouponList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseCartCouponList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseCartCouponList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseCartCouponList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseCartGiftCardList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseCartGiftCardList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseCartGiftCardList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseCartGiftCardList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseCartGiftCardList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseCartMetaDataList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseCartMetaDataList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseCartMetaDataList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseCartMetaDataList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseCartMetaDataList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseCartScriptList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseCartScriptList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseCartScriptList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseCartScriptList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseCartScriptList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseCartShippingZonesList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseCartShippingZonesList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseCartShippingZonesList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseCartShippingZonesList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseCartShippingZonesList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseCategoryList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseCategoryList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseCategoryList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseCategoryList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseCategoryList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseCustomerAttributeList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseCustomerAttributeList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseCustomerAttributeList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseCustomerAttributeList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseCustomerAttributeList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseCustomerGroupList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseCustomerGroupList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseCustomerGroupList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseCustomerGroupList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseCustomerGroupList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseCustomerList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseCustomerList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseCustomerList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseCustomerList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseCustomerList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseCustomerWishlistList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseCustomerWishlistList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseCustomerWishlistList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseCustomerWishlistList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseCustomerWishlistList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseMarketplaceProductFind_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseMarketplaceProductFind_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseMarketplaceProductFind_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseMarketplaceProductFind_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseMarketplaceProductFind_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseOrderAbandonedList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseOrderAbandonedList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseOrderAbandonedList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseOrderAbandonedList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseOrderAbandonedList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseOrderList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseOrderList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseOrderList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseOrderList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseOrderList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseOrderPreestimateShippingList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseOrderPreestimateShippingList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseOrderPreestimateShippingList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseOrderPreestimateShippingList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseOrderPreestimateShippingList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseOrderShipmentList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseOrderShipmentList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseOrderShipmentList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseOrderShipmentList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseOrderShipmentList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseOrderStatusList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseOrderStatusList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseOrderStatusList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseOrderStatusList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseOrderStatusList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseOrderTransactionList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseOrderTransactionList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseOrderTransactionList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseOrderTransactionList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseOrderTransactionList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseProductAttributeList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseProductAttributeList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseProductAttributeList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseProductAttributeList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseProductAttributeList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseProductBrandList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseProductBrandList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseProductBrandList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseProductBrandList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseProductBrandList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseProductChildItemList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseProductChildItemList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseProductChildItemList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseProductChildItemList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseProductChildItemList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseProductCurrencyList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseProductCurrencyList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseProductCurrencyList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseProductCurrencyList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseProductCurrencyList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseProductList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseProductList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseProductList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseProductList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseProductList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseProductOptionList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseProductOptionList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseProductOptionList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseProductOptionList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseProductOptionList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseProductReviewList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseProductReviewList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseProductReviewList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseProductReviewList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseProductReviewList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseReturnList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseReturnList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseReturnList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseReturnList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseReturnList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseSubscriberList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseSubscriberList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseSubscriberList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseSubscriberList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseSubscriberList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelResponseTaxClassList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "result", Value.Result);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelResponseTaxClassList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelResponseTaxClassList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelResponseTaxClassList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelResponseTaxClassList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderAddOrderItemInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("order_item_id", Value.Order_Item_Id);
      Into.Write_Entity ("order_item_name", Value.Order_Item_Name);
      if not Value.Order_Item_Model.Is_Null then
         Into.Write_Entity ("order_item_model", Value.Order_Item_Model);
      end if;
      Serialize (Into, "order_item_price", Value.Order_Item_Price);
      Into.Write_Entity ("order_item_quantity", Value.Order_Item_Quantity);
      Serialize (Into, "order_item_weight", Value.Order_Item_Weight);
      if not Value.Order_Item_Variant_Id.Is_Null then
         Into.Write_Entity ("order_item_variant_id", Value.Order_Item_Variant_Id);
      end if;
      Serialize (Into, "order_item_tax", Value.Order_Item_Tax);
      if not Value.Order_Item_Price_Includes_Tax.Is_Null then
         Into.Write_Entity ("order_item_price_includes_tax", Value.Order_Item_Price_Includes_Tax);
      end if;
      if not Value.Order_Item_Parent.Is_Null then
         Into.Write_Entity ("order_item_parent", Value.Order_Item_Parent);
      end if;
      if not Value.Order_Item_Parent_Option_Name.Is_Null then
         Into.Write_Entity ("order_item_parent_option_name", Value.Order_Item_Parent_Option_Name);
      end if;
      if not Value.Order_Item_Allow_Refund_Items_Separately.Is_Null then
         Into.Write_Entity ("order_item_allow_refund_items_separately", Value.Order_Item_Allow_Refund_Items_Separately);
      end if;
      if not Value.Order_Item_Allow_Ship_Items_Separately.Is_Null then
         Into.Write_Entity ("order_item_allow_ship_items_separately", Value.Order_Item_Allow_Ship_Items_Separately);
      end if;
      Serialize (Into, "order_item_option", Value.Order_Item_Option);
      Serialize (Into, "order_item_property", Value.Order_Item_Property);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderAddOrderItemInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderAddOrderItemInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "order_item_id", Value.Order_Item_Id);
      Swagger.Streams.Deserialize (Object, "order_item_name", Value.Order_Item_Name);
      Swagger.Streams.Deserialize (Object, "order_item_model", Value.Order_Item_Model);
      Swagger.Streams.Deserialize (Object, "order_item_price", Value.Order_Item_Price);
      Swagger.Streams.Deserialize (Object, "order_item_quantity", Value.Order_Item_Quantity);
      Swagger.Streams.Deserialize (Object, "order_item_weight", Value.Order_Item_Weight);
      Swagger.Streams.Deserialize (Object, "order_item_variant_id", Value.Order_Item_Variant_Id);
      Swagger.Streams.Deserialize (Object, "order_item_tax", Value.Order_Item_Tax);
      Swagger.Streams.Deserialize (Object, "order_item_price_includes_tax", Value.Order_Item_Price_Includes_Tax);
      Swagger.Streams.Deserialize (Object, "order_item_parent", Value.Order_Item_Parent);
      Swagger.Streams.Deserialize (Object, "order_item_parent_option_name", Value.Order_Item_Parent_Option_Name);
      Swagger.Streams.Deserialize (Object, "order_item_allow_refund_items_separately", Value.Order_Item_Allow_Refund_Items_Separately);
      Swagger.Streams.Deserialize (Object, "order_item_allow_ship_items_separately", Value.Order_Item_Allow_Ship_Items_Separately);
      Deserialize (Object, "order_item_option", Value.Order_Item_Option);
      Deserialize (Object, "order_item_property", Value.Order_Item_Property);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderAddOrderItemInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderAddOrderItemInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderAdd_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Order_Id.Is_Null then
         Into.Write_Entity ("order_id", Value.Order_Id);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.Channel_Id.Is_Null then
         Into.Write_Entity ("channel_id", Value.Channel_Id);
      end if;
      Into.Write_Entity ("order_status", Value.Order_Status);
      if not Value.Fulfillment_Status.Is_Null then
         Into.Write_Entity ("fulfillment_status", Value.Fulfillment_Status);
      end if;
      if not Value.Financial_Status.Is_Null then
         Into.Write_Entity ("financial_status", Value.Financial_Status);
      end if;
      Into.Write_Entity ("customer_email", Value.Customer_Email);
      if not Value.Customer_First_Name.Is_Null then
         Into.Write_Entity ("customer_first_name", Value.Customer_First_Name);
      end if;
      if not Value.Customer_Last_Name.Is_Null then
         Into.Write_Entity ("customer_last_name", Value.Customer_Last_Name);
      end if;
      if not Value.Customer_Phone.Is_Null then
         Into.Write_Entity ("customer_phone", Value.Customer_Phone);
      end if;
      if not Value.Customer_Country.Is_Null then
         Into.Write_Entity ("customer_country", Value.Customer_Country);
      end if;
      if not Value.Customer_Birthday.Is_Null then
         Into.Write_Entity ("customer_birthday", Value.Customer_Birthday);
      end if;
      if not Value.Customer_Fax.Is_Null then
         Into.Write_Entity ("customer_fax", Value.Customer_Fax);
      end if;
      if not Value.Order_Payment_Method.Is_Null then
         Into.Write_Entity ("order_payment_method", Value.Order_Payment_Method);
      end if;
      if not Value.Transaction_Id.Is_Null then
         Into.Write_Entity ("transaction_id", Value.Transaction_Id);
      end if;
      if not Value.Currency.Is_Null then
         Into.Write_Entity ("currency", Value.Currency);
      end if;
      if not Value.Date.Is_Null then
         Into.Write_Entity ("date", Value.Date);
      end if;
      if not Value.Date_Modified.Is_Null then
         Into.Write_Entity ("date_modified", Value.Date_Modified);
      end if;
      if not Value.Date_Finished.Is_Null then
         Into.Write_Entity ("date_finished", Value.Date_Finished);
      end if;
      Into.Write_Entity ("bill_first_name", Value.Bill_First_Name);
      Into.Write_Entity ("bill_last_name", Value.Bill_Last_Name);
      Into.Write_Entity ("bill_address_1", Value.Bill_Address_1);
      if not Value.Bill_Address_2.Is_Null then
         Into.Write_Entity ("bill_address_2", Value.Bill_Address_2);
      end if;
      Into.Write_Entity ("bill_city", Value.Bill_City);
      Into.Write_Entity ("bill_postcode", Value.Bill_Postcode);
      Into.Write_Entity ("bill_state", Value.Bill_State);
      Into.Write_Entity ("bill_country", Value.Bill_Country);
      if not Value.Bill_Company.Is_Null then
         Into.Write_Entity ("bill_company", Value.Bill_Company);
      end if;
      if not Value.Bill_Phone.Is_Null then
         Into.Write_Entity ("bill_phone", Value.Bill_Phone);
      end if;
      if not Value.Bill_Fax.Is_Null then
         Into.Write_Entity ("bill_fax", Value.Bill_Fax);
      end if;
      if not Value.Shipp_First_Name.Is_Null then
         Into.Write_Entity ("shipp_first_name", Value.Shipp_First_Name);
      end if;
      if not Value.Shipp_Last_Name.Is_Null then
         Into.Write_Entity ("shipp_last_name", Value.Shipp_Last_Name);
      end if;
      if not Value.Shipp_Address_1.Is_Null then
         Into.Write_Entity ("shipp_address_1", Value.Shipp_Address_1);
      end if;
      if not Value.Shipp_Address_2.Is_Null then
         Into.Write_Entity ("shipp_address_2", Value.Shipp_Address_2);
      end if;
      if not Value.Shipp_City.Is_Null then
         Into.Write_Entity ("shipp_city", Value.Shipp_City);
      end if;
      if not Value.Shipp_Postcode.Is_Null then
         Into.Write_Entity ("shipp_postcode", Value.Shipp_Postcode);
      end if;
      if not Value.Shipp_State.Is_Null then
         Into.Write_Entity ("shipp_state", Value.Shipp_State);
      end if;
      if not Value.Shipp_Country.Is_Null then
         Into.Write_Entity ("shipp_country", Value.Shipp_Country);
      end if;
      if not Value.Shipp_Company.Is_Null then
         Into.Write_Entity ("shipp_company", Value.Shipp_Company);
      end if;
      if not Value.Shipp_Phone.Is_Null then
         Into.Write_Entity ("shipp_phone", Value.Shipp_Phone);
      end if;
      if not Value.Shipp_Fax.Is_Null then
         Into.Write_Entity ("shipp_fax", Value.Shipp_Fax);
      end if;
      Serialize (Into, "subtotal_price", Value.Subtotal_Price);
      Serialize (Into, "tax_price", Value.Tax_Price);
      Serialize (Into, "total_price", Value.Total_Price);
      Serialize (Into, "total_paid", Value.Total_Paid);
      if not Value.Total_Weight.Is_Null then
         Into.Write_Entity ("total_weight", Value.Total_Weight);
      end if;
      if not Value.Prices_Inc_Tax.Is_Null then
         Into.Write_Entity ("prices_inc_tax", Value.Prices_Inc_Tax);
      end if;
      Serialize (Into, "shipping_price", Value.Shipping_Price);
      Serialize (Into, "shipping_tax", Value.Shipping_Tax);
      Serialize (Into, "discount", Value.Discount);
      Serialize (Into, "coupon_discount", Value.Coupon_Discount);
      Serialize (Into, "gift_certificate_discount", Value.Gift_Certificate_Discount);
      if not Value.Order_Shipping_Method.Is_Null then
         Into.Write_Entity ("order_shipping_method", Value.Order_Shipping_Method);
      end if;
      if not Value.Carrier_Id.Is_Null then
         Into.Write_Entity ("carrier_id", Value.Carrier_Id);
      end if;
      if not Value.Warehouse_Id.Is_Null then
         Into.Write_Entity ("warehouse_id", Value.Warehouse_Id);
      end if;
      Serialize (Into, "coupons", Value.Coupons);
      if not Value.Tags.Is_Null then
         Into.Write_Entity ("tags", Value.Tags);
      end if;
      if not Value.Comment.Is_Null then
         Into.Write_Entity ("comment", Value.Comment);
      end if;
      if not Value.Admin_Comment.Is_Null then
         Into.Write_Entity ("admin_comment", Value.Admin_Comment);
      end if;
      if not Value.Admin_Private_Comment.Is_Null then
         Into.Write_Entity ("admin_private_comment", Value.Admin_Private_Comment);
      end if;
      if not Value.Send_Notifications.Is_Null then
         Into.Write_Entity ("send_notifications", Value.Send_Notifications);
      end if;
      if not Value.Send_Admin_Notifications.Is_Null then
         Into.Write_Entity ("send_admin_notifications", Value.Send_Admin_Notifications);
      end if;
      if not Value.External_Source.Is_Null then
         Into.Write_Entity ("external_source", Value.External_Source);
      end if;
      if not Value.Inventory_Behaviour.Is_Null then
         Into.Write_Entity ("inventory_behaviour", Value.Inventory_Behaviour);
      end if;
      if not Value.Create_Invoice.Is_Null then
         Into.Write_Entity ("create_invoice", Value.Create_Invoice);
      end if;
      Serialize (Into, "note_attributes", Value.Note_Attributes);
      if not Value.Clear_Cache.Is_Null then
         Into.Write_Entity ("clear_cache", Value.Clear_Cache);
      end if;
      if not Value.Origin.Is_Null then
         Into.Write_Entity ("origin", Value.Origin);
      end if;
      Serialize (Into, "order_item", Value.Order_Item);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderAdd_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderAdd_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "order_id", Value.Order_Id);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "channel_id", Value.Channel_Id);
      Swagger.Streams.Deserialize (Object, "order_status", Value.Order_Status);
      Swagger.Streams.Deserialize (Object, "fulfillment_status", Value.Fulfillment_Status);
      Swagger.Streams.Deserialize (Object, "financial_status", Value.Financial_Status);
      Swagger.Streams.Deserialize (Object, "customer_email", Value.Customer_Email);
      Swagger.Streams.Deserialize (Object, "customer_first_name", Value.Customer_First_Name);
      Swagger.Streams.Deserialize (Object, "customer_last_name", Value.Customer_Last_Name);
      Swagger.Streams.Deserialize (Object, "customer_phone", Value.Customer_Phone);
      Swagger.Streams.Deserialize (Object, "customer_country", Value.Customer_Country);
      Swagger.Streams.Deserialize (Object, "customer_birthday", Value.Customer_Birthday);
      Swagger.Streams.Deserialize (Object, "customer_fax", Value.Customer_Fax);
      Swagger.Streams.Deserialize (Object, "order_payment_method", Value.Order_Payment_Method);
      Swagger.Streams.Deserialize (Object, "transaction_id", Value.Transaction_Id);
      Swagger.Streams.Deserialize (Object, "currency", Value.Currency);
      Swagger.Streams.Deserialize (Object, "date", Value.Date);
      Swagger.Streams.Deserialize (Object, "date_modified", Value.Date_Modified);
      Swagger.Streams.Deserialize (Object, "date_finished", Value.Date_Finished);
      Swagger.Streams.Deserialize (Object, "bill_first_name", Value.Bill_First_Name);
      Swagger.Streams.Deserialize (Object, "bill_last_name", Value.Bill_Last_Name);
      Swagger.Streams.Deserialize (Object, "bill_address_1", Value.Bill_Address_1);
      Swagger.Streams.Deserialize (Object, "bill_address_2", Value.Bill_Address_2);
      Swagger.Streams.Deserialize (Object, "bill_city", Value.Bill_City);
      Swagger.Streams.Deserialize (Object, "bill_postcode", Value.Bill_Postcode);
      Swagger.Streams.Deserialize (Object, "bill_state", Value.Bill_State);
      Swagger.Streams.Deserialize (Object, "bill_country", Value.Bill_Country);
      Swagger.Streams.Deserialize (Object, "bill_company", Value.Bill_Company);
      Swagger.Streams.Deserialize (Object, "bill_phone", Value.Bill_Phone);
      Swagger.Streams.Deserialize (Object, "bill_fax", Value.Bill_Fax);
      Swagger.Streams.Deserialize (Object, "shipp_first_name", Value.Shipp_First_Name);
      Swagger.Streams.Deserialize (Object, "shipp_last_name", Value.Shipp_Last_Name);
      Swagger.Streams.Deserialize (Object, "shipp_address_1", Value.Shipp_Address_1);
      Swagger.Streams.Deserialize (Object, "shipp_address_2", Value.Shipp_Address_2);
      Swagger.Streams.Deserialize (Object, "shipp_city", Value.Shipp_City);
      Swagger.Streams.Deserialize (Object, "shipp_postcode", Value.Shipp_Postcode);
      Swagger.Streams.Deserialize (Object, "shipp_state", Value.Shipp_State);
      Swagger.Streams.Deserialize (Object, "shipp_country", Value.Shipp_Country);
      Swagger.Streams.Deserialize (Object, "shipp_company", Value.Shipp_Company);
      Swagger.Streams.Deserialize (Object, "shipp_phone", Value.Shipp_Phone);
      Swagger.Streams.Deserialize (Object, "shipp_fax", Value.Shipp_Fax);
      Swagger.Streams.Deserialize (Object, "subtotal_price", Value.Subtotal_Price);
      Swagger.Streams.Deserialize (Object, "tax_price", Value.Tax_Price);
      Swagger.Streams.Deserialize (Object, "total_price", Value.Total_Price);
      Swagger.Streams.Deserialize (Object, "total_paid", Value.Total_Paid);
      Swagger.Streams.Deserialize (Object, "total_weight", Value.Total_Weight);
      Swagger.Streams.Deserialize (Object, "prices_inc_tax", Value.Prices_Inc_Tax);
      Swagger.Streams.Deserialize (Object, "shipping_price", Value.Shipping_Price);
      Swagger.Streams.Deserialize (Object, "shipping_tax", Value.Shipping_Tax);
      Swagger.Streams.Deserialize (Object, "discount", Value.Discount);
      Swagger.Streams.Deserialize (Object, "coupon_discount", Value.Coupon_Discount);
      Swagger.Streams.Deserialize (Object, "gift_certificate_discount", Value.Gift_Certificate_Discount);
      Swagger.Streams.Deserialize (Object, "order_shipping_method", Value.Order_Shipping_Method);
      Swagger.Streams.Deserialize (Object, "carrier_id", Value.Carrier_Id);
      Swagger.Streams.Deserialize (Object, "warehouse_id", Value.Warehouse_Id);
      Swagger.Streams.Deserialize (Object, "coupons", Value.Coupons);
      Swagger.Streams.Deserialize (Object, "tags", Value.Tags);
      Swagger.Streams.Deserialize (Object, "comment", Value.Comment);
      Swagger.Streams.Deserialize (Object, "admin_comment", Value.Admin_Comment);
      Swagger.Streams.Deserialize (Object, "admin_private_comment", Value.Admin_Private_Comment);
      Swagger.Streams.Deserialize (Object, "send_notifications", Value.Send_Notifications);
      Swagger.Streams.Deserialize (Object, "send_admin_notifications", Value.Send_Admin_Notifications);
      Swagger.Streams.Deserialize (Object, "external_source", Value.External_Source);
      Swagger.Streams.Deserialize (Object, "inventory_behaviour", Value.Inventory_Behaviour);
      Swagger.Streams.Deserialize (Object, "create_invoice", Value.Create_Invoice);
      Deserialize (Object, "note_attributes", Value.Note_Attributes);
      Swagger.Streams.Deserialize (Object, "clear_cache", Value.Clear_Cache);
      Swagger.Streams.Deserialize (Object, "origin", Value.Origin);
      Deserialize (Object, "order_item", Value.Order_Item);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderAdd_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderAdd_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderRefund_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "shipping", Value.Shipping);
      Serialize (Into, "fee", Value.Fee);
      Serialize (Into, "tax", Value.Tax);
      Serialize (Into, "total", Value.Total);
      Serialize (Into, "modified_time", Value.Modified_Time);
      if not Value.Comment.Is_Null then
         Into.Write_Entity ("comment", Value.Comment);
      end if;
      Serialize (Into, "items", Value.Items);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderRefund_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderRefund_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "shipping", Value.Shipping);
      Swagger.Streams.Deserialize (Object, "fee", Value.Fee);
      Swagger.Streams.Deserialize (Object, "tax", Value.Tax);
      Swagger.Streams.Deserialize (Object, "total", Value.Total);
      Deserialize (Object, "modified_time", Value.Modified_Time);
      Swagger.Streams.Deserialize (Object, "comment", Value.Comment);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderRefund_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderRefund_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderShipmentAdd_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Order_Id.Is_Null then
         Into.Write_Entity ("order_id", Value.Order_Id);
      end if;
      if not Value.Warehouse_Id.Is_Null then
         Into.Write_Entity ("warehouse_id", Value.Warehouse_Id);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.Shipment_Provider.Is_Null then
         Into.Write_Entity ("shipment_provider", Value.Shipment_Provider);
      end if;
      if not Value.Shipping_Method.Is_Null then
         Into.Write_Entity ("shipping_method", Value.Shipping_Method);
      end if;
      Serialize (Into, "items", Value.Items);
      Serialize (Into, "tracking_numbers", Value.Tracking_Numbers);
      if not Value.Tracking_Link.Is_Null then
         Into.Write_Entity ("tracking_link", Value.Tracking_Link);
      end if;
      if not Value.Is_Shipped.Is_Null then
         Into.Write_Entity ("is_shipped", Value.Is_Shipped);
      end if;
      if not Value.Send_Notifications.Is_Null then
         Into.Write_Entity ("send_notifications", Value.Send_Notifications);
      end if;
      if not Value.Adjust_Stock.Is_Null then
         Into.Write_Entity ("adjust_stock", Value.Adjust_Stock);
      end if;
      if not Value.Enable_Cache.Is_Null then
         Into.Write_Entity ("enable_cache", Value.Enable_Cache);
      end if;
      if not Value.Check_Process_Status.Is_Null then
         Into.Write_Entity ("check_process_status", Value.Check_Process_Status);
      end if;
      if not Value.Tracking_Provider.Is_Null then
         Into.Write_Entity ("tracking_provider", Value.Tracking_Provider);
      end if;
      if not Value.Use_Latest_Api_Version.Is_Null then
         Into.Write_Entity ("use_latest_api_version", Value.Use_Latest_Api_Version);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderShipmentAdd_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderShipmentAdd_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "order_id", Value.Order_Id);
      Swagger.Streams.Deserialize (Object, "warehouse_id", Value.Warehouse_Id);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "shipment_provider", Value.Shipment_Provider);
      Swagger.Streams.Deserialize (Object, "shipping_method", Value.Shipping_Method);
      Deserialize (Object, "items", Value.Items);
      Deserialize (Object, "tracking_numbers", Value.Tracking_Numbers);
      Swagger.Streams.Deserialize (Object, "tracking_link", Value.Tracking_Link);
      Swagger.Streams.Deserialize (Object, "is_shipped", Value.Is_Shipped);
      Swagger.Streams.Deserialize (Object, "send_notifications", Value.Send_Notifications);
      Swagger.Streams.Deserialize (Object, "adjust_stock", Value.Adjust_Stock);
      Swagger.Streams.Deserialize (Object, "enable_cache", Value.Enable_Cache);
      Swagger.Streams.Deserialize (Object, "check_process_status", Value.Check_Process_Status);
      Swagger.Streams.Deserialize (Object, "tracking_provider", Value.Tracking_Provider);
      Swagger.Streams.Deserialize (Object, "use_latest_api_version", Value.Use_Latest_Api_Version);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderShipmentAdd_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderShipmentAdd_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderShipmentUpdate_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("shipment_id", Value.Shipment_Id);
      if not Value.Order_Id.Is_Null then
         Into.Write_Entity ("order_id", Value.Order_Id);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.Shipment_Provider.Is_Null then
         Into.Write_Entity ("shipment_provider", Value.Shipment_Provider);
      end if;
      Serialize (Into, "tracking_numbers", Value.Tracking_Numbers);
      if not Value.Tracking_Link.Is_Null then
         Into.Write_Entity ("tracking_link", Value.Tracking_Link);
      end if;
      if not Value.Is_Shipped.Is_Null then
         Into.Write_Entity ("is_shipped", Value.Is_Shipped);
      end if;
      if not Value.Delivered_At.Is_Null then
         Into.Write_Entity ("delivered_at", Value.Delivered_At);
      end if;
      if not Value.Replace.Is_Null then
         Into.Write_Entity ("replace", Value.Replace);
      end if;
      if not Value.Send_Notifications.Is_Null then
         Into.Write_Entity ("send_notifications", Value.Send_Notifications);
      end if;
      if not Value.Tracking_Provider.Is_Null then
         Into.Write_Entity ("tracking_provider", Value.Tracking_Provider);
      end if;
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderShipmentUpdate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderShipmentUpdate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "shipment_id", Value.Shipment_Id);
      Swagger.Streams.Deserialize (Object, "order_id", Value.Order_Id);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "shipment_provider", Value.Shipment_Provider);
      Deserialize (Object, "tracking_numbers", Value.Tracking_Numbers);
      Swagger.Streams.Deserialize (Object, "tracking_link", Value.Tracking_Link);
      Swagger.Streams.Deserialize (Object, "is_shipped", Value.Is_Shipped);
      Swagger.Streams.Deserialize (Object, "delivered_at", Value.Delivered_At);
      Swagger.Streams.Deserialize (Object, "replace", Value.Replace);
      Swagger.Streams.Deserialize (Object, "send_notifications", Value.Send_Notifications);
      Swagger.Streams.Deserialize (Object, "tracking_provider", Value.Tracking_Provider);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderShipmentUpdate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderShipmentUpdate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderStatusRefund_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "shipping", Value.Shipping);
      Serialize (Into, "fee", Value.Fee);
      Serialize (Into, "tax", Value.Tax);
      Serialize (Into, "total_refunded", Value.Total_Refunded);
      Serialize (Into, "time", Value.Time);
      if not Value.Comment.Is_Null then
         Into.Write_Entity ("comment", Value.Comment);
      end if;
      Serialize (Into, "refunded_items", Value.Refunded_Items);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderStatusRefund_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderStatusRefund_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "shipping", Value.Shipping);
      Swagger.Streams.Deserialize (Object, "fee", Value.Fee);
      Swagger.Streams.Deserialize (Object, "tax", Value.Tax);
      Swagger.Streams.Deserialize (Object, "total_refunded", Value.Total_Refunded);
      Deserialize (Object, "time", Value.Time);
      Swagger.Streams.Deserialize (Object, "comment", Value.Comment);
      Deserialize (Object, "refunded_items", Value.Refunded_Items);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderStatusRefund_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderStatusRefund_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderStatus_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "history", Value.History);
      Serialize (Into, "refund_info", Value.Refund_Info);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderStatus_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderStatus_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "history", Value.History);
      Deserialize (Object, "refund_info", Value.Refund_Info);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderStatus_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderStatus_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddCertificationsInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("id", Value.Id);
      Serialize (Into, "images", Value.Images);
      Serialize (Into, "files", Value.Files);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddCertificationsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddCertificationsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "images", Value.Images);
      Deserialize (Object, "files", Value.Files);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddCertificationsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddCertificationsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddSpecificsInnerBookingDetails_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("location", Value.Location);
      Into.Write_Entity ("type", Value.P_Type);
      if not Value.Session_Duration.Is_Null then
         Into.Write_Entity ("session_duration", Value.Session_Duration);
      end if;
      if not Value.Session_Gap.Is_Null then
         Into.Write_Entity ("session_gap", Value.Session_Gap);
      end if;
      Into.Write_Entity ("sessions_count", Value.Sessions_Count);
      Serialize (Into, "time_strict_value", Value.Time_Strict_Value);
      Into.Write_Entity ("time_strict_type", Value.Time_Strict_Type);
      Serialize (Into, "availabilities", Value.Availabilities);
      Serialize (Into, "overrides", Value.Overrides);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddSpecificsInnerBookingDetails_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddSpecificsInnerBookingDetails_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "location", Value.Location);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "session_duration", Value.Session_Duration);
      Swagger.Streams.Deserialize (Object, "session_gap", Value.Session_Gap);
      Swagger.Streams.Deserialize (Object, "sessions_count", Value.Sessions_Count);
      Swagger.Streams.Deserialize (Object, "time_strict_value", Value.Time_Strict_Value);
      Swagger.Streams.Deserialize (Object, "time_strict_type", Value.Time_Strict_Type);
      Deserialize (Object, "availabilities", Value.Availabilities);
      Deserialize (Object, "overrides", Value.Overrides);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddSpecificsInnerBookingDetails_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddSpecificsInnerBookingDetails_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductVariantAdd_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Product_Id.Is_Null then
         Into.Write_Entity ("product_id", Value.Product_Id);
      end if;
      Serialize (Into, "attributes", Value.Attributes);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.Write_Entity ("model", Value.Model);
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Short_Description.Is_Null then
         Into.Write_Entity ("short_description", Value.Short_Description);
      end if;
      if not Value.Available_For_View.Is_Null then
         Into.Write_Entity ("available_for_view", Value.Available_For_View);
      end if;
      if not Value.Available_For_Sale.Is_Null then
         Into.Write_Entity ("available_for_sale", Value.Available_For_Sale);
      end if;
      if not Value.Is_Virtual.Is_Null then
         Into.Write_Entity ("is_virtual", Value.Is_Virtual);
      end if;
      if not Value.Is_Default.Is_Null then
         Into.Write_Entity ("is_default", Value.Is_Default);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.Stores_Ids.Is_Null then
         Into.Write_Entity ("stores_ids", Value.Stores_Ids);
      end if;
      if not Value.Lang_Id.Is_Null then
         Into.Write_Entity ("lang_id", Value.Lang_Id);
      end if;
      Serialize (Into, "price", Value.Price);
      Serialize (Into, "old_price", Value.Old_Price);
      Serialize (Into, "cost_price", Value.Cost_Price);
      Serialize (Into, "special_price", Value.Special_Price);
      if not Value.Sprice_Create.Is_Null then
         Into.Write_Entity ("sprice_create", Value.Sprice_Create);
      end if;
      if not Value.Sprice_Modified.Is_Null then
         Into.Write_Entity ("sprice_modified", Value.Sprice_Modified);
      end if;
      if not Value.Sprice_Expire.Is_Null then
         Into.Write_Entity ("sprice_expire", Value.Sprice_Expire);
      end if;
      Serialize (Into, "tier_prices", Value.Tier_Prices);
      Serialize (Into, "quantity", Value.Quantity);
      if not Value.Warehouse_Id.Is_Null then
         Into.Write_Entity ("warehouse_id", Value.Warehouse_Id);
      end if;
      if not Value.In_Stock.Is_Null then
         Into.Write_Entity ("in_stock", Value.In_Stock);
      end if;
      if not Value.Backorder_Status.Is_Null then
         Into.Write_Entity ("backorder_status", Value.Backorder_Status);
      end if;
      if not Value.Manage_Stock.Is_Null then
         Into.Write_Entity ("manage_stock", Value.Manage_Stock);
      end if;
      Serialize (Into, "weight", Value.Weight);
      Serialize (Into, "width", Value.Width);
      Serialize (Into, "height", Value.Height);
      Serialize (Into, "length", Value.Length);
      if not Value.Weight_Unit.Is_Null then
         Into.Write_Entity ("weight_unit", Value.Weight_Unit);
      end if;
      if not Value.Sku.Is_Null then
         Into.Write_Entity ("sku", Value.Sku);
      end if;
      if not Value.Barcode.Is_Null then
         Into.Write_Entity ("barcode", Value.Barcode);
      end if;
      if not Value.Gtin.Is_Null then
         Into.Write_Entity ("gtin", Value.Gtin);
      end if;
      if not Value.Upc.Is_Null then
         Into.Write_Entity ("upc", Value.Upc);
      end if;
      if not Value.Ean.Is_Null then
         Into.Write_Entity ("ean", Value.Ean);
      end if;
      if not Value.Mpn.Is_Null then
         Into.Write_Entity ("mpn", Value.Mpn);
      end if;
      if not Value.Isbn.Is_Null then
         Into.Write_Entity ("isbn", Value.Isbn);
      end if;
      if not Value.Manufacturer.Is_Null then
         Into.Write_Entity ("manufacturer", Value.Manufacturer);
      end if;
      if not Value.Created_At.Is_Null then
         Into.Write_Entity ("created_at", Value.Created_At);
      end if;
      if not Value.Meta_Title.Is_Null then
         Into.Write_Entity ("meta_title", Value.Meta_Title);
      end if;
      if not Value.Meta_Keywords.Is_Null then
         Into.Write_Entity ("meta_keywords", Value.Meta_Keywords);
      end if;
      if not Value.Meta_Description.Is_Null then
         Into.Write_Entity ("meta_description", Value.Meta_Description);
      end if;
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      if not Value.Tax_Class_Id.Is_Null then
         Into.Write_Entity ("tax_class_id", Value.Tax_Class_Id);
      end if;
      if not Value.Taxable.Is_Null then
         Into.Write_Entity ("taxable", Value.Taxable);
      end if;
      Serialize (Into, "fixed_cost_shipping_price", Value.Fixed_Cost_Shipping_Price);
      if not Value.Is_Free_Shipping.Is_Null then
         Into.Write_Entity ("is_free_shipping", Value.Is_Free_Shipping);
      end if;
      if not Value.Country_Of_Origin.Is_Null then
         Into.Write_Entity ("country_of_origin", Value.Country_Of_Origin);
      end if;
      if not Value.Harmonized_System_Code.Is_Null then
         Into.Write_Entity ("harmonized_system_code", Value.Harmonized_System_Code);
      end if;
      if not Value.Marketplace_Item_Properties.Is_Null then
         Into.Write_Entity ("marketplace_item_properties", Value.Marketplace_Item_Properties);
      end if;
      if not Value.Clear_Cache.Is_Null then
         Into.Write_Entity ("clear_cache", Value.Clear_Cache);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductVariantAdd_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductVariantAdd_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Deserialize (Object, "attributes", Value.Attributes);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "model", Value.Model);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "short_description", Value.Short_Description);
      Swagger.Streams.Deserialize (Object, "available_for_view", Value.Available_For_View);
      Swagger.Streams.Deserialize (Object, "available_for_sale", Value.Available_For_Sale);
      Swagger.Streams.Deserialize (Object, "is_virtual", Value.Is_Virtual);
      Swagger.Streams.Deserialize (Object, "is_default", Value.Is_Default);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "stores_ids", Value.Stores_Ids);
      Swagger.Streams.Deserialize (Object, "lang_id", Value.Lang_Id);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "old_price", Value.Old_Price);
      Swagger.Streams.Deserialize (Object, "cost_price", Value.Cost_Price);
      Swagger.Streams.Deserialize (Object, "special_price", Value.Special_Price);
      Swagger.Streams.Deserialize (Object, "sprice_create", Value.Sprice_Create);
      Swagger.Streams.Deserialize (Object, "sprice_modified", Value.Sprice_Modified);
      Swagger.Streams.Deserialize (Object, "sprice_expire", Value.Sprice_Expire);
      Deserialize (Object, "tier_prices", Value.Tier_Prices);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
      Swagger.Streams.Deserialize (Object, "warehouse_id", Value.Warehouse_Id);
      Swagger.Streams.Deserialize (Object, "in_stock", Value.In_Stock);
      Swagger.Streams.Deserialize (Object, "backorder_status", Value.Backorder_Status);
      Swagger.Streams.Deserialize (Object, "manage_stock", Value.Manage_Stock);
      Swagger.Streams.Deserialize (Object, "weight", Value.Weight);
      Swagger.Streams.Deserialize (Object, "width", Value.Width);
      Swagger.Streams.Deserialize (Object, "height", Value.Height);
      Swagger.Streams.Deserialize (Object, "length", Value.Length);
      Swagger.Streams.Deserialize (Object, "weight_unit", Value.Weight_Unit);
      Swagger.Streams.Deserialize (Object, "sku", Value.Sku);
      Swagger.Streams.Deserialize (Object, "barcode", Value.Barcode);
      Swagger.Streams.Deserialize (Object, "gtin", Value.Gtin);
      Swagger.Streams.Deserialize (Object, "upc", Value.Upc);
      Swagger.Streams.Deserialize (Object, "ean", Value.Ean);
      Swagger.Streams.Deserialize (Object, "mpn", Value.Mpn);
      Swagger.Streams.Deserialize (Object, "isbn", Value.Isbn);
      Swagger.Streams.Deserialize (Object, "manufacturer", Value.Manufacturer);
      Swagger.Streams.Deserialize (Object, "created_at", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "meta_title", Value.Meta_Title);
      Swagger.Streams.Deserialize (Object, "meta_keywords", Value.Meta_Keywords);
      Swagger.Streams.Deserialize (Object, "meta_description", Value.Meta_Description);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "tax_class_id", Value.Tax_Class_Id);
      Swagger.Streams.Deserialize (Object, "taxable", Value.Taxable);
      Swagger.Streams.Deserialize (Object, "fixed_cost_shipping_price", Value.Fixed_Cost_Shipping_Price);
      Swagger.Streams.Deserialize (Object, "is_free_shipping", Value.Is_Free_Shipping);
      Swagger.Streams.Deserialize (Object, "country_of_origin", Value.Country_Of_Origin);
      Swagger.Streams.Deserialize (Object, "harmonized_system_code", Value.Harmonized_System_Code);
      Swagger.Streams.Deserialize (Object, "marketplace_item_properties", Value.Marketplace_Item_Properties);
      Swagger.Streams.Deserialize (Object, "clear_cache", Value.Clear_Cache);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductVariantAdd_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductVariantAdd_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TaxClassRate_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "tax", Value.Tax);
      if not Value.Tax_Type.Is_Null then
         Into.Write_Entity ("tax_type", Value.Tax_Type);
      end if;
      if not Value.Tax_Based_On.Is_Null then
         Into.Write_Entity ("tax_based_on", Value.Tax_Based_On);
      end if;
      Serialize (Into, "countries", Value.Countries);
      Serialize (Into, "cities", Value.Cities);
      Serialize (Into, "address", Value.Address);
      Serialize (Into, "zip_codes", Value.Zip_Codes);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TaxClassRate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TaxClassRate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "tax", Value.Tax);
      Swagger.Streams.Deserialize (Object, "tax_type", Value.Tax_Type);
      Swagger.Streams.Deserialize (Object, "tax_based_on", Value.Tax_Based_On);
      Deserialize (Object, "countries", Value.Countries);
      Swagger.Streams.Deserialize (Object, "cities", Value.Cities);
      Swagger.Streams.Deserialize (Object, "address", Value.Address);
      Deserialize (Object, "zip_codes", Value.Zip_Codes);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TaxClassRate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TaxClassRate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CartStoreInfo_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Language.Is_Null then
         Into.Write_Entity ("language", Value.Language);
      end if;
      Serialize (Into, "store_languages", Value.Store_Languages);
      Serialize (Into, "currency", Value.Currency);
      Serialize (Into, "store_currencies", Value.Store_Currencies);
      if not Value.Timezone.Is_Null then
         Into.Write_Entity ("timezone", Value.Timezone);
      end if;
      if not Value.Country.Is_Null then
         Into.Write_Entity ("country", Value.Country);
      end if;
      if not Value.Root_Category_Id.Is_Null then
         Into.Write_Entity ("root_category_id", Value.Root_Category_Id);
      end if;
      if not Value.Multi_Store_Url.Is_Null then
         Into.Write_Entity ("multi_store_url", Value.Multi_Store_Url);
      end if;
      if not Value.Active.Is_Null then
         Into.Write_Entity ("active", Value.Active);
      end if;
      if not Value.Weight_Unit.Is_Null then
         Into.Write_Entity ("weight_unit", Value.Weight_Unit);
      end if;
      if not Value.Dimension_Unit.Is_Null then
         Into.Write_Entity ("dimension_unit", Value.Dimension_Unit);
      end if;
      if not Value.Prices_Include_Tax.Is_Null then
         Into.Write_Entity ("prices_include_tax", Value.Prices_Include_Tax);
      end if;
      Serialize (Into, "carrier_info", Value.Carrier_Info);
      Serialize (Into, "store_owner_info", Value.Store_Owner_Info);
      if not Value.Default_Warehouse_Id.Is_Null then
         Into.Write_Entity ("default_warehouse_id", Value.Default_Warehouse_Id);
      end if;
      Serialize (Into, "channels", Value.Channels);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CartStoreInfo_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CartStoreInfo_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "language", Value.Language);
      Deserialize (Object, "store_languages", Value.Store_Languages);
      Deserialize (Object, "currency", Value.Currency);
      Deserialize (Object, "store_currencies", Value.Store_Currencies);
      Swagger.Streams.Deserialize (Object, "timezone", Value.Timezone);
      Swagger.Streams.Deserialize (Object, "country", Value.Country);
      Swagger.Streams.Deserialize (Object, "root_category_id", Value.Root_Category_Id);
      Swagger.Streams.Deserialize (Object, "multi_store_url", Value.Multi_Store_Url);
      Swagger.Streams.Deserialize (Object, "active", Value.Active);
      Swagger.Streams.Deserialize (Object, "weight_unit", Value.Weight_Unit);
      Swagger.Streams.Deserialize (Object, "dimension_unit", Value.Dimension_Unit);
      Swagger.Streams.Deserialize (Object, "prices_include_tax", Value.Prices_Include_Tax);
      Deserialize (Object, "carrier_info", Value.Carrier_Info);
      Deserialize (Object, "store_owner_info", Value.Store_Owner_Info);
      Swagger.Streams.Deserialize (Object, "default_warehouse_id", Value.Default_Warehouse_Id);
      Deserialize (Object, "channels", Value.Channels);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CartStoreInfo_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CartStoreInfo_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAddSpecificsInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Value.Is_Null then
         Into.Write_Entity ("value", Value.Value);
      end if;
      Serialize (Into, "values", Value.Values);
      if not Value.Used_For_Variations.Is_Null then
         Into.Write_Entity ("used_for_variations", Value.Used_For_Variations);
      end if;
      Into.Write_Entity ("scale_id", Value.Scale_Id);
      Serialize (Into, "food_details", Value.Food_Details);
      Serialize (Into, "group_products_details", Value.Group_Products_Details);
      Serialize (Into, "booking_details", Value.Booking_Details);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAddSpecificsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAddSpecificsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "values", Value.Values);
      Swagger.Streams.Deserialize (Object, "used_for_variations", Value.Used_For_Variations);
      Swagger.Streams.Deserialize (Object, "scale_id", Value.Scale_Id);
      Deserialize (Object, "food_details", Value.Food_Details);
      Deserialize (Object, "group_products_details", Value.Group_Products_Details);
      Deserialize (Object, "booking_details", Value.Booking_Details);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAddSpecificsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAddSpecificsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Basket_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "customer", Value.Customer);
      if not Value.Basket_Url.Is_Null then
         Into.Write_Entity ("basket_url", Value.Basket_Url);
      end if;
      Serialize (Into, "created_at", Value.Created_At);
      Serialize (Into, "modified_at", Value.Modified_At);
      Serialize (Into, "currency", Value.Currency);
      Serialize (Into, "basket_products", Value.Basket_Products);
      if not Swagger.Is_Null (Value.Additional_Fields) then
         Into.Write_Entity ("additional_fields", Value.Additional_Fields);
      end if;
      if not Swagger.Is_Null (Value.Custom_Fields) then
         Into.Write_Entity ("custom_fields", Value.Custom_Fields);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Basket_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Basket_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "customer", Value.Customer);
      Swagger.Streams.Deserialize (Object, "basket_url", Value.Basket_Url);
      Deserialize (Object, "created_at", Value.Created_At);
      Deserialize (Object, "modified_at", Value.Modified_At);
      Deserialize (Object, "currency", Value.Currency);
      Deserialize (Object, "basket_products", Value.Basket_Products);
      Swagger.Streams.Deserialize (Object, "additional_fields", Value.Additional_Fields);
      Swagger.Streams.Deserialize (Object, "custom_fields", Value.Custom_Fields);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Basket_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Basket_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BasketInfo200Response_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Code.Is_Null then
         Into.Write_Entity ("return_code", Value.Return_Code);
      end if;
      if not Value.Return_Message.Is_Null then
         Into.Write_Entity ("return_message", Value.Return_Message);
      end if;
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasketInfo200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BasketInfo200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "return_code", Value.Return_Code);
      Swagger.Streams.Deserialize (Object, "return_message", Value.Return_Message);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BasketInfo200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BasketInfo200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductUpdate_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Model.Is_Null then
         Into.Write_Entity ("model", Value.Model);
      end if;
      if not Value.Sku.Is_Null then
         Into.Write_Entity ("sku", Value.Sku);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Short_Description.Is_Null then
         Into.Write_Entity ("short_description", Value.Short_Description);
      end if;
      Serialize (Into, "price", Value.Price);
      Serialize (Into, "old_price", Value.Old_Price);
      Serialize (Into, "special_price", Value.Special_Price);
      if not Value.Sprice_Create.Is_Null then
         Into.Write_Entity ("sprice_create", Value.Sprice_Create);
      end if;
      if not Value.Sprice_Expire.Is_Null then
         Into.Write_Entity ("sprice_expire", Value.Sprice_Expire);
      end if;
      Serialize (Into, "cost_price", Value.Cost_Price);
      Serialize (Into, "fixed_cost_shipping_price", Value.Fixed_Cost_Shipping_Price);
      Serialize (Into, "retail_price", Value.Retail_Price);
      Serialize (Into, "tier_prices", Value.Tier_Prices);
      Serialize (Into, "reserve_price", Value.Reserve_Price);
      Serialize (Into, "buyitnow_price", Value.Buyitnow_Price);
      if not Value.Taxable.Is_Null then
         Into.Write_Entity ("taxable", Value.Taxable);
      end if;
      if not Value.Tax_Class_Id.Is_Null then
         Into.Write_Entity ("tax_class_id", Value.Tax_Class_Id);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      if not Value.Condition.Is_Null then
         Into.Write_Entity ("condition", Value.Condition);
      end if;
      if not Value.Visible.Is_Null then
         Into.Write_Entity ("visible", Value.Visible);
      end if;
      if not Value.In_Stock.Is_Null then
         Into.Write_Entity ("in_stock", Value.In_Stock);
      end if;
      if not Value.Avail.Is_Null then
         Into.Write_Entity ("avail", Value.Avail);
      end if;
      if not Value.Avail_From.Is_Null then
         Into.Write_Entity ("avail_from", Value.Avail_From);
      end if;
      if not Value.Product_Class.Is_Null then
         Into.Write_Entity ("product_class", Value.Product_Class);
      end if;
      if not Value.Available_For_View.Is_Null then
         Into.Write_Entity ("available_for_view", Value.Available_For_View);
      end if;
      if not Value.Stores_Ids.Is_Null then
         Into.Write_Entity ("stores_ids", Value.Stores_Ids);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.Lang_Id.Is_Null then
         Into.Write_Entity ("lang_id", Value.Lang_Id);
      end if;
      Serialize (Into, "quantity", Value.Quantity);
      Serialize (Into, "reserve_quantity", Value.Reserve_Quantity);
      if not Value.Manage_Stock.Is_Null then
         Into.Write_Entity ("manage_stock", Value.Manage_Stock);
      end if;
      if not Value.Backorder_Status.Is_Null then
         Into.Write_Entity ("backorder_status", Value.Backorder_Status);
      end if;
      Serialize (Into, "increase_quantity", Value.Increase_Quantity);
      Serialize (Into, "reduce_quantity", Value.Reduce_Quantity);
      if not Value.Warehouse_Id.Is_Null then
         Into.Write_Entity ("warehouse_id", Value.Warehouse_Id);
      end if;
      Serialize (Into, "weight", Value.Weight);
      if not Value.Weight_Unit.Is_Null then
         Into.Write_Entity ("weight_unit", Value.Weight_Unit);
      end if;
      Serialize (Into, "height", Value.Height);
      Serialize (Into, "length", Value.Length);
      Serialize (Into, "width", Value.Width);
      if not Value.Dimensions_Unit.Is_Null then
         Into.Write_Entity ("dimensions_unit", Value.Dimensions_Unit);
      end if;
      if not Value.Is_Virtual.Is_Null then
         Into.Write_Entity ("is_virtual", Value.Is_Virtual);
      end if;
      if not Value.Is_Free_Shipping.Is_Null then
         Into.Write_Entity ("is_free_shipping", Value.Is_Free_Shipping);
      end if;
      if not Value.Gtin.Is_Null then
         Into.Write_Entity ("gtin", Value.Gtin);
      end if;
      if not Value.Upc.Is_Null then
         Into.Write_Entity ("upc", Value.Upc);
      end if;
      if not Value.Mpn.Is_Null then
         Into.Write_Entity ("mpn", Value.Mpn);
      end if;
      if not Value.Ean.Is_Null then
         Into.Write_Entity ("ean", Value.Ean);
      end if;
      if not Value.Isbn.Is_Null then
         Into.Write_Entity ("isbn", Value.Isbn);
      end if;
      if not Value.Barcode.Is_Null then
         Into.Write_Entity ("barcode", Value.Barcode);
      end if;
      if not Value.Manufacturer.Is_Null then
         Into.Write_Entity ("manufacturer", Value.Manufacturer);
      end if;
      if not Value.Manufacturer_Id.Is_Null then
         Into.Write_Entity ("manufacturer_id", Value.Manufacturer_Id);
      end if;
      if not Value.Categories_Ids.Is_Null then
         Into.Write_Entity ("categories_ids", Value.Categories_Ids);
      end if;
      if not Value.Related_Products_Ids.Is_Null then
         Into.Write_Entity ("related_products_ids", Value.Related_Products_Ids);
      end if;
      if not Value.Up_Sell_Products_Ids.Is_Null then
         Into.Write_Entity ("up_sell_products_ids", Value.Up_Sell_Products_Ids);
      end if;
      if not Value.Cross_Sell_Products_Ids.Is_Null then
         Into.Write_Entity ("cross_sell_products_ids", Value.Cross_Sell_Products_Ids);
      end if;
      if not Value.Meta_Title.Is_Null then
         Into.Write_Entity ("meta_title", Value.Meta_Title);
      end if;
      if not Value.Meta_Keywords.Is_Null then
         Into.Write_Entity ("meta_keywords", Value.Meta_Keywords);
      end if;
      if not Value.Meta_Description.Is_Null then
         Into.Write_Entity ("meta_description", Value.Meta_Description);
      end if;
      if not Value.Seo_Url.Is_Null then
         Into.Write_Entity ("seo_url", Value.Seo_Url);
      end if;
      if not Value.Search_Keywords.Is_Null then
         Into.Write_Entity ("search_keywords", Value.Search_Keywords);
      end if;
      if not Value.Tags.Is_Null then
         Into.Write_Entity ("tags", Value.Tags);
      end if;
      if not Value.Delivery_Code.Is_Null then
         Into.Write_Entity ("delivery_code", Value.Delivery_Code);
      end if;
      Serialize (Into, "package_details", Value.Package_Details);
      if not Value.Country_Of_Origin.Is_Null then
         Into.Write_Entity ("country_of_origin", Value.Country_Of_Origin);
      end if;
      if not Value.Harmonized_System_Code.Is_Null then
         Into.Write_Entity ("harmonized_system_code", Value.Harmonized_System_Code);
      end if;
      if not Value.Shipping_Template_Id.Is_Null then
         Into.Write_Entity ("shipping_template_id", Value.Shipping_Template_Id);
      end if;
      if not Value.When_Made.Is_Null then
         Into.Write_Entity ("when_made", Value.When_Made);
      end if;
      if not Value.Is_Supply.Is_Null then
         Into.Write_Entity ("is_supply", Value.Is_Supply);
      end if;
      if not Value.Downloadable.Is_Null then
         Into.Write_Entity ("downloadable", Value.Downloadable);
      end if;
      Serialize (Into, "materials", Value.Materials);
      if not Value.Auto_Renew.Is_Null then
         Into.Write_Entity ("auto_renew", Value.Auto_Renew);
      end if;
      if not Value.On_Sale.Is_Null then
         Into.Write_Entity ("on_sale", Value.On_Sale);
      end if;
      if not Value.Production_Partner_Ids.Is_Null then
         Into.Write_Entity ("production_partner_ids", Value.Production_Partner_Ids);
      end if;
      Serialize (Into, "manufacturer_info", Value.Manufacturer_Info);
      if not Value.Report_Request_Id.Is_Null then
         Into.Write_Entity ("report_request_id", Value.Report_Request_Id);
      end if;
      if not Value.Disable_Report_Cache.Is_Null then
         Into.Write_Entity ("disable_report_cache", Value.Disable_Report_Cache);
      end if;
      if not Value.Reindex.Is_Null then
         Into.Write_Entity ("reindex", Value.Reindex);
      end if;
      if not Value.Clear_Cache.Is_Null then
         Into.Write_Entity ("clear_cache", Value.Clear_Cache);
      end if;
      if not Value.Check_Process_Status.Is_Null then
         Into.Write_Entity ("check_process_status", Value.Check_Process_Status);
      end if;
      Serialize (Into, "specifics", Value.Specifics);
      if not Value.Shop_Section_Id.Is_Null then
         Into.Write_Entity ("shop_section_id", Value.Shop_Section_Id);
      end if;
      Serialize (Into, "personalization_details", Value.Personalization_Details);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductUpdate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductUpdate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "model", Value.Model);
      Swagger.Streams.Deserialize (Object, "sku", Value.Sku);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "short_description", Value.Short_Description);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "old_price", Value.Old_Price);
      Swagger.Streams.Deserialize (Object, "special_price", Value.Special_Price);
      Swagger.Streams.Deserialize (Object, "sprice_create", Value.Sprice_Create);
      Swagger.Streams.Deserialize (Object, "sprice_expire", Value.Sprice_Expire);
      Swagger.Streams.Deserialize (Object, "cost_price", Value.Cost_Price);
      Swagger.Streams.Deserialize (Object, "fixed_cost_shipping_price", Value.Fixed_Cost_Shipping_Price);
      Swagger.Streams.Deserialize (Object, "retail_price", Value.Retail_Price);
      Deserialize (Object, "tier_prices", Value.Tier_Prices);
      Swagger.Streams.Deserialize (Object, "reserve_price", Value.Reserve_Price);
      Swagger.Streams.Deserialize (Object, "buyitnow_price", Value.Buyitnow_Price);
      Swagger.Streams.Deserialize (Object, "taxable", Value.Taxable);
      Swagger.Streams.Deserialize (Object, "tax_class_id", Value.Tax_Class_Id);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "condition", Value.Condition);
      Swagger.Streams.Deserialize (Object, "visible", Value.Visible);
      Swagger.Streams.Deserialize (Object, "in_stock", Value.In_Stock);
      Swagger.Streams.Deserialize (Object, "avail", Value.Avail);
      Swagger.Streams.Deserialize (Object, "avail_from", Value.Avail_From);
      Swagger.Streams.Deserialize (Object, "product_class", Value.Product_Class);
      Swagger.Streams.Deserialize (Object, "available_for_view", Value.Available_For_View);
      Swagger.Streams.Deserialize (Object, "stores_ids", Value.Stores_Ids);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "lang_id", Value.Lang_Id);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
      Swagger.Streams.Deserialize (Object, "reserve_quantity", Value.Reserve_Quantity);
      Swagger.Streams.Deserialize (Object, "manage_stock", Value.Manage_Stock);
      Swagger.Streams.Deserialize (Object, "backorder_status", Value.Backorder_Status);
      Swagger.Streams.Deserialize (Object, "increase_quantity", Value.Increase_Quantity);
      Swagger.Streams.Deserialize (Object, "reduce_quantity", Value.Reduce_Quantity);
      Swagger.Streams.Deserialize (Object, "warehouse_id", Value.Warehouse_Id);
      Swagger.Streams.Deserialize (Object, "weight", Value.Weight);
      Swagger.Streams.Deserialize (Object, "weight_unit", Value.Weight_Unit);
      Swagger.Streams.Deserialize (Object, "height", Value.Height);
      Swagger.Streams.Deserialize (Object, "length", Value.Length);
      Swagger.Streams.Deserialize (Object, "width", Value.Width);
      Swagger.Streams.Deserialize (Object, "dimensions_unit", Value.Dimensions_Unit);
      Swagger.Streams.Deserialize (Object, "is_virtual", Value.Is_Virtual);
      Swagger.Streams.Deserialize (Object, "is_free_shipping", Value.Is_Free_Shipping);
      Swagger.Streams.Deserialize (Object, "gtin", Value.Gtin);
      Swagger.Streams.Deserialize (Object, "upc", Value.Upc);
      Swagger.Streams.Deserialize (Object, "mpn", Value.Mpn);
      Swagger.Streams.Deserialize (Object, "ean", Value.Ean);
      Swagger.Streams.Deserialize (Object, "isbn", Value.Isbn);
      Swagger.Streams.Deserialize (Object, "barcode", Value.Barcode);
      Swagger.Streams.Deserialize (Object, "manufacturer", Value.Manufacturer);
      Swagger.Streams.Deserialize (Object, "manufacturer_id", Value.Manufacturer_Id);
      Swagger.Streams.Deserialize (Object, "categories_ids", Value.Categories_Ids);
      Swagger.Streams.Deserialize (Object, "related_products_ids", Value.Related_Products_Ids);
      Swagger.Streams.Deserialize (Object, "up_sell_products_ids", Value.Up_Sell_Products_Ids);
      Swagger.Streams.Deserialize (Object, "cross_sell_products_ids", Value.Cross_Sell_Products_Ids);
      Swagger.Streams.Deserialize (Object, "meta_title", Value.Meta_Title);
      Swagger.Streams.Deserialize (Object, "meta_keywords", Value.Meta_Keywords);
      Swagger.Streams.Deserialize (Object, "meta_description", Value.Meta_Description);
      Swagger.Streams.Deserialize (Object, "seo_url", Value.Seo_Url);
      Swagger.Streams.Deserialize (Object, "search_keywords", Value.Search_Keywords);
      Swagger.Streams.Deserialize (Object, "tags", Value.Tags);
      Swagger.Streams.Deserialize (Object, "delivery_code", Value.Delivery_Code);
      Deserialize (Object, "package_details", Value.Package_Details);
      Swagger.Streams.Deserialize (Object, "country_of_origin", Value.Country_Of_Origin);
      Swagger.Streams.Deserialize (Object, "harmonized_system_code", Value.Harmonized_System_Code);
      Swagger.Streams.Deserialize (Object, "shipping_template_id", Value.Shipping_Template_Id);
      Swagger.Streams.Deserialize (Object, "when_made", Value.When_Made);
      Swagger.Streams.Deserialize (Object, "is_supply", Value.Is_Supply);
      Swagger.Streams.Deserialize (Object, "downloadable", Value.Downloadable);
      Swagger.Streams.Deserialize (Object, "materials", Value.Materials);
      Swagger.Streams.Deserialize (Object, "auto_renew", Value.Auto_Renew);
      Swagger.Streams.Deserialize (Object, "on_sale", Value.On_Sale);
      Swagger.Streams.Deserialize (Object, "production_partner_ids", Value.Production_Partner_Ids);
      Deserialize (Object, "manufacturer_info", Value.Manufacturer_Info);
      Swagger.Streams.Deserialize (Object, "report_request_id", Value.Report_Request_Id);
      Swagger.Streams.Deserialize (Object, "disable_report_cache", Value.Disable_Report_Cache);
      Swagger.Streams.Deserialize (Object, "reindex", Value.Reindex);
      Swagger.Streams.Deserialize (Object, "clear_cache", Value.Clear_Cache);
      Swagger.Streams.Deserialize (Object, "check_process_status", Value.Check_Process_Status);
      Deserialize (Object, "specifics", Value.Specifics);
      Swagger.Streams.Deserialize (Object, "shop_section_id", Value.Shop_Section_Id);
      Deserialize (Object, "personalization_details", Value.Personalization_Details);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductUpdate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductUpdate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAdd_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("model", Value.Model);
      Into.Write_Entity ("description", Value.Description);
      Serialize (Into, "price", Value.Price);
      if not Value.Sku.Is_Null then
         Into.Write_Entity ("sku", Value.Sku);
      end if;
      if not Value.Short_Description.Is_Null then
         Into.Write_Entity ("short_description", Value.Short_Description);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      if not Value.Visible.Is_Null then
         Into.Write_Entity ("visible", Value.Visible);
      end if;
      if not Value.Category_Id.Is_Null then
         Into.Write_Entity ("category_id", Value.Category_Id);
      end if;
      if not Value.Categories_Ids.Is_Null then
         Into.Write_Entity ("categories_ids", Value.Categories_Ids);
      end if;
      if not Value.Product_Class.Is_Null then
         Into.Write_Entity ("product_class", Value.Product_Class);
      end if;
      if not Value.Product_Type.Is_Null then
         Into.Write_Entity ("product_type", Value.Product_Type);
      end if;
      if not Value.Is_Virtual.Is_Null then
         Into.Write_Entity ("is_virtual", Value.Is_Virtual);
      end if;
      if not Value.Downloadable.Is_Null then
         Into.Write_Entity ("downloadable", Value.Downloadable);
      end if;
      if not Value.Is_Supply.Is_Null then
         Into.Write_Entity ("is_supply", Value.Is_Supply);
      end if;
      if not Value.Available_For_View.Is_Null then
         Into.Write_Entity ("available_for_view", Value.Available_For_View);
      end if;
      if not Value.Available_For_Sale.Is_Null then
         Into.Write_Entity ("available_for_sale", Value.Available_For_Sale);
      end if;
      if not Value.Store_Id.Is_Null then
         Into.Write_Entity ("store_id", Value.Store_Id);
      end if;
      if not Value.Stores_Ids.Is_Null then
         Into.Write_Entity ("stores_ids", Value.Stores_Ids);
      end if;
      if not Value.Lang_Id.Is_Null then
         Into.Write_Entity ("lang_id", Value.Lang_Id);
      end if;
      Serialize (Into, "old_price", Value.Old_Price);
      Serialize (Into, "special_price", Value.Special_Price);
      Serialize (Into, "wholesale_price", Value.Wholesale_Price);
      Serialize (Into, "cost_price", Value.Cost_Price);
      Serialize (Into, "fixed_cost_shipping_price", Value.Fixed_Cost_Shipping_Price);
      Serialize (Into, "tier_prices", Value.Tier_Prices);
      Serialize (Into, "group_prices", Value.Group_Prices);
      Serialize (Into, "buyitnow_price", Value.Buyitnow_Price);
      Serialize (Into, "reserve_price", Value.Reserve_Price);
      Serialize (Into, "quantity", Value.Quantity);
      if not Value.In_Stock.Is_Null then
         Into.Write_Entity ("in_stock", Value.In_Stock);
      end if;
      if not Value.Manage_Stock.Is_Null then
         Into.Write_Entity ("manage_stock", Value.Manage_Stock);
      end if;
      if not Value.Warehouse_Id.Is_Null then
         Into.Write_Entity ("warehouse_id", Value.Warehouse_Id);
      end if;
      if not Value.Backorder_Status.Is_Null then
         Into.Write_Entity ("backorder_status", Value.Backorder_Status);
      end if;
      Serialize (Into, "min_order_quantity", Value.Min_Order_Quantity);
      Serialize (Into, "max_order_quantity", Value.Max_Order_Quantity);
      Serialize (Into, "weight", Value.Weight);
      if not Value.Weight_Unit.Is_Null then
         Into.Write_Entity ("weight_unit", Value.Weight_Unit);
      end if;
      Serialize (Into, "width", Value.Width);
      Serialize (Into, "height", Value.Height);
      Serialize (Into, "length", Value.Length);
      if not Value.Dimensions_Unit.Is_Null then
         Into.Write_Entity ("dimensions_unit", Value.Dimensions_Unit);
      end if;
      if not Value.Barcode.Is_Null then
         Into.Write_Entity ("barcode", Value.Barcode);
      end if;
      if not Value.Upc.Is_Null then
         Into.Write_Entity ("upc", Value.Upc);
      end if;
      if not Value.Ean.Is_Null then
         Into.Write_Entity ("ean", Value.Ean);
      end if;
      if not Value.Isbn.Is_Null then
         Into.Write_Entity ("isbn", Value.Isbn);
      end if;
      if not Value.Gtin.Is_Null then
         Into.Write_Entity ("gtin", Value.Gtin);
      end if;
      if not Value.Mpn.Is_Null then
         Into.Write_Entity ("mpn", Value.Mpn);
      end if;
      if not Value.Asin.Is_Null then
         Into.Write_Entity ("asin", Value.Asin);
      end if;
      if not Value.Product_Reference.Is_Null then
         Into.Write_Entity ("product_reference", Value.Product_Reference);
      end if;
      if not Value.Harmonized_System_Code.Is_Null then
         Into.Write_Entity ("harmonized_system_code", Value.Harmonized_System_Code);
      end if;
      if not Value.Country_Of_Origin.Is_Null then
         Into.Write_Entity ("country_of_origin", Value.Country_Of_Origin);
      end if;
      if not Value.Manufacturer.Is_Null then
         Into.Write_Entity ("manufacturer", Value.Manufacturer);
      end if;
      if not Value.Manufacturer_Id.Is_Null then
         Into.Write_Entity ("manufacturer_id", Value.Manufacturer_Id);
      end if;
      Serialize (Into, "manufacturer_info", Value.Manufacturer_Info);
      if not Value.Brand_Name.Is_Null then
         Into.Write_Entity ("brand_name", Value.Brand_Name);
      end if;
      if not Value.Image_Url.Is_Null then
         Into.Write_Entity ("image_url", Value.Image_Url);
      end if;
      if not Value.Image_Name.Is_Null then
         Into.Write_Entity ("image_name", Value.Image_Name);
      end if;
      Serialize (Into, "additional_image_urls", Value.Additional_Image_Urls);
      Serialize (Into, "files", Value.Files);
      Serialize (Into, "size_chart", Value.Size_Chart);
      if not Value.Related_Products_Ids.Is_Null then
         Into.Write_Entity ("related_products_ids", Value.Related_Products_Ids);
      end if;
      if not Value.Up_Sell_Products_Ids.Is_Null then
         Into.Write_Entity ("up_sell_products_ids", Value.Up_Sell_Products_Ids);
      end if;
      if not Value.Cross_Sell_Products_Ids.Is_Null then
         Into.Write_Entity ("cross_sell_products_ids", Value.Cross_Sell_Products_Ids);
      end if;
      if not Value.Attribute_Set_Name.Is_Null then
         Into.Write_Entity ("attribute_set_name", Value.Attribute_Set_Name);
      end if;
      if not Value.Attribute_Name.Is_Null then
         Into.Write_Entity ("attribute_name", Value.Attribute_Name);
      end if;
      if not Value.Search_Keywords.Is_Null then
         Into.Write_Entity ("search_keywords", Value.Search_Keywords);
      end if;
      if not Value.Tags.Is_Null then
         Into.Write_Entity ("tags", Value.Tags);
      end if;
      Serialize (Into, "materials", Value.Materials);
      Serialize (Into, "certifications", Value.Certifications);
      Serialize (Into, "specifics", Value.Specifics);
      if not Value.Avail_From.Is_Null then
         Into.Write_Entity ("avail_from", Value.Avail_From);
      end if;
      if not Value.Sprice_Create.Is_Null then
         Into.Write_Entity ("sprice_create", Value.Sprice_Create);
      end if;
      if not Value.Sprice_Modified.Is_Null then
         Into.Write_Entity ("sprice_modified", Value.Sprice_Modified);
      end if;
      if not Value.Sprice_Expire.Is_Null then
         Into.Write_Entity ("sprice_expire", Value.Sprice_Expire);
      end if;
      if not Value.Created_At.Is_Null then
         Into.Write_Entity ("created_at", Value.Created_At);
      end if;
      if not Value.Auto_Renew.Is_Null then
         Into.Write_Entity ("auto_renew", Value.Auto_Renew);
      end if;
      if not Value.When_Made.Is_Null then
         Into.Write_Entity ("when_made", Value.When_Made);
      end if;
      if not Value.Meta_Title.Is_Null then
         Into.Write_Entity ("meta_title", Value.Meta_Title);
      end if;
      if not Value.Meta_Keywords.Is_Null then
         Into.Write_Entity ("meta_keywords", Value.Meta_Keywords);
      end if;
      if not Value.Meta_Description.Is_Null then
         Into.Write_Entity ("meta_description", Value.Meta_Description);
      end if;
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      if not Value.Seo_Url.Is_Null then
         Into.Write_Entity ("seo_url", Value.Seo_Url);
      end if;
      if not Value.Tax_Class_Id.Is_Null then
         Into.Write_Entity ("tax_class_id", Value.Tax_Class_Id);
      end if;
      if not Value.Taxable.Is_Null then
         Into.Write_Entity ("taxable", Value.Taxable);
      end if;
      Serialize (Into, "sales_tax", Value.Sales_Tax);
      if not Value.Condition.Is_Null then
         Into.Write_Entity ("condition", Value.Condition);
      end if;
      if not Value.Condition_Description.Is_Null then
         Into.Write_Entity ("condition_description", Value.Condition_Description);
      end if;
      if not Value.Allow_Display_Condition.Is_Null then
         Into.Write_Entity ("allow_display_condition", Value.Allow_Display_Condition);
      end if;
      Serialize (Into, "payment_methods", Value.Payment_Methods);
      if not Value.Paypal_Email.Is_Null then
         Into.Write_Entity ("paypal_email", Value.Paypal_Email);
      end if;
      if not Value.Shipping_Template_Id.Is_Null then
         Into.Write_Entity ("shipping_template_id", Value.Shipping_Template_Id);
      end if;
      Serialize (Into, "shipping_details", Value.Shipping_Details);
      if not Value.Is_Free_Shipping.Is_Null then
         Into.Write_Entity ("is_free_shipping", Value.Is_Free_Shipping);
      end if;
      if not Value.Delivery_Code.Is_Null then
         Into.Write_Entity ("delivery_code", Value.Delivery_Code);
      end if;
      if not Value.Delivery_Type.Is_Null then
         Into.Write_Entity ("delivery_type", Value.Delivery_Type);
      end if;
      if not Value.Delivery_Time.Is_Null then
         Into.Write_Entity ("delivery_time", Value.Delivery_Time);
      end if;
      if not Value.Delivery_Option_Ids.Is_Null then
         Into.Write_Entity ("delivery_option_ids", Value.Delivery_Option_Ids);
      end if;
      Serialize (Into, "package_details", Value.Package_Details);
      Serialize (Into, "logistic_info", Value.Logistic_Info);
      if not Value.Listing_Duration.Is_Null then
         Into.Write_Entity ("listing_duration", Value.Listing_Duration);
      end if;
      if not Value.Listing_Type.Is_Null then
         Into.Write_Entity ("listing_type", Value.Listing_Type);
      end if;
      if not Value.Return_Accepted.Is_Null then
         Into.Write_Entity ("return_accepted", Value.Return_Accepted);
      end if;
      Serialize (Into, "seller_profiles", Value.Seller_Profiles);
      if not Value.Auction_Confidentiality_Level.Is_Null then
         Into.Write_Entity ("auction_confidentiality_level", Value.Auction_Confidentiality_Level);
      end if;
      Serialize (Into, "best_offer", Value.Best_Offer);
      if not Value.Production_Partner_Ids.Is_Null then
         Into.Write_Entity ("production_partner_ids", Value.Production_Partner_Ids);
      end if;
      if not Value.Marketplace_Item_Properties.Is_Null then
         Into.Write_Entity ("marketplace_item_properties", Value.Marketplace_Item_Properties);
      end if;
      if not Value.Clear_Cache.Is_Null then
         Into.Write_Entity ("clear_cache", Value.Clear_Cache);
      end if;
      if not Value.Viewed_Count.Is_Null then
         Into.Write_Entity ("viewed_count", Value.Viewed_Count);
      end if;
      if not Value.Ordered_Count.Is_Null then
         Into.Write_Entity ("ordered_count", Value.Ordered_Count);
      end if;
      if not Value.Shop_Section_Id.Is_Null then
         Into.Write_Entity ("shop_section_id", Value.Shop_Section_Id);
      end if;
      if not Value.Return_Policy_Id.Is_Null then
         Into.Write_Entity ("return_policy_id", Value.Return_Policy_Id);
      end if;
      Serialize (Into, "personalization_details", Value.Personalization_Details);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAdd_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAdd_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "model", Value.Model);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "sku", Value.Sku);
      Swagger.Streams.Deserialize (Object, "short_description", Value.Short_Description);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "visible", Value.Visible);
      Swagger.Streams.Deserialize (Object, "category_id", Value.Category_Id);
      Swagger.Streams.Deserialize (Object, "categories_ids", Value.Categories_Ids);
      Swagger.Streams.Deserialize (Object, "product_class", Value.Product_Class);
      Swagger.Streams.Deserialize (Object, "product_type", Value.Product_Type);
      Swagger.Streams.Deserialize (Object, "is_virtual", Value.Is_Virtual);
      Swagger.Streams.Deserialize (Object, "downloadable", Value.Downloadable);
      Swagger.Streams.Deserialize (Object, "is_supply", Value.Is_Supply);
      Swagger.Streams.Deserialize (Object, "available_for_view", Value.Available_For_View);
      Swagger.Streams.Deserialize (Object, "available_for_sale", Value.Available_For_Sale);
      Swagger.Streams.Deserialize (Object, "store_id", Value.Store_Id);
      Swagger.Streams.Deserialize (Object, "stores_ids", Value.Stores_Ids);
      Swagger.Streams.Deserialize (Object, "lang_id", Value.Lang_Id);
      Swagger.Streams.Deserialize (Object, "old_price", Value.Old_Price);
      Swagger.Streams.Deserialize (Object, "special_price", Value.Special_Price);
      Swagger.Streams.Deserialize (Object, "wholesale_price", Value.Wholesale_Price);
      Swagger.Streams.Deserialize (Object, "cost_price", Value.Cost_Price);
      Swagger.Streams.Deserialize (Object, "fixed_cost_shipping_price", Value.Fixed_Cost_Shipping_Price);
      Deserialize (Object, "tier_prices", Value.Tier_Prices);
      Deserialize (Object, "group_prices", Value.Group_Prices);
      Swagger.Streams.Deserialize (Object, "buyitnow_price", Value.Buyitnow_Price);
      Swagger.Streams.Deserialize (Object, "reserve_price", Value.Reserve_Price);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
      Swagger.Streams.Deserialize (Object, "in_stock", Value.In_Stock);
      Swagger.Streams.Deserialize (Object, "manage_stock", Value.Manage_Stock);
      Swagger.Streams.Deserialize (Object, "warehouse_id", Value.Warehouse_Id);
      Swagger.Streams.Deserialize (Object, "backorder_status", Value.Backorder_Status);
      Swagger.Streams.Deserialize (Object, "min_order_quantity", Value.Min_Order_Quantity);
      Swagger.Streams.Deserialize (Object, "max_order_quantity", Value.Max_Order_Quantity);
      Swagger.Streams.Deserialize (Object, "weight", Value.Weight);
      Swagger.Streams.Deserialize (Object, "weight_unit", Value.Weight_Unit);
      Swagger.Streams.Deserialize (Object, "width", Value.Width);
      Swagger.Streams.Deserialize (Object, "height", Value.Height);
      Swagger.Streams.Deserialize (Object, "length", Value.Length);
      Swagger.Streams.Deserialize (Object, "dimensions_unit", Value.Dimensions_Unit);
      Swagger.Streams.Deserialize (Object, "barcode", Value.Barcode);
      Swagger.Streams.Deserialize (Object, "upc", Value.Upc);
      Swagger.Streams.Deserialize (Object, "ean", Value.Ean);
      Swagger.Streams.Deserialize (Object, "isbn", Value.Isbn);
      Swagger.Streams.Deserialize (Object, "gtin", Value.Gtin);
      Swagger.Streams.Deserialize (Object, "mpn", Value.Mpn);
      Swagger.Streams.Deserialize (Object, "asin", Value.Asin);
      Swagger.Streams.Deserialize (Object, "product_reference", Value.Product_Reference);
      Swagger.Streams.Deserialize (Object, "harmonized_system_code", Value.Harmonized_System_Code);
      Swagger.Streams.Deserialize (Object, "country_of_origin", Value.Country_Of_Origin);
      Swagger.Streams.Deserialize (Object, "manufacturer", Value.Manufacturer);
      Swagger.Streams.Deserialize (Object, "manufacturer_id", Value.Manufacturer_Id);
      Deserialize (Object, "manufacturer_info", Value.Manufacturer_Info);
      Swagger.Streams.Deserialize (Object, "brand_name", Value.Brand_Name);
      Swagger.Streams.Deserialize (Object, "image_url", Value.Image_Url);
      Swagger.Streams.Deserialize (Object, "image_name", Value.Image_Name);
      Swagger.Streams.Deserialize (Object, "additional_image_urls", Value.Additional_Image_Urls);
      Deserialize (Object, "files", Value.Files);
      Deserialize (Object, "size_chart", Value.Size_Chart);
      Swagger.Streams.Deserialize (Object, "related_products_ids", Value.Related_Products_Ids);
      Swagger.Streams.Deserialize (Object, "up_sell_products_ids", Value.Up_Sell_Products_Ids);
      Swagger.Streams.Deserialize (Object, "cross_sell_products_ids", Value.Cross_Sell_Products_Ids);
      Swagger.Streams.Deserialize (Object, "attribute_set_name", Value.Attribute_Set_Name);
      Swagger.Streams.Deserialize (Object, "attribute_name", Value.Attribute_Name);
      Swagger.Streams.Deserialize (Object, "search_keywords", Value.Search_Keywords);
      Swagger.Streams.Deserialize (Object, "tags", Value.Tags);
      Swagger.Streams.Deserialize (Object, "materials", Value.Materials);
      Deserialize (Object, "certifications", Value.Certifications);
      Deserialize (Object, "specifics", Value.Specifics);
      Swagger.Streams.Deserialize (Object, "avail_from", Value.Avail_From);
      Swagger.Streams.Deserialize (Object, "sprice_create", Value.Sprice_Create);
      Swagger.Streams.Deserialize (Object, "sprice_modified", Value.Sprice_Modified);
      Swagger.Streams.Deserialize (Object, "sprice_expire", Value.Sprice_Expire);
      Swagger.Streams.Deserialize (Object, "created_at", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "auto_renew", Value.Auto_Renew);
      Swagger.Streams.Deserialize (Object, "when_made", Value.When_Made);
      Swagger.Streams.Deserialize (Object, "meta_title", Value.Meta_Title);
      Swagger.Streams.Deserialize (Object, "meta_keywords", Value.Meta_Keywords);
      Swagger.Streams.Deserialize (Object, "meta_description", Value.Meta_Description);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "seo_url", Value.Seo_Url);
      Swagger.Streams.Deserialize (Object, "tax_class_id", Value.Tax_Class_Id);
      Swagger.Streams.Deserialize (Object, "taxable", Value.Taxable);
      Deserialize (Object, "sales_tax", Value.Sales_Tax);
      Swagger.Streams.Deserialize (Object, "condition", Value.Condition);
      Swagger.Streams.Deserialize (Object, "condition_description", Value.Condition_Description);
      Swagger.Streams.Deserialize (Object, "allow_display_condition", Value.Allow_Display_Condition);
      Swagger.Streams.Deserialize (Object, "payment_methods", Value.Payment_Methods);
      Swagger.Streams.Deserialize (Object, "paypal_email", Value.Paypal_Email);
      Swagger.Streams.Deserialize (Object, "shipping_template_id", Value.Shipping_Template_Id);
      Deserialize (Object, "shipping_details", Value.Shipping_Details);
      Swagger.Streams.Deserialize (Object, "is_free_shipping", Value.Is_Free_Shipping);
      Swagger.Streams.Deserialize (Object, "delivery_code", Value.Delivery_Code);
      Swagger.Streams.Deserialize (Object, "delivery_type", Value.Delivery_Type);
      Swagger.Streams.Deserialize (Object, "delivery_time", Value.Delivery_Time);
      Swagger.Streams.Deserialize (Object, "delivery_option_ids", Value.Delivery_Option_Ids);
      Deserialize (Object, "package_details", Value.Package_Details);
      Deserialize (Object, "logistic_info", Value.Logistic_Info);
      Swagger.Streams.Deserialize (Object, "listing_duration", Value.Listing_Duration);
      Swagger.Streams.Deserialize (Object, "listing_type", Value.Listing_Type);
      Swagger.Streams.Deserialize (Object, "return_accepted", Value.Return_Accepted);
      Deserialize (Object, "seller_profiles", Value.Seller_Profiles);
      Swagger.Streams.Deserialize (Object, "auction_confidentiality_level", Value.Auction_Confidentiality_Level);
      Deserialize (Object, "best_offer", Value.Best_Offer);
      Swagger.Streams.Deserialize (Object, "production_partner_ids", Value.Production_Partner_Ids);
      Swagger.Streams.Deserialize (Object, "marketplace_item_properties", Value.Marketplace_Item_Properties);
      Swagger.Streams.Deserialize (Object, "clear_cache", Value.Clear_Cache);
      Swagger.Streams.Deserialize (Object, "viewed_count", Value.Viewed_Count);
      Swagger.Streams.Deserialize (Object, "ordered_count", Value.Ordered_Count);
      Swagger.Streams.Deserialize (Object, "shop_section_id", Value.Shop_Section_Id);
      Swagger.Streams.Deserialize (Object, "return_policy_id", Value.Return_Policy_Id);
      Deserialize (Object, "personalization_details", Value.Personalization_Details);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAdd_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAdd_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


end .Models;
